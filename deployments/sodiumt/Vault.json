{
  "address": "0x4D3F41a7572520555f3912FE99f5dD7e9dB839F8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mpcManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC1155TokenReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20TokenReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc721",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC721TokenReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "MigrationToNewVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "NativeTokenReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeTime",
          "type": "uint256"
        }
      ],
      "name": "PendingMigrationToNewVault",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveMigration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newVault",
          "type": "address"
        }
      ],
      "name": "migrationToNewVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "migrationToNewVaultERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "migrationToNewVaultERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "migrationToNewVaultERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrationToNewVaultNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mpcManager",
      "outputs": [
        {
          "internalType": "contract IMPCManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonceMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingNewVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "activeTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rand",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "args": [
    "0x0aE1B76389397Dc81c16eB8e2dEb0C592D3C873c",
    "0x17a243f7Dd13BadE0a7001Ad71a7ef4628A75fCB"
  ],
  "numDeployments": 1,
  "solcInputHash": "85158755ab6abdb4e22ae1f368bd8d85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mpcManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC1155TokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20TokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC721TokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"MigrationToNewVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NativeTokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"}],\"name\":\"PendingMigrationToNewVault\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"migrationToNewVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"migrationToNewVaultERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"migrationToNewVaultERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"migrationToNewVaultERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationToNewVaultNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpcManager\",\"outputs\":[{\"internalType\":\"contract IMPCManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingNewVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"ERC721\"},\"transferERC20(address,uint256,bytes)\":{\"notice\":\"This will allow public chain dapps to send tokens directly to the sodium chain\"},\"transferNativeToken(bytes)\":{\"notice\":\"native token bridge to\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\",\"keccak256\":\"0x8b4a492c14765d24f935516cb3437a1b39fbd65f20fc8828e7880fb1bdcfba86\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/bridge/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../mpc/IMPCManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\n\\ncontract Vault {\\n    address private constant native =\\n        0x4000000000000000000000000000000000000000;\\n    IMPCManager public mpcManager;\\n\\n    // timelock for admin\\n    uint256 public adminDelay = 7 days;\\n\\n    address public admin;\\n\\n    /// migration\\n    struct PendingNewVault {\\n        address addr;\\n        uint256 activeTime;\\n    }\\n    PendingNewVault public pendingNewVault;\\n    address public newVault;\\n\\n    mapping(address => uint256) public nonceMap;\\n\\n    mapping(address => mapping(address => uint256)) private balances;\\n\\n    event NativeTokenReceived(\\n        address indexed sender,\\n        uint256 value,\\n        bytes data\\n    );\\n\\n    // The advantage of getting metadata on the chain is that we can easily get consistency in the sodium chain\\n    event ERC20TokenReceived(\\n        address indexed erc20,\\n        address indexed sender,\\n        uint256 value,\\n        string symbol,\\n        string name,\\n        uint8 decimals,\\n        bytes data\\n    );\\n    event ERC721TokenReceived(\\n        address indexed erc721,\\n        address indexed sender,\\n        uint256 tokenId,\\n        string symbol,\\n        string name,\\n        string uri,\\n        bytes data\\n    );\\n    event ERC1155TokenReceived(\\n        address indexed erc1155,\\n        address indexed sender,\\n        uint256[] tokenIds,\\n        uint256[] values,\\n        string[] uris,\\n        bytes data\\n    );\\n\\n    // migration\\n    event PendingMigrationToNewVault(address newVault, uint256 activeTime);\\n    event MigrationToNewVault(address newVault);\\n\\n    constructor(address _mpcManager, address _admin) {\\n        mpcManager = IMPCManager(_mpcManager);\\n    }\\n\\n    function _onlyMPC(uint256 round) internal view {\\n        require(\\n            mpcManager.checkIsValidMPCWithRound(round, msg.sender),\\n            \\\"only entryPoint or wallet self\\\"\\n        );\\n    }\\n\\n    function _onlyAdmin() internal view {\\n        require(msg.sender == admin, \\\"only entryPoint or wallet self\\\");\\n    }\\n\\n    function _onlyNotAbandoned() internal view {\\n        require(newVault == address(0), \\\"Vault: is abandoned\\\");\\n    }\\n\\n    // change admin\\n    function changeAdmin(address _admin) external {\\n        require(_admin != address(0), \\\"MPCManager: invalid admin address\\\");\\n        _onlyAdmin();\\n        admin = _admin;\\n    }\\n\\n    function migrationToNewVault(address _newVault) external {\\n        _onlyAdmin();\\n        _onlyNotAbandoned();\\n        require(_newVault != address(0), \\\"Vault: invalid newVault address\\\");\\n        pendingNewVault = PendingNewVault({\\n            addr: _newVault,\\n            activeTime: block.timestamp + adminDelay\\n        });\\n        emit PendingMigrationToNewVault(\\n            _newVault,\\n            block.timestamp + adminDelay\\n        );\\n    }\\n\\n    // approve\\n    function approveMigration() external {\\n        _onlyNotAbandoned();\\n        require(\\n            pendingNewVault.addr != address(0),\\n            \\\"Vault: no pending migration\\\"\\n        );\\n        require(\\n            block.timestamp >= pendingNewVault.activeTime,\\n            \\\"Vault: not active time\\\"\\n        );\\n        newVault = pendingNewVault.addr;\\n        emit MigrationToNewVault(newVault);\\n    }\\n\\n    // migration to new vault erc20\\n    function migrationToNewVaultERC20(address erc20) external {\\n        require(newVault != address(0), \\\"Vault: no newVault\\\");\\n        uint256 amount = IERC20Metadata(erc20).balanceOf(address(this));\\n        IERC20(erc20).transfer(newVault, amount);\\n    }\\n\\n    // migration to new vault native\\n    function migrationToNewVaultNative() external payable {\\n        require(newVault != address(0), \\\"Vault: no newVault\\\");\\n        (bool success, ) = newVault.call{value: address(this).balance}(\\n            new bytes(0)\\n        );\\n        require(success, \\\"transferEther: failed\\\");\\n    }\\n\\n    // migration to new vault erc721\\n    function migrationToNewVaultERC721(\\n        address erc721,\\n        uint256 tokenId\\n    ) external {\\n        require(newVault != address(0), \\\"Vault: no newVault\\\");\\n        IERC721(erc721).transferFrom(address(this), newVault, tokenId);\\n    }\\n\\n    // migration to new vault erc1155\\n    function migrationToNewVaultERC1155(\\n        address erc1155,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(newVault != address(0), \\\"Vault: no newVault\\\");\\n        IERC1155(erc1155).safeBatchTransferFrom(\\n            address(this),\\n            newVault,\\n            tokenIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    fallback() external payable {\\n        emit NativeTokenReceived(msg.sender, msg.value, \\\"\\\");\\n    }\\n\\n    /// native token bridge\\n    receive() external payable {\\n        emit NativeTokenReceived(msg.sender, msg.value, \\\"\\\");\\n    }\\n\\n    /// native token bridge to\\n    function transferNativeToken(bytes memory data) external payable {\\n        require(msg.value > 0, \\\"transferNativeToken: value is 0\\\");\\n        emit NativeTokenReceived(msg.sender, msg.value, data);\\n    }\\n\\n    /// This will allow public chain dapps to send tokens directly to the sodium chain\\n    function transferERC20(IERC20Metadata erc20, uint256 amount, bytes memory data) external {\\n        string memory symbol = erc20.symbol();\\n        string memory name = erc20.name();\\n        uint8 decimals = erc20.decimals();\\n        require(amount > 0, \\\"transferERC20: amount is 0\\\");\\n        uint256 allowanceAmount = erc20.allowance(msg.sender, address(this));\\n        require(\\n            allowanceAmount >= amount,\\n            \\\"transferERC20: allowance not enough\\\"\\n        );\\n        erc20.transferFrom(msg.sender, address(this), amount);\\n        emit ERC20TokenReceived(\\n            address(erc20), \\n            msg.sender, \\n            amount,\\n            symbol,\\n            name,\\n            decimals,\\n            data\\n        );\\n    }\\n\\n    function transferNativeToken(\\n        uint256 rand,\\n        address payable to,\\n        uint256 amount\\n    ) external {\\n        _onlyMPC(rand);\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n        require(success, \\\"transferEther: failed\\\");\\n    }\\n\\n    /// ERC721\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) external returns (bytes4) {\\n        IERC721Metadata erc721 = IERC721Metadata(msg.sender);\\n        string memory name = erc721.name();\\n        string memory symbol = erc721.symbol();\\n        string memory tokenURI = erc721.tokenURI(_tokenId);\\n\\n        emit ERC721TokenReceived(\\n            msg.sender, \\n            _from, \\n            _tokenId, \\n            symbol,\\n            name,\\n            tokenURI,\\n            _data\\n        );\\n        return this.onERC721Received.selector;\\n    }\\n\\n    // ERC1155\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes memory _data\\n    ) external returns (bytes4) {\\n        uint256[] memory ids = new uint256[](1);\\n        uint256[] memory values = new uint256[](1);\\n        ids[0] = _id;\\n        values[0] = _value;\\n        bytes4 magic = onERC1155BatchReceived(_operator, _from, ids, values, _data);\\n        require(magic == this.onERC1155BatchReceived.selector, \\\"invalid magic\\\");\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    // ERC1155\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _values,\\n        bytes memory _data\\n    ) public returns (bytes4) {\\n        IERC1155MetadataURI erc1155 = IERC1155MetadataURI(msg.sender);\\n        string[] memory uris = new string[](_ids.length);\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            uris[i] = erc1155.uri(_ids[i]);\\n        }\\n        emit ERC1155TokenReceived(\\n            msg.sender,\\n            _from,\\n            _ids,\\n            _values,\\n            uris,\\n            _data\\n        );\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4546324c00701990d0b5f48b859381c1af26e5e0cf6699fb28baa3a190a918cf\",\"license\":\"LGPL-3.0-only\"},\"contracts/mpc/IMPCManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMPCManager {\\n    function checkIsValidMPCWithRound(uint256 round, address mpc) external view returns (bool);\\n    function checkIsValidCurrentActiveMPC(address mpc) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb868814a6c1e286cac48d66a75bbd5a5ec7904bbb5059df1964ca124731d309b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c8063722d1fd6116100a05780638f283970116100645780638f283970146103c457806393dbdf1d146103e4578063bc197c81146103f7578063f23a6e6114610417578063f851a4401461043757610171565b8063722d1fd61461032e578063795b176d1461034e5780638343cbcc14610364578063846b3c8b1461036c57806388aaf0c8146103a457610171565b80632c1f90af116100e75780632c1f90af1461025b578063325564ec1461027b578063435d61981461029057806369f19039146102d35780636e978d77146102f357610171565b806307774c3a146101bb578063111ebaae146101dd578063150b7a02146101fd57806318a1948d1461023b57610171565b3661017157336001600160a01b03167f1eb8967d9af68243151a80b28201971f9f8372a2e860d277866487724dfe2e653460405161016791815260406020820181905260009082015260600190565b60405180910390a2005b336001600160a01b03167f1eb8967d9af68243151a80b28201971f9f8372a2e860d277866487724dfe2e653460405161016791815260406020820181905260009082015260600190565b3480156101c757600080fd5b506101db6101d636600461145c565b610457565b005b3480156101e957600080fd5b506101db6101f8366004611480565b610571565b34801561020957600080fd5b5061021d61021836600461157d565b610635565b6040516001600160e01b031990911681526020015b60405180910390f35b34801561024757600080fd5b506101db6102563660046115e9565b6107ea565b34801561026757600080fd5b506101db610276366004611661565b610882565b34801561028757600080fd5b506101db61091d565b34801561029c57600080fd5b506003546004546102b4916001600160a01b03169082565b604080516001600160a01b039093168352602083019190915201610232565b3480156102df57600080fd5b506101db6102ee36600461145c565b610a1e565b3480156102ff57600080fd5b5061032061030e36600461145c565b60066020526000908152604090205481565b604051908152602001610232565b34801561033a57600080fd5b506101db6103493660046116e4565b610b2c565b34801561035a57600080fd5b5061032060015481565b6101db610e59565b34801561037857600080fd5b5060005461038c906001600160a01b031681565b6040516001600160a01b039091168152602001610232565b3480156103b057600080fd5b5060055461038c906001600160a01b031681565b3480156103d057600080fd5b506101db6103df36600461145c565b610f39565b6101db6103f236600461173d565b610fc3565b34801561040357600080fd5b5061021d6104123660046117fa565b611059565b34801561042357600080fd5b5061021d6104323660046118a8565b6111df565b34801561044357600080fd5b5060025461038c906001600160a01b031681565b6005546001600160a01b03166104885760405162461bcd60e51b815260040161047f90611911565b60405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f3919061193d565b60055460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291925083169063a9059cbb906044016020604051808303816000875af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190611956565b505050565b61057a836112dd565b604080516000808252602082019092526001600160a01b0384169083906040516105a4919061199c565b60006040518083038185875af1925050503d80600081146105e1576040519150601f19603f3d011682016040523d82523d6000602084013e6105e6565b606091505b505090508061062f5760405162461bcd60e51b81526020600482015260156024820152741d1c985b9cd9995c915d1a195c8e8819985a5b1959605a1b604482015260640161047f565b50505050565b6000803390506000816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a391908101906119b8565b90506000826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156106e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261070d91908101906119b8565b60405163c87b56dd60e01b8152600481018890529091506000906001600160a01b0385169063c87b56dd90602401600060405180830381865afa158015610758573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078091908101906119b8565b9050876001600160a01b0316336001600160a01b03167f6066d3e5dd04b1b5d0836050ef55017086568c383cee5fd14c3b724a1c8771ef898587868c6040516107cd959493929190611a5b565b60405180910390a350630a85bd0160e11b98975050505050505050565b6005546001600160a01b03166108125760405162461bcd60e51b815260040161047f90611911565b6005546040516323b872dd60e01b81523060048201526001600160a01b03918216602482015260448101839052908316906323b872dd90606401600060405180830381600087803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b505050505050565b6005546001600160a01b03166108aa5760405162461bcd60e51b815260040161047f90611911565b600554604051631759616b60e11b81526001600160a01b0380881692632eb2c2d6926108e492309216908990899089908990600401611aec565b600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b505050505050505050565b61092561139c565b6003546001600160a01b031661097d5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a206e6f2070656e64696e67206d6967726174696f6e0000000000604482015260640161047f565b6004544210156109c85760405162461bcd60e51b81526020600482015260166024820152755661756c743a206e6f74206163746976652074696d6560501b604482015260640161047f565b600354600580546001600160a01b0319166001600160a01b0390921691821790556040519081527fef22b3a52fdd465982b8de27fba072dbd583d959b1f217d0a91e13aea89710b09060200160405180910390a1565b610a266113ed565b610a2e61139c565b6001600160a01b038116610a845760405162461bcd60e51b815260206004820152601f60248201527f5661756c743a20696e76616c6964206e65775661756c74206164647265737300604482015260640161047f565b6040518060400160405280826001600160a01b0316815260200160015442610aac9190611b61565b90528051600380546001600160a01b0319166001600160a01b03909216919091179055602001516004556001547fc9faf2971a53188d02d80249a3c7ff7f35cca53b3c700f25d94eabbdb5b2204b908290610b079042611b61565b604080516001600160a01b03909316835260208301919091520160405180910390a150565b6000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9491908101906119b8565b90506000846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bfe91908101906119b8565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c649190611b7a565b905060008511610cb65760405162461bcd60e51b815260206004820152601a60248201527f7472616e7366657245524332303a20616d6f756e742069732030000000000000604482015260640161047f565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0388169063dd62ed3e90604401602060405180830381865afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d27919061193d565b905085811015610d855760405162461bcd60e51b815260206004820152602360248201527f7472616e7366657245524332303a20616c6c6f77616e6365206e6f7420656e6f6044820152620eaced60eb1b606482015260840161047f565b6040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b038816906323b872dd906064016020604051808303816000875af1158015610dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfc9190611956565b50336001600160a01b0316876001600160a01b03167f96a015febdaad7f91cc988f4f1ef463e6d68057ebc6ab35ce9919034ffd2ed35888787878b604051610e48959493929190611b9d565b60405180910390a350505050505050565b6005546001600160a01b0316610e815760405162461bcd60e51b815260040161047f90611911565b6005546040805160008082526020820192839052926001600160a01b0316914791610eab9161199c565b60006040518083038185875af1925050503d8060008114610ee8576040519150601f19603f3d011682016040523d82523d6000602084013e610eed565b606091505b5050905080610f365760405162461bcd60e51b81526020600482015260156024820152741d1c985b9cd9995c915d1a195c8e8819985a5b1959605a1b604482015260640161047f565b50565b6001600160a01b038116610f995760405162461bcd60e51b815260206004820152602160248201527f4d50434d616e616765723a20696e76616c69642061646d696e206164647265736044820152607360f81b606482015260840161047f565b610fa16113ed565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600034116110135760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665724e6174697665546f6b656e3a2076616c7565206973203000604482015260640161047f565b336001600160a01b03167f1eb8967d9af68243151a80b28201971f9f8372a2e860d277866487724dfe2e65348360405161104e929190611be5565b60405180910390a250565b6000803390506000855167ffffffffffffffff81111561107b5761107b6114b8565b6040519080825280602002602001820160405280156110ae57816020015b60608152602001906001900390816110995790505b50905060005b865181101561117957826001600160a01b0316630e89341c8883815181106110de576110de611bfe565b60200260200101516040518263ffffffff1660e01b815260040161110491815260200190565b600060405180830381865afa158015611121573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261114991908101906119b8565b82828151811061115b5761115b611bfe565b6020026020010181905250808061117190611c14565b9150506110b4565b50866001600160a01b0316336001600160a01b03167f99cb878db172fb5b1d00aada0fd9cc2a5bb8a14c425cefde2acbe9d664a183c4888885896040516111c39493929190611c68565b60405180910390a35063bc197c8160e01b979650505050505050565b604080516001808252818301909252600091829190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050858260008151811061123b5761123b611bfe565b602002602001018181525050848160008151811061125b5761125b611bfe565b60200260200101818152505060006112768989858589611059565b90506001600160e01b0319811663bc197c8160e01b146112c85760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206d6167696360981b604482015260640161047f565b5063f23a6e6160e01b98975050505050505050565b600054604051636ea0aa0360e01b8152600481018390523360248201526001600160a01b0390911690636ea0aa0390604401602060405180830381865afa15801561132c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113509190611956565b610f365760405162461bcd60e51b815260206004820152601e60248201527f6f6e6c7920656e747279506f696e74206f722077616c6c65742073656c660000604482015260640161047f565b6005546001600160a01b0316156113eb5760405162461bcd60e51b815260206004820152601360248201527215985d5b1d0e881a5cc81858985b991bdb9959606a1b604482015260640161047f565b565b6002546001600160a01b031633146113eb5760405162461bcd60e51b815260206004820152601e60248201527f6f6e6c7920656e747279506f696e74206f722077616c6c65742073656c660000604482015260640161047f565b6001600160a01b0381168114610f3657600080fd5b60006020828403121561146e57600080fd5b813561147981611447565b9392505050565b60008060006060848603121561149557600080fd5b8335925060208401356114a781611447565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114f7576114f76114b8565b604052919050565b600067ffffffffffffffff821115611519576115196114b8565b50601f01601f191660200190565b600082601f83011261153857600080fd5b813561154b611546826114ff565b6114ce565b81815284602083860101111561156057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561159357600080fd5b843561159e81611447565b935060208501356115ae81611447565b925060408501359150606085013567ffffffffffffffff8111156115d157600080fd5b6115dd87828801611527565b91505092959194509250565b600080604083850312156115fc57600080fd5b823561160781611447565b946020939093013593505050565b60008083601f84011261162757600080fd5b50813567ffffffffffffffff81111561163f57600080fd5b6020830191508360208260051b850101111561165a57600080fd5b9250929050565b60008060008060006060868803121561167957600080fd5b853561168481611447565b9450602086013567ffffffffffffffff808211156116a157600080fd5b6116ad89838a01611615565b909650945060408801359150808211156116c657600080fd5b506116d388828901611615565b969995985093965092949392505050565b6000806000606084860312156116f957600080fd5b833561170481611447565b925060208401359150604084013567ffffffffffffffff81111561172757600080fd5b61173386828701611527565b9150509250925092565b60006020828403121561174f57600080fd5b813567ffffffffffffffff81111561176657600080fd5b61177284828501611527565b949350505050565b600082601f83011261178b57600080fd5b8135602067ffffffffffffffff8211156117a7576117a76114b8565b8160051b6117b68282016114ce565b92835284810182019282810190878511156117d057600080fd5b83870192505b848310156117ef578235825291830191908301906117d6565b979650505050505050565b600080600080600060a0868803121561181257600080fd5b853561181d81611447565b9450602086013561182d81611447565b9350604086013567ffffffffffffffff8082111561184a57600080fd5b61185689838a0161177a565b9450606088013591508082111561186c57600080fd5b61187889838a0161177a565b9350608088013591508082111561188e57600080fd5b5061189b88828901611527565b9150509295509295909350565b600080600080600060a086880312156118c057600080fd5b85356118cb81611447565b945060208601356118db81611447565b93506040860135925060608601359150608086013567ffffffffffffffff81111561190557600080fd5b61189b88828901611527565b60208082526012908201527115985d5b1d0e881b9bc81b995dd5985d5b1d60721b604082015260600190565b60006020828403121561194f57600080fd5b5051919050565b60006020828403121561196857600080fd5b8151801515811461147957600080fd5b60005b8381101561199357818101518382015260200161197b565b50506000910152565b600082516119ae818460208701611978565b9190910192915050565b6000602082840312156119ca57600080fd5b815167ffffffffffffffff8111156119e157600080fd5b8201601f810184136119f257600080fd5b8051611a00611546826114ff565b818152856020838501011115611a1557600080fd5b611a26826020830160208601611978565b95945050505050565b60008151808452611a47816020860160208601611978565b601f01601f19169290920160200192915050565b85815260a060208201526000611a7460a0830187611a2f565b8281036040840152611a868187611a2f565b90508281036060840152611a9a8186611a2f565b90508281036080840152611aae8185611a2f565b98975050505050505050565b81835260006001600160fb1b03831115611ad357600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0387811682528616602082015260a060408201819052600090611b199083018688611aba565b8281036060840152611b2c818587611aba565b8381036080909401939093525050600081526020019695505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611b7457611b74611b4b565b92915050565b600060208284031215611b8c57600080fd5b815160ff8116811461147957600080fd5b85815260a060208201526000611bb660a0830187611a2f565b8281036040840152611bc88187611a2f565b905060ff851660608401528281036080840152611aae8185611a2f565b8281526040602082015260006117726040830184611a2f565b634e487b7160e01b600052603260045260246000fd5b600060018201611c2657611c26611b4b565b5060010190565b600081518084526020808501945080840160005b83811015611c5d57815187529582019590820190600101611c41565b509495945050505050565b608081526000611c7b6080830187611c2d565b602083820381850152611c8e8288611c2d565b915083820360408501528186518084528284019150828160051b85010183890160005b83811015611cdf57601f19878403018552611ccd838351611a2f565b94860194925090850190600101611cb1565b50508681036060880152611cf38189611a2f565b9b9a505050505050505050505056fea26469706673582212202e022dff918f6603e27c0ec18e8d7ea96cc44c7f4aee53eac8809b6ec6717a3364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "ERC721"
      },
      "transferERC20(address,uint256,bytes)": {
        "notice": "This will allow public chain dapps to send tokens directly to the sodium chain"
      },
      "transferNativeToken(bytes)": {
        "notice": "native token bridge to"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3991,
        "contract": "contracts/bridge/Vault.sol:Vault",
        "label": "mpcManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMPCManager)10418"
      },
      {
        "astId": 3994,
        "contract": "contracts/bridge/Vault.sol:Vault",
        "label": "adminDelay",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3996,
        "contract": "contracts/bridge/Vault.sol:Vault",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4004,
        "contract": "contracts/bridge/Vault.sol:Vault",
        "label": "pendingNewVault",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PendingNewVault)4001_storage"
      },
      {
        "astId": 4006,
        "contract": "contracts/bridge/Vault.sol:Vault",
        "label": "newVault",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4010,
        "contract": "contracts/bridge/Vault.sol:Vault",
        "label": "nonceMap",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4016,
        "contract": "contracts/bridge/Vault.sol:Vault",
        "label": "balances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IMPCManager)10418": {
        "encoding": "inplace",
        "label": "contract IMPCManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PendingNewVault)4001_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PendingNewVault",
        "members": [
          {
            "astId": 3998,
            "contract": "contracts/bridge/Vault.sol:Vault",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4000,
            "contract": "contracts/bridge/Vault.sol:Vault",
            "label": "activeTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}