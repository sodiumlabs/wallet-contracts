{
  "address": "0xb5BC46dF04dEe31D219E7664122e29EEd9506b8b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "uniqueId",
              "type": "bytes4"
            },
            {
              "internalType": "uint64",
              "name": "expires",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct SessionManager.Session",
          "name": "session",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "storageKey",
          "type": "bytes4"
        }
      ],
      "name": "AddOrUpdateSession",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "handler",
          "type": "address"
        }
      ],
      "name": "ChangedFallbackHandler",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sessionOwner",
          "type": "address"
        }
      ],
      "name": "ChangedSafeSession",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "DisabledModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "EnabledModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ExecutionFromModuleFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ExecutionFromModuleSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeTokenReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "storageKey",
          "type": "bytes4"
        }
      ],
      "name": "RemovedSession",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ADD_SESSION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DELEGATE_AURH_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_RECOVER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_entryPoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "checkValidSodiumSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustee",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "disableModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "enableModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execTransactionFromModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execTransactionFromModuleReturnData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Enum.Operation",
              "name": "op",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "revertOnError",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Transaction[]",
          "name": "_txs",
          "type": "tuple[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeWithModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "safeSessionKey",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "recoverNonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct SecurityManager.Recover",
          "name": "_recover",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_authProof",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "enum Enum.Operation",
              "name": "op",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "revertOnError",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Transaction[]",
          "name": "_txs",
          "type": "tuple[]"
        }
      ],
      "name": "executeWithSodiumAuthRecover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sessionKey",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "sessionUniqueId",
              "type": "bytes4"
            },
            {
              "internalType": "uint64",
              "name": "sessionExpires",
              "type": "uint64"
            }
          ],
          "internalType": "struct SecurityManager.AddSession",
          "name": "_addSession",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_authProof",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "enum Enum.Operation",
              "name": "op",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "revertOnError",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Transaction[]",
          "name": "_txs",
          "type": "tuple[]"
        }
      ],
      "name": "executeWithSodiumAuthSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSingleton",
      "outputs": [
        {
          "internalType": "address",
          "name": "_imp",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "isModuleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isSessionOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "existing",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isSafe",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSodiumSingleton",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        }
      ],
      "name": "setFallbackHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISodiumAuth",
          "name": "_auth",
          "type": "address"
        }
      ],
      "name": "setSodiumNetworkAuth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUserOperationValidator",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "setUserOperationValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISodiumAuth",
          "name": "_sodiumAuth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallbackHandler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opValidator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Sodium",
          "name": "newSingleton",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sessionKey",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "sessionUniqueId",
              "type": "bytes4"
            },
            {
              "internalType": "uint64",
              "name": "sessionExpires",
              "type": "uint64"
            }
          ],
          "internalType": "struct SecurityManager.AddSession",
          "name": "_addSession",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_authProof",
          "type": "bytes"
        }
      ],
      "name": "validateAddSessionProof",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "safeSessionKey",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "recoverNonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct SecurityManager.Recover",
          "name": "_recover",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_authProof",
          "type": "bytes"
        }
      ],
      "name": "validateRecoverProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "missingAccountFunds",
          "type": "uint256"
        }
      ],
      "name": "validateUserOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdd91540928394d844eb964830139fff552728277314a801558d066336715d014",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2810023",
    "logsBloom": "0x
    "blockHash": "0xd001fb8d8a1b79468ac1afce7d0d306a1880a84260730c8542282eaa088e266c",
    "transactionHash": "0xdd91540928394d844eb964830139fff552728277314a801558d066336715d014",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "2810023",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
  ],
  "numDeployments": 1,
  "solcInputHash": "09a59c7c673a10f149d124c86e476dd0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"uniqueId\",\"type\":\"bytes4\"},{\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct SessionManager.Session\",\"name\":\"session\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"storageKey\",\"type\":\"bytes4\"}],\"name\":\"AddOrUpdateSession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sessionOwner\",\"type\":\"address\"}],\"name\":\"ChangedSafeSession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeTokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"storageKey\",\"type\":\"bytes4\"}],\"name\":\"RemovedSession\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ADD_SESSION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DELEGATE_AURH_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RECOVER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_entryPoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkValidSodiumSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Enum.Operation\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revertOnError\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction[]\",\"name\":\"_txs\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeWithModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"safeSessionKey\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recoverNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct SecurityManager.Recover\",\"name\":\"_recover\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_authProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum Enum.Operation\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revertOnError\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction[]\",\"name\":\"_txs\",\"type\":\"tuple[]\"}],\"name\":\"executeWithSodiumAuthRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sessionKey\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sessionUniqueId\",\"type\":\"bytes4\"},{\"internalType\":\"uint64\",\"name\":\"sessionExpires\",\"type\":\"uint64\"}],\"internalType\":\"struct SecurityManager.AddSession\",\"name\":\"_addSession\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_authProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum Enum.Operation\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revertOnError\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction[]\",\"name\":\"_txs\",\"type\":\"tuple[]\"}],\"name\":\"executeWithSodiumAuthSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSingleton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_imp\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isSessionOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"existing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSafe\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSodiumSingleton\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISodiumAuth\",\"name\":\"_auth\",\"type\":\"address\"}],\"name\":\"setSodiumNetworkAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUserOperationValidator\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"setUserOperationValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISodiumAuth\",\"name\":\"_sodiumAuth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Sodium\",\"name\":\"newSingleton\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sessionKey\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sessionUniqueId\",\"type\":\"bytes4\"},{\"internalType\":\"uint64\",\"name\":\"sessionExpires\",\"type\":\"uint64\"}],\"internalType\":\"struct SecurityManager.AddSession\",\"name\":\"_addSession\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_authProof\",\"type\":\"bytes\"}],\"name\":\"validateAddSessionProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"safeSessionKey\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recoverNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct SecurityManager.Recover\",\"name\":\"_recover\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_authProof\",\"type\":\"bytes\"}],\"name\":\"validateRecoverProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"disableModule(address)\":{\"details\":\"Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\"}},\"enableModule(address)\":{\"details\":\"Allows to add a module to the whitelist.      This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations and return data\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}},\"execute((uint8,bool,uint256,address,uint256,bytes)[])\":{\"details\":\"Relayers must ensure that the gasLimit specified for each transaction      is acceptable to them. A user could specify large enough that it could      consume all the gas available.\",\"params\":{\"_txs\":\"Transactions to process\"}},\"getChainId()\":{\"details\":\"Returns the chain id used by this contract.\"},\"getSingleton()\":{\"returns\":{\"_imp\":\"The address of the current Wallet implementation\"}},\"isModuleEnabled(address)\":{\"details\":\"Returns if an module is enabled\",\"returns\":{\"_0\":\"True if the module is enabled\"}},\"setFallbackHandler(address)\":{\"details\":\"Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.\",\"params\":{\"handler\":\"contract to handle fallbacks calls.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disableModule(address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"entryPoint()\":{\"notice\":\"return the entryPoint used by this account. subclass should return the current entryPoint used by this account.\"},\"execute((uint8,bool,uint256,address,uint256,bytes)[])\":{\"notice\":\"Allow eip-4337 entryPoint or wallet self to execute an action\"},\"getNonce()\":{\"notice\":\"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\"},\"getSingleton()\":{\"notice\":\"Returns the Wallet implementation\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sodium.sol\":\"Sodium\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Sodium.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/SessionManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/SecurityManager.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/EtherPaymentFallback.sol\\\";\\nimport \\\"./interfaces/IERC20Paymaster.sol\\\";\\nimport \\\"./interfaces/IModule.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./eip4337/core/BaseAccount.sol\\\";\\nimport \\\"./eip4337/interfaces/IEntryPoint.sol\\\";\\nimport \\\"./common/Enum.sol\\\";\\nimport \\\"./chain/ISodiumAuth.sol\\\";\\nimport \\\"./securityengine/IUserOperationValidator.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nstruct Transaction {\\n    Enum.Operation op; // Performs delegatecall\\n    bool revertOnError; // Reverts transaction bundle if tx fails\\n    uint256 gasLimit; // Maximum gas to be forwarded\\n    address target; // Address of the contract to call\\n    uint256 value; // Amount of ETH to pass with the call\\n    bytes data; // calldata to pass\\n}\\n\\ncontract Sodium is\\n    Singleton,\\n    ModuleManager,\\n    SessionManager,\\n    FallbackManager,\\n    SecurityManager,\\n    BaseAccount,\\n    EtherPaymentFallback,\\n    ISignatureValidatorConstants\\n{\\n    string public constant VERSION = \\\"0.0.1\\\";\\n    bytes32 public constant _DELEGATE_AURH_TYPEHASH =\\n        keccak256(\\\"Delegate(address trustee,uint64 delegateExpires)\\\");\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    bool private initialized;\\n    address public immutable _entryPoint;\\n\\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\\n    constructor(IEntryPoint entryPoint_) {\\n        _entryPoint = address(entryPoint_);\\n    }\\n\\n    function setup(\\n        ISodiumAuth _sodiumAuth,\\n        address _fallbackHandler,\\n        address _opValidator,\\n        bytes32 _salt\\n    ) public {\\n        require(!initialized, \\\"Already initialized\\\");\\n        require(_fallbackHandler != address(0), \\\"Required fallback handler\\\");\\n        initialized = true;\\n        internalSetFallbackHandler(_fallbackHandler);\\n        internalSetSodiumNetworkAuth(_sodiumAuth);\\n        internalWriteUserOperationValidator(_opValidator);\\n        salt = _salt;\\n    }\\n\\n    function entryPoint() public view override returns (IEntryPoint) {\\n        return IEntryPoint(_entryPoint);\\n    }\\n\\n    function upgradeTo(Sodium newSingleton) external authorized {\\n        require(newSingleton.isSodiumSingleton(), \\\"Not a Sodium singleton\\\");\\n        _setSingleton(address(newSingleton));\\n    }\\n\\n    function _approvePaymasterToken(UserOperation calldata userOp) private {\\n        bytes calldata paymasterAndData = userOp.paymasterAndData;\\n        if (paymasterAndData.length != 20 + 4 + 20) {\\n            return;\\n        } else if (bytes4(paymasterAndData[20:24]) == bytes4(0x095ea7b3)) {\\n            IERC20Paymaster paymaster = IERC20Paymaster(\\n                address(bytes20(paymasterAndData[:20]))\\n            );\\n\\n            IERC20Metadata payToken = IERC20Metadata(\\n                address(bytes20(paymasterAndData[24:]))\\n            );\\n\\n            (uint256 miniAllowance, uint256 suggestApproveValue) = paymaster\\n                .getTokenAllowanceCast(payToken);\\n\\n            if (\\n                payToken.allowance(address(this), address(paymaster)) <\\n                miniAllowance\\n            ) {\\n                payToken.approve(address(paymaster), suggestApproveValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external virtual override returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        _validateNonce(userOp.nonce);\\n        _payPrefund(missingAccountFunds);\\n        _approvePaymasterToken(userOp);\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal override returns (uint256 validationData) {\\n        if (userOp.callData.length < 4 || userOp.signature.length < 22) {\\n            return 1;\\n        }\\n        bytes4 methodId = bytes4(userOp.callData[0:4]);\\n        bytes32 ethHash = ECDSA.toEthSignedMessageHash(userOpHash);\\n\\n        address signer;\\n        bool valid;\\n        (valid, signer, ) = checkValidSodiumSignature(\\n            ethHash,\\n            userOp.signature\\n        );\\n\\n        if (!valid) {\\n            return 1;\\n        }\\n\\n        if (methodId == this.executeWithSodiumAuthRecover.selector) {\\n            address sessionKey;\\n            bytes memory addressBytes = userOp.callData[16:36];\\n            assembly {\\n                sessionKey := mload(add(addressBytes, 20))\\n            }\\n            return sessionKey == signer ? 0 : 1;\\n        }\\n\\n        if (methodId == this.executeWithSodiumAuthSession.selector) {\\n            address sessionKey;\\n            bytes memory addressBytes = userOp.callData[16:36];\\n            assembly {\\n                sessionKey := mload(add(addressBytes, 20))\\n            }\\n\\n            bool isSafe = _safeSession.owner == address(0);\\n            IUserOperationValidator validator = internalReadUserOperationValidator();\\n            if (!isSafe) {\\n                // Use the on-chain security center to verify that the operation is secure.\\n                // Allow session access if safe\\n                isSafe = validator.validateUserOp(userOp) < 2;\\n            }\\n            return sessionKey == signer && isSafe ? 0 : 1;\\n        }\\n\\n        if (methodId == this.executeWithModule.selector) {\\n            address module;\\n            bytes memory addressBytes = userOp.callData[16:36];\\n            assembly {\\n                module := mload(add(addressBytes, 20))\\n            }\\n\\n            // if no enabled modules\\n            if (!isModuleEnabled(module)) {\\n                return 1;\\n            }\\n\\n            return IModule(module).validateSignature(userOp, userOpHash);\\n        }\\n\\n        if (methodId == this.execute.selector) {\\n            (bool existing, bool isSafe) = isSessionOwner(signer);\\n            IUserOperationValidator validator = internalReadUserOperationValidator();\\n            if (!isSafe) {\\n                // Use the on-chain security center to verify that the operation is secure.\\n                // Allow session access if safe\\n                isSafe = validator.validateUserOp(userOp) < 2;\\n            }\\n            return existing && isSafe ? 0 : 1;\\n        }\\n\\n        revert(\\\"invalid methodId\\\");\\n    }\\n\\n    /**\\n     * @notice Allow eip-4337 entryPoint or wallet self to execute an action\\n     * @dev Relayers must ensure that the gasLimit specified for each transaction\\n     *      is acceptable to them. A user could specify large enough that it could\\n     *      consume all the gas available.\\n     * @param _txs Transactions to process\\n     */\\n    function execute(Transaction[] memory _txs) external {\\n        // only allow eip-4337 entryPoint or wallet self to execute an action\\n        _requireFromEntryPoint();\\n        // Execute the transactions\\n        _execute(_txs);\\n    }\\n\\n    function executeWithSodiumAuthRecover(\\n        Recover calldata _recover,\\n        bytes calldata _authProof,\\n        Transaction[] calldata _txs\\n    ) external {\\n        // only allow eip-4337 entryPoint or wallet self to execute an action\\n        _requireFromEntryPoint();\\n\\n        // Validate the sodium auth proof\\n        validateRecoverProof(_recover, _authProof);\\n\\n        // Setup the safe session\\n        internalAddSafeSession(_recover.safeSessionKey);\\n\\n        // Execute the transactions\\n        _execute(_txs);\\n    }\\n\\n    // Support for calling modules from an account so that the module can use the account to pay gas\\n    function executeWithModule(\\n        address _module,\\n        uint256 _value,\\n        bytes memory _data\\n    ) external {\\n        // only allow eip-4337 entryPoint or wallet self to execute an action\\n        _requireFromEntryPoint();\\n        bool success;\\n        bytes memory result;\\n        (success, result) = _module.call{value: _value, gas: gasleft()}(_data);\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 0x20), mload(result))\\n            }\\n        }\\n    }\\n\\n    function executeWithSodiumAuthSession(\\n        AddSession calldata _addSession,\\n        bytes calldata _authProof,\\n        Transaction[] calldata _txs\\n    ) external {\\n        // only allow eip-4337 entryPoint or wallet self to execute an action\\n        _requireFromEntryPoint();\\n\\n        // Validate the sodium auth proof\\n        validateAddSessionProof(_addSession, _authProof);\\n\\n        Session memory session = Session({\\n            owner: _addSession.sessionKey,\\n            uniqueId: _addSession.sessionUniqueId,\\n            expires: _addSession.sessionExpires\\n        });\\n\\n        // Setup the session\\n        internalAddOrUpdateSession(session);\\n\\n        // Execute the transactions\\n        _execute(_txs);\\n    }\\n\\n    /**\\n     * @notice Executes a list of transactions\\n     * @param _txs  Transactions to execute\\n     */\\n    function _execute(Transaction[] memory _txs) private {\\n        // Execute transaction\\n        for (uint256 i = 0; i < _txs.length; i++) {\\n            Transaction memory transaction = _txs[i];\\n            bool success;\\n            bytes memory result;\\n            require(\\n                gasleft() >= transaction.gasLimit,\\n                \\\"Sodium: NOT_ENOUGH_GAS\\\"\\n            );\\n            if (transaction.op == Enum.Operation.DelegateCall) {\\n                (success, result) = transaction.target.delegatecall{\\n                    gas: transaction.gasLimit == 0\\n                        ? gasleft()\\n                        : transaction.gasLimit\\n                }(transaction.data);\\n            } else {\\n                (success, result) = transaction.target.call{\\n                    value: transaction.value,\\n                    gas: transaction.gasLimit == 0\\n                        ? gasleft()\\n                        : transaction.gasLimit\\n                }(transaction.data);\\n            }\\n            if (!success && transaction.revertOnError) {\\n                assembly {\\n                    revert(add(result, 0x20), mload(result))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the chain id used by this contract.\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this)\\n            );\\n    }\\n\\n    function checkValidSodiumSignature(\\n        bytes32 _hash,\\n        bytes calldata _signature\\n    ) public view returns (bool valid, address signer, address trustee) {\\n        bytes1 sigType = bytes1(_signature[:1]);\\n        // {0x01}{signer}{signature}\\n        if (sigType == 0x01) {\\n            bytes memory addressBytes = _signature[1:21];\\n            bytes memory signatureBytes = _signature[21:];\\n            assembly {\\n                signer := mload(add(addressBytes, 20))\\n            }\\n            valid = SignatureChecker.isValidSignatureNow(\\n                signer,\\n                _hash,\\n                signatureBytes\\n            );\\n        // {0x02}{trustee}{signer}{delegateExpires}{signature}{delegateproof}\\n        } else if (sigType == 0x02) {\\n            uint64 delegateExpires;\\n            bytes memory signature;\\n            bytes memory delegateproof;\\n            (trustee, signer, delegateExpires, signature, delegateproof) = abi\\n                .decode(\\n                    _signature[1:],\\n                    (address, address, uint64, bytes, bytes)\\n                );\\n            if (delegateExpires < block.timestamp) {\\n                valid = false;\\n                return (valid, signer, trustee);\\n            }\\n            bytes32 dataHash = _hashTypedData(\\n                keccak256(\\n                    abi.encode(\\n                        _DELEGATE_AURH_TYPEHASH,\\n                        trustee,\\n                        delegateExpires\\n                    )\\n                )\\n            );\\n            bool delegateValid = SignatureChecker.isValidSignatureNow(\\n                signer,\\n                dataHash,\\n                delegateproof\\n            );\\n            bool trusteeValid = SignatureChecker.isValidSignatureNow(\\n                trustee,\\n                _hash,\\n                signature\\n            );\\n            valid = delegateValid && trusteeValid;\\n        } else {\\n            valid = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe055f47082b0f69047e96a5066ed74219eca86cbd4fd2a80f724eef822a51d4a\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\ncontract Executor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5fb71b98bb583620d71f6ed9704e8d6a3179663fed1cea0eded02bcaa1ee8185\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    function internalSetFallbackHandler(address handler) internal {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /// @dev Allows to add a contract to handle fallback calls.\\n    ///      Only fallback calls without value and with data will be forwarded.\\n    ///      This can only be done via a Safe transaction.\\n    /// @param handler contract to handle fallbacks calls.\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1be9f0f3e80a78134c2e3a026c6a14759785bd35d135e87a4a025aeb6742791f\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\ncontract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    mapping(address => bool) internal modules;\\n\\n    /// @dev Allows to add a module to the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Enables the module `module` for the Safe.\\n    /// @param module Module to be whitelisted.\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(!modules[module], \\\"SDMM101\\\");\\n        modules[module] = true;\\n        emit EnabledModule(module);\\n    }\\n\\n    /// @dev Allows to remove a module from the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Disables the module `module` for the Safe.\\n    /// @param module Module to be removed.\\n    function disableModule(\\n        address module\\n    ) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(modules[module], \\\"SDMM101\\\");\\n        modules[module] = false;\\n        emit DisabledModule(module);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(\\n            modules[msg.sender],\\n            \\\"SDMM104\\\"\\n        );\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, gasleft());\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return modules[module];\\n    }\\n}\\n\",\"keccak256\":\"0x0bc22bafe1a8e443ba5df10b14f1d9ade5babe21381fa90304321d965c40d0e3\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/SecurityManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../chain/ISodiumAuth.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../securityengine/IUserOperationValidator.sol\\\";\\n\\n///\\ncontract SecurityManager is SelfAuthorized {\\n    // NETWORK_AUTH_KEY = keccak256(\\\"org.sodium.base.security.network.auth\\\");\\n    bytes32 private constant NETWORK_AUTH_KEY =\\n        bytes32(\\n            0xe5230392f47deb1a37e1df3b9ee1d04b8a457138ebb1a61edeb61872e6c42322\\n        );\\n\\n    // Here we do not restrict the chainId, this is to allow users to authenticate only once for all chains\\n    // keccak256(\\n    //     \\\"EIP712Domain(address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant SECURITY_DOMAIN_SEPARATOR_TYPEHASH =\\n        0x035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d4749;\\n\\n    // RECOVER_NONCE_KEY = keccak256(\\\"org.sodium.base.security.recover_nonce\\\");\\n    bytes32 private constant RECOVER_NONCE_KEY =\\n        bytes32(\\n            0xebd64025eccab0d68ffd8dbdf22f162b40c6e98dc2bf27a2eabea8004135b99f\\n        );\\n\\n    // ADD_SESSION_NONCE_KEY = keccak256(\\\"org.sodium.base.security.add_session_nonce\\\");\\n    bytes32 private constant ADD_SESSION_NONCE_KEY =\\n        bytes32(\\n            0xab2fb4a4f5c6f5950284b1595fdee071b14bb957fc11893b02ed7ba798528306\\n        );\\n\\n    // USER_OP_VALIDATOR_KEY = keccak256(\\\"org.sodium.base.security.user_op_validator\\\")\\n    bytes32 private constant USER_OP_VALIDATOR_KEY =\\n        bytes32(\\n            0x26af6f34783f6c05ad199b86190c89039b6a27ab2bac01a0ef363037be08c64e\\n        );\\n\\n    // session manager safe session\\n    // new zk root must be committed for each recovery\\n    struct Recover {\\n        address safeSessionKey;\\n        uint256 recoverNonce;\\n    }\\n\\n    // session manager\\n    struct AddSession {\\n        address sessionKey;\\n        bytes4 sessionUniqueId;\\n        uint64 sessionExpires;\\n    }\\n\\n    bytes32 public constant _RECOVER_TYPEHASH =\\n        keccak256(\\\"Recover(address safeSessionKey,uint256 recoverNonce)\\\");\\n\\n    bytes32 public constant _ADD_SESSION_TYPEHASH =\\n        keccak256(\\n            \\\"AddSession(address sessionKey,bytes4 sessionUniqueId,uint64 sessionExpires)\\\"\\n        );\\n\\n    // security engine\\n    function internalWriteUserOperationValidator(address _validator) internal {\\n        require(_validator != address(0), \\\"SMOP01\\\");\\n        bytes32 slot = USER_OP_VALIDATOR_KEY;\\n        assembly {\\n            sstore(slot, _validator)\\n        }\\n    }\\n\\n    function internalReadUserOperationValidator()\\n        internal\\n        view\\n        returns (IUserOperationValidator)\\n    {\\n        bytes32 slot = USER_OP_VALIDATOR_KEY;\\n        IUserOperationValidator _validator;\\n        assembly {\\n            _validator := sload(slot)\\n        }\\n        return _validator;\\n    }\\n\\n    function setUserOperationValidator(\\n        IUserOperationValidator _validator\\n    ) public authorized {\\n        internalWriteUserOperationValidator(address(_validator));\\n    }\\n\\n    function validateAddSessionProof(\\n        AddSession calldata _addSession,\\n        bytes calldata _authProof\\n    ) public view {\\n        require(_addSession.sessionExpires > block.timestamp, \\\"SMAS05\\\");\\n        bytes32 dataHash = keccak256(\\n            abi.encode(_ADD_SESSION_TYPEHASH, _addSession)\\n        );\\n        bytes32 messageHash = _hashTypedData(dataHash);\\n        ISodiumAuth _auth = _readSodiumNetworkAuth();\\n        _auth.verifyProof(messageHash, _authProof);\\n    }\\n\\n    /// use sodium auth to recover\\n    function _writeRecoverNonce(uint256 _recoverNonce) private {\\n        bytes32 slot = RECOVER_NONCE_KEY;\\n        assembly {\\n            sstore(slot, _recoverNonce)\\n        }\\n    }\\n\\n    function _readRecoverNonce() private view returns (uint256) {\\n        bytes32 slot = RECOVER_NONCE_KEY;\\n        uint256 recoverNonce;\\n        assembly {\\n            recoverNonce := sload(slot)\\n        }\\n        return recoverNonce;\\n    }\\n\\n    function validateRecoverProof(\\n        Recover calldata _recover,\\n        bytes calldata _authProof\\n    ) public {\\n        require(_recover.recoverNonce >= _readRecoverNonce(), \\\"SMR01\\\");\\n        bytes32 dataHash = keccak256(abi.encode(_RECOVER_TYPEHASH, _recover));\\n        bytes32 messageHash = _hashTypedData(dataHash);\\n        ISodiumAuth _auth = _readSodiumNetworkAuth();\\n        require(_auth.verifyProof(messageHash, _authProof), \\\"SMR03\\\");\\n        _writeRecoverNonce(_recover.recoverNonce + 1);\\n    }\\n\\n    /// ***** auth *****\\n    function _writeSodiumNetworkAuth(address _auth) private {\\n        bytes32 slot = NETWORK_AUTH_KEY;\\n        assembly {\\n            sstore(slot, _auth)\\n        }\\n    }\\n\\n    function _readSodiumNetworkAuth() internal view returns (ISodiumAuth) {\\n        bytes32 slot = NETWORK_AUTH_KEY;\\n        ISodiumAuth _auth;\\n        assembly {\\n            _auth := sload(slot)\\n        }\\n        return _auth;\\n    }\\n\\n    function internalSetSodiumNetworkAuth(ISodiumAuth _auth) internal {\\n        require(address(_auth) != address(0), \\\"SM04\\\");\\n        _writeSodiumNetworkAuth(address(_auth));\\n    }\\n\\n    function setSodiumNetworkAuth(ISodiumAuth _auth) public authorized {\\n        internalSetSodiumNetworkAuth(_auth);\\n    }\\n\\n    /// EIP712\\n    function _getDomainSeparator() internal view returns (bytes32) {\\n        return keccak256(abi.encode(SECURITY_DOMAIN_SEPARATOR_TYPEHASH, address(this)));\\n    }\\n\\n    /// @notice Creates an EIP-712 typed data hash\\n    function _hashTypedData(bytes32 dataHash) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _getDomainSeparator(), dataHash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe8e30302f9a59fbf657970b621d0a856496a51f221b31fff6a35d4f7ab58056f\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/SessionManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\ncontract SessionManager is SelfAuthorized {\\n    event AddOrUpdateSession(Session session, bytes4 storageKey);\\n    event ChangedSafeSession(address sessionOwner);\\n    event RemovedSession(bytes4 storageKey);\\n\\n    struct Session {\\n        address owner;\\n        bytes4 uniqueId;\\n        uint64 expires;\\n    }\\n\\n    // uniqueId => session\\n    mapping(bytes4 => Session) internal _sessions;\\n    mapping(address => bytes4) internal _ownerToUniqueId;\\n\\n    // safe session\\n    Session internal _safeSession;\\n    bytes32 public salt;\\n\\n    function internalAddOrUpdateSession(Session memory session) internal {\\n        require(\\n            session.owner != address(0),\\n            \\\"session owner cannot be zero address\\\"\\n        );\\n        require(\\n            session.expires > 0,\\n            \\\"session expires must be greater than zero\\\"\\n        );\\n        Session memory oldSession = _sessions[session.uniqueId];\\n        if (oldSession.owner != address(0)) {\\n            delete _ownerToUniqueId[oldSession.owner];\\n        }\\n        _sessions[session.uniqueId] = session;\\n        _ownerToUniqueId[session.owner] = session.uniqueId;\\n        emit AddOrUpdateSession(session, session.uniqueId);\\n    }\\n\\n    function internalAddSafeSession(address sessionOwner) internal {\\n        // 0xb9d46422 = bytes4(keccak256(\\\"org.sodium.base.session.safe\\\"))\\n        Session memory session = Session(sessionOwner, bytes4(0xb9d46422), 0);\\n        _safeSession = session;\\n        emit ChangedSafeSession(sessionOwner);\\n    }\\n\\n    function isSessionOwner(\\n        address owner\\n    ) public view returns (bool existing, bool isSafe) {\\n        if (owner == address(0)) {\\n            return (false, false);\\n        }\\n\\n        if (keccak256(abi.encodePacked(owner)) == salt) {\\n            return (true, true);\\n        }\\n\\n        bool safeExisting = _safeSession.owner != address(0);\\n\\n        if (owner == _safeSession.owner) {\\n            return (true, true);\\n        }\\n\\n        bytes4 uniqueId = _ownerToUniqueId[owner];\\n        Session memory session = _sessions[uniqueId];\\n        if (session.owner == address(0)) {\\n            return (false, false);\\n        }\\n\\n        // check expiration\\n        if (session.expires > 0 && session.expires < block.timestamp) {\\n            return (false, false);\\n        }\\n\\n        // \\u5982\\u679c\\u7528\\u6237\\u4e0d\\u5b58\\u5728\\u5b89\\u5168\\u7684\\u4f1a\\u8bdd.\\n        // \\u5219\\u4e0d\\u68c0\\u67e5session safeExpires\\u662f\\u5426\\u5b89\\u5168.\\n        return (true, !safeExisting);\\n    }\\n}\\n\",\"keccak256\":\"0xb654285f83332dd267b83711c2751b7705a94bfb4148eaded76bacbaa443d25a\",\"license\":\"LGPL-3.0-only\"},\"contracts/chain/ISodiumAuth.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ISodiumAuth {\\n    function verifyProof(\\n        bytes32 messageHash,\\n        bytes calldata proof\\n    ) external view returns (bool currentOperators);\\n}\\n\",\"keccak256\":\"0xc011685d2eab70d426dccae66c0bd18b8104f03d04a4bc18bb1ebbcf42fdc516\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x8363e4ce0e8b127da8bcb157cee77b691885ceb05de77ec85dc917ef79587084\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/EtherPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract EtherPaymentFallback {\\n    event NativeTokenReceived(address indexed sender, uint256 value);\\n\\n    /// @dev Fallback function accepts Ether transactions.\\n    receive() external payable {\\n        emit NativeTokenReceived(msg.sender, msg.value);\\n    }\\n}\",\"keccak256\":\"0x332fdf4f747e35befb5b4a19a595e6c5f87554e6b7c899e5d609bc2b9b7a1f2e\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SelfAuthorized - authorizes current contract to perform actions\\ncontract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0984e24e8eba011b2650a912bf646e86e8c4e9ff63b47d1f37b450774eeeedc0\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./SelfAuthorized.sol\\\";\\n\\ncontract Singleton is SelfAuthorized {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    // @deprecated\\n    address private _singleton;\\n\\n    /**\\n     * @notice Updates the Wallet implementation\\n     * @param _imp New implementation address\\n     * @dev The wallet implementation is stored on the storage slot\\n     *   defined by the address of the wallet itself\\n     *   WARNING updating this value may break the wallet and users\\n     *   must be confident that the new implementation is safe.\\n     */\\n    function _setSingleton(address _imp) internal {\\n        assembly {\\n            sstore(address(), _imp)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the Wallet implementation\\n     * @return _imp The address of the current Wallet implementation\\n     */\\n    function getSingleton() external view returns (address _imp) {\\n        assembly {\\n            _imp := sload(address())\\n        }\\n    }\\n\\n    function isSodiumSingleton() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1f2a863d0af458b35b64c6b64919a27e44f7db20cc10c1c55bdf1a64c1d9158b\",\"license\":\"LGPL-3.0-only\"},\"contracts/eip4337/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-empty-blocks */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\n * specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * Return the account nonce.\\n     * This method returns the next sequential nonce.\\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\n     */\\n    function getNonce() public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), 0);\\n    }\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external override virtual returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        _validateNonce(userOp.nonce);\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\n    internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * Validate the nonce of the UserOperation.\\n     * This method may validate the nonce requirement of this account.\\n     * e.g.\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\n     *      `require(nonce < type(uint64).max)`\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\n     *      `require(nonce & type(uint64).max == 0)`\\n     *\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\n     * action is needed by the account itself.\\n     *\\n     * @param nonce to validate\\n     *\\n     * solhint-disable-next-line no-empty-blocks\\n     */\\n    function _validateNonce(uint256 nonce) internal view virtual {\\n    }\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5eb3253b32fd8ba8ae7b9d83da8e9924254a4d3d17a8772b41280e8572974b3c\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"contracts/eip4337/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n * @param nonce unique value the sender uses to verify it is not a replay.\\n * @param initCode if set, the account contract will be created by this constructor/\\n * @param callData the method call to execute on this account.\\n * @param callGasLimit the gas limit passed to the callData method call.\\n * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n * @param maxFeePerGas same as EIP-1559 gas parameter.\\n * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct UserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    uint256 callGasLimit;\\n    uint256 verificationGasLimit;\\n    uint256 preVerificationGas;\\n    uint256 maxFeePerGas;\\n    uint256 maxPriorityFeePerGas;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n    function getSender(\\n        UserOperation calldata userOp\\n    ) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {\\n            data := calldataload(userOp)\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(\\n        UserOperation calldata userOp\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            uint256 maxFeePerGas = userOp.maxFeePerGas;\\n            uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n            if (maxFeePerGas == maxPriorityFeePerGas) {\\n                //legacy mode (for networks that don't support basefee opcode)\\n                return maxFeePerGas;\\n            }\\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n        }\\n    }\\n\\n    function pack(\\n        UserOperation calldata userOp\\n    ) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return\\n            abi.encode(\\n                sender,\\n                nonce,\\n                hashInitCode,\\n                hashCallData,\\n                callGasLimit,\\n                verificationGasLimit,\\n                preVerificationGas,\\n                maxFeePerGas,\\n                maxPriorityFeePerGas,\\n                hashPaymasterAndData\\n            );\\n    }\\n\\n    function hash(\\n        UserOperation calldata userOp\\n    ) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x2429f5cc546bdee08c7e63858d0dda8491eaa3ab5194df884dc948c1154d2834\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC20Paymaster.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IERC20Paymaster {\\n    /**\\n     * return amount of tokens\\n     */\\n    function getTokenAllowanceCast(\\n        IERC20Metadata token\\n    ) external view returns (uint256 tokenInput, uint256 suggestApproveValue);\\n}\\n\",\"keccak256\":\"0x4b9ebc19528c5ea0d11ba300f9923c4891e06f7b7b99184841224c2b2b3eb3ad\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModule.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {UserOperation} from \\\"../eip4337/interfaces/UserOperation.sol\\\";\\n\\n// interface for modules to verify singatures signed over userOpHash\\ninterface IModule {\\n    /**\\n     * @dev standard validateSignature for modules to validate and mark userOpHash as seen\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @return sigValidationResult sigAuthorizer to be passed back to trusting Account, aligns with validationData\\n     */\\n    function validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) external returns (uint256 sigValidationResult);\\n}\\n\",\"keccak256\":\"0x156eaace8be14443b140e27069388f40dcaaa5284551c08d43b4248d22324210\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _data Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(\\n        bytes calldata _data,\\n        bytes calldata _signature\\n    ) public view virtual returns (bytes4);\\n\\n    // /**\\n    //  * @dev Should return whether the signature provided is valid for the provided data\\n    //  * @param _dataHash Arbitrary length data signed on the behalf of address(this)\\n    //  * @param _signature Signature byte array associated with _data\\n    //  *\\n    //  * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n    //  * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    //  * MUST allow external calls\\n    //  */\\n    // function checkValidSodiumSignature(\\n    //     bytes32 _dataHash,\\n    //     bytes calldata _signature\\n    // ) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x5c6c0421aaaa680c2c53295639b2dca44d7095bb33b6770873729e69633c9a7e\",\"license\":\"LGPL-3.0-only\"},\"contracts/securityengine/IUserOperationValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../eip4337/interfaces/UserOperation.sol\\\";\\n\\ninterface IUserOperationValidator {\\n    /**\\n     * Validate UserOperation from EIP-4337\\n     * @param userOp EIP4337 UserOperation\\n     * @return validationData\\n     * Indicates that there is no physical loss of the user's assets, similar to swap, bridge\\n     * 0 => safe\\n     *\\n     * Indicates that the calling dapp is authenticated.\\n     * 1 => medium security\\n     *\\n     * Indicates that the calling contract is not authenticated\\n     * 2 => nosafe\\n     */\\n    function validateUserOp(\\n        UserOperation calldata userOp\\n    ) external view returns (uint8 validationData);\\n}\\n\",\"keccak256\":\"0x6d520241a00d09f8e7a23692a9ba4efcf4a1b1bcacdda6d65a68851157e6b093\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200326a3803806200326a833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b6080516131c1620000a96000396000818161051b015281816105650152818161116e01526114b001526131c16000f3fe6080604052600436106101dc5760003560e01c8063a95f524611610102578063cb103d7011610095578063f08a032311610064578063f08a0323146106a1578063f3a961ca146106c1578063f698da25146106e1578063ffa1ad74146106f657610218565b8063cb103d7014610638578063d087d2881461064c578063d3874edf14610661578063eb7617181461068157610218565b8063b6d5a063116100d1578063b6d5a06314610587578063b964f878146105ce578063bfa0b13314610602578063c300981e1461061857610218565b8063a95f5246146104b8578063adde2646146104d8578063b0d691fe1461050c578063b3080c241461055357610218565b80633a871cdd1161017a578063610b592511610149578063610b592514610444578063861067261461046457806391ca23d914610484578063a71d052b146104a457610218565b80633a871cdd1461039f578063468721a7146103bf5780634b574a02146103df5780635229073f1461041657610218565b80632d9ad53d116101b65780632d9ad53d146102e05780633408e4701461032e5780633659cfe61461034b578063378cf8041461036b57610218565b80630d192f8d1461027e57806328f8aa4d146102a05780632906737d146102c057610218565b366102185760405134815233907f9820dd13494dd7d9f03807aa0bb724fe8266855b5ac4db99848a199904f8074b9060200160405180910390a2005b34801561022457600080fd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d580548061024f57005b36600080373360601b365260008060143601600080855af190503d6000803e80610278573d6000fd5b503d6000f35b34801561028a57600080fd5b5061029e6102993660046125fd565b610734565b005b3480156102ac57600080fd5b5061029e6102bb366004612690565b610775565b3480156102cc57600080fd5b5061029e6102db366004612718565b61080f565b3480156102ec57600080fd5b506103196102fb366004612769565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b34801561033a57600080fd5b50465b604051908152602001610325565b34801561035757600080fd5b5061029e610366366004612769565b610902565b34801561037757600080fd5b5061033d7fdb53bc3f8ea86d0def94644136fcf091e6d7df8e8b19de81f3850704cf35d46881565b3480156103ab57600080fd5b5061033d6103ba366004612786565b6109bc565b3480156103cb57600080fd5b506103196103da3660046128c5565b6109eb565b3480156103eb57600080fd5b506103ff6103fa366004612769565b610aad565b604080519215158352901515602083015201610325565b34801561042257600080fd5b506104366104313660046128c5565b610c05565b60405161032592919061297e565b34801561045057600080fd5b5061029e61045f366004612769565b610c3b565b34801561047057600080fd5b5061029e61047f366004612769565b610cf2565b34801561049057600080fd5b5061029e61049f366004612999565b610d03565b3480156104b057600080fd5b506001610319565b3480156104c457600080fd5b5061029e6104d3366004612769565b610e54565b3480156104e457600080fd5b5061033d7fcaea1390f2df063d26d4762d71a4fa8603a564f3815d495b3df6135019f49be281565b34801561051857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610325565b34801561055f57600080fd5b5061053b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561059357600080fd5b506105a76105a23660046129ec565b610eff565b6040805193151584526001600160a01b039283166020850152911690820152606001610325565b3480156105da57600080fd5b5061033d7f31829d07c4d3c646006e946f988ff19ce6e7b36b244862de7ad825b17bd54d5281565b34801561060e57600080fd5b5061033d60055481565b34801561062457600080fd5b5061029e610633366004612a1e565b6110ed565b34801561064457600080fd5b50305461053b565b34801561065857600080fd5b5061033d61116a565b34801561066d57600080fd5b5061029e61067c366004612a76565b611203565b34801561068d57600080fd5b5061029e61069c366004612bbc565b6113c2565b3480156106ad57600080fd5b5061029e6106bc366004612769565b6113d3565b3480156106cd57600080fd5b5061029e6106dc366004612769565b61143c565b3480156106ed57600080fd5b5061033d61144d565b34801561070257600080fd5b5061072760405180604001604052806005815260200164302e302e3160d81b81525081565b6040516103259190612c04565b61073c6114a5565b610747858585611203565b61075c6107576020870187612769565b61151f565b61076e6107698284612c17565b6115a8565b5050505050565b61077d6114a5565b610788858585610d03565b6040805160608101909152600090806107a46020890189612769565b6001600160a01b031681526020018760200160208101906107c59190612c3c565b6001600160e01b03191681526020016107e46060890160408a01612c6e565b6001600160401b0316905290506107fa8161177f565b6108076107698385612c17565b505050505050565b60065460ff161561085d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b6001600160a01b0383166108b35760405162461bcd60e51b815260206004820152601960248201527f52657175697265642066616c6c6261636b2068616e646c6572000000000000006044820152606401610854565b6006805460ff191660011790556108e8837f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b6108f1846119b7565b6108fa82611a1e565b600555505050565b61090a611a81565b806001600160a01b031663a71d052b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c9190612c89565b6109b15760405162461bcd60e51b81526020600482015260166024820152752737ba10309029b7b234bab69039b4b733b632ba37b760511b6044820152606401610854565b6109b9813055565b50565b60006109c66114a5565b6109d08484611ab8565b90506109db82611fa5565b6109e484611ff2565b9392505050565b3360009081526001602052604081205460ff16610a345760405162461bcd60e51b815260206004820152600760248201526614d113534c4c0d60ca1b6044820152606401610854565b610a41858585855a6121e9565b90508015610a795760405133907f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb890600090a2610aa5565b60405133907facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37590600090a25b949350505050565b6000806001600160a01b038316610ac957506000928392509050565b6005546040516bffffffffffffffffffffffff19606086901b1660208201526034016040516020818303038152906040528051906020012003610b1157506001928392509050565b6004546001600160a01b0390811680151591851603610b365750600193849350915050565b6001600160a01b0384811660009081526003602090815260408083205460e090811b6001600160e01b03198181168652600285529483902083516060810185529054968716808252600160a01b880490931b90951693850193909352600160c01b9094046001600160401b03169083015291610bba57506000958695509350505050565b600081604001516001600160401b0316118015610be357504281604001516001600160401b0316105b15610bf657506000958695509350505050565b50600195911594509092505050565b60006060610c15868686866109eb565b915060405160203d0181016040523d81523d6000602083013e8091505094509492505050565b610c43611a81565b6001600160a01b03811660009081526001602052604090205460ff1615610c965760405162461bcd60e51b815260206004820152600760248201526653444d4d31303160c81b6044820152606401610854565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844091015b60405180910390a150565b610cfa611a81565b6109b981611a1e565b42610d146060850160408601612c6e565b6001600160401b031611610d535760405162461bcd60e51b8152602060048201526006602482015265534d4153303560d01b6044820152606401610854565b60007f31829d07c4d3c646006e946f988ff19ce6e7b36b244862de7ad825b17bd54d5284604051602001610d88929190612ca6565b6040516020818303038152906040528051906020012090506000610dab82612230565b90506000610dd77fe5230392f47deb1a37e1df3b9ee1d04b8a457138ebb1a61edeb61872e6c423225490565b6040516348203b0760e01b81529091506001600160a01b038216906348203b0790610e0a90859089908990600401612d2f565b602060405180830381865afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190612c89565b50505050505050565b610e5c611a81565b6001600160a01b03811660009081526001602052604090205460ff16610eae5760405162461bcd60e51b815260206004820152600760248201526653444d4d31303160c81b6044820152606401610854565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace40542769101610ce7565b6000808080610f116001828789612d49565b610f1a91612d73565b90506001600160f81b03198116600160f81b03610fd8576000610f4160156001888a612d49565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939450610f87925089915060159050818b612d49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050601483015195509050610fcf858a83612278565b955050506110e2565b6001600160f81b03198116600160f91b036110dd576000606080610fff886001818c612d49565b81019061100c9190612da3565b92995092975094509092509050426001600160401b03841610156110375760009650505050506110e4565b604080517fcaea1390f2df063d26d4762d71a4fa8603a564f3815d495b3df6135019f49be260208201526001600160a01b038716918101919091526001600160401b03841660608201526000906110a69060800160405160208183030381529060405280519060200120612230565b905060006110b5888385612278565b905060006110c4888e87612278565b90508180156110d05750805b99505050505050506110e2565b600093505b505b93509350939050565b6110f56114a5565b60006060846001600160a01b0316845a90856040516111149190612e3c565b600060405180830381858888f193505050503d8060008114611152576040519150601f19603f3d011682016040523d82523d6000602084013e611157565b606091505b5090925090508161076e57805160208201fd5b60007f0000000000000000000000000000000000000000000000000000000000000000604051631aab3f0d60e11b8152306004820152600060248201526001600160a01b0391909116906335567e1a90604401602060405180830381865afa1580156111da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fe9190612e58565b905090565b7febd64025eccab0d68ffd8dbdf22f162b40c6e98dc2bf27a2eabea8004135b99f54836020013510156112605760405162461bcd60e51b8152602060048201526005602482015264534d52303160d81b6044820152606401610854565b60007fdb53bc3f8ea86d0def94644136fcf091e6d7df8e8b19de81f3850704cf35d46884604051602001611295929190612e71565b60405160208183030381529060405280519060200120905060006112b882612230565b905060006112e47fe5230392f47deb1a37e1df3b9ee1d04b8a457138ebb1a61edeb61872e6c423225490565b6040516348203b0760e01b81529091506001600160a01b038216906348203b079061131790859089908990600401612d2f565b602060405180830381865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190612c89565b61138c5760405162461bcd60e51b8152602060048201526005602482015264534d52303360d81b6044820152606401610854565b61080761139e60208801356001612ebb565b7febd64025eccab0d68ffd8dbdf22f162b40c6e98dc2bf27a2eabea8004135b99f55565b6113ca6114a5565b6109b9816115a8565b6113db611a81565b611403817f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b6040516001600160a01b03821681527f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b090602001610ce7565b611444611a81565b6109b9816119b7565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218466040805160208101939093528201523060608201526080015b60405160208183030381529060405280519060200120905090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461151d5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152606401610854565b565b604080516060810182526001600160a01b038316808252635cea321160e11b602080840191909152600083850152600480546001600160c01b0319168317635cea321160a11b176001600160c01b03169055925190815290917ffa12114790d31d64c8d58b8d82cc1ee4a33374f9722f0327d08db01f53658cf891015b60405180910390a15050565b60005b815181101561177b5760008282815181106115c8576115c8612ece565b602002602001015190506000606082604001515a10156116235760405162461bcd60e51b8152602060048201526016602482015275536f6469756d3a204e4f545f454e4f5547485f47415360501b6044820152606401610854565b60018351600181111561163857611638612ee4565b036116c15782606001516001600160a01b03168360400151600014611661578360400151611663565b5a5b8460a001516040516116759190612e3c565b6000604051808303818686f4925050503d80600081146116b1576040519150601f19603f3d011682016040523d82523d6000602084013e6116b6565b606091505b509092509050611749565b82606001516001600160a01b0316836080015184604001516000146116ea5784604001516116ec565b5a5b908560a001516040516116ff9190612e3c565b600060405180830381858888f193505050503d806000811461173d576040519150601f19603f3d011682016040523d82523d6000602084013e611742565b606091505b5090925090505b81158015611758575082602001515b1561176557805160208201fd5b505050808061177390612efa565b9150506115ab565b5050565b80516001600160a01b03166117e25760405162461bcd60e51b8152602060048201526024808201527f73657373696f6e206f776e65722063616e6e6f74206265207a65726f206164646044820152637265737360e01b6064820152608401610854565b600081604001516001600160401b0316116118515760405162461bcd60e51b815260206004820152602960248201527f73657373696f6e2065787069726573206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610854565b6020818101516001600160e01b0319908116600090815260028352604090819020815160608101835290546001600160a01b038116808352600160a01b820460e01b90941694820194909452600160c01b9093046001600160401b031690830152156118dc5780516001600160a01b03166000908152600360205260409020805463ffffffff191690555b602082810180516001600160e01b03199081166000908152600284526040808220875181548651848b0180516001600160a01b039485166001600160c01b03199094168417600160a01b60e09490941c938402176001600160c01b0316600160c01b6001600160401b0392831602179095559186526003895294849020805463ffffffff1916909517909455855183518a51909216825295518516968101969096529151909116908401521660608201527f01e74df6c6bdc37dc1afe188087562a38bed53bd10947c71b129ee4004ce92e89060800161159c565b6001600160a01b0381166119f65760405162461bcd60e51b81526004016108549060208082526004908201526314d34c0d60e21b604082015260600190565b6109b9817fe5230392f47deb1a37e1df3b9ee1d04b8a457138ebb1a61edeb61872e6c4232255565b6001600160a01b038116611a5d5760405162461bcd60e51b8152602060048201526006602482015265534d4f50303160d01b6044820152606401610854565b7f26af6f34783f6c05ad199b86190c89039b6a27ab2bac01a0ef363037be08c64e55565b33301461151d5760405162461bcd60e51b8152602060048201526005602482015264475330333160d81b6044820152606401610854565b60006004611ac96060850185612f13565b90501080611ae657506016611ae2610140850185612f13565b9050105b15611af357506001611f9f565b6000611b026060850185612f13565b611b1191600491600091612d49565b611b1a91612f59565b90506000611b27846123ba565b9050600080611b3e836105a26101408a018a612f13565b509250905080611b55576001945050505050611f9f565b63f2e6d07360e01b6001600160e01b0319851601611bf657600080611b7d60608a018a612f13565b611b8c91602491601091612d49565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506014810151925090506001600160a01b0384811690831614611be3576001611be6565b60005b60ff169650505050505050611f9f565b63d70755b360e01b6001600160e01b0319851601611d4257600080611c1e60608a018a612f13565b611c2d91602491601091612d49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060148501516004549097509495506001600160a01b0390941615939250611c8691506123f59050565b905081611d0457604051638393db0b60e01b81526002906001600160a01b03831690638393db0b90611cbc908f906004016130c3565b602060405180830381865afa158015611cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfd91906130d6565b60ff161091505b856001600160a01b0316846001600160a01b0316148015611d225750815b611d2d576001611d30565b60005b60ff1698505050505050505050611f9f565b631e7fb3f160e11b6001600160e01b0319851601611e6b57600080611d6a60608a018a612f13565b611d7991602491601091612d49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060148201519350909150611dda9050826001600160a01b031660009081526001602052604090205460ff1690565b611ded5760019650505050505050611f9f565b604051631179c1f560e11b81526001600160a01b038316906322f383ea90611e1b908c908c906004016130f9565b6020604051808303816000875af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190612e58565b9650505050505050611f9f565b6302913d1d60e31b6001600160e01b0319851601611f6457600080611e8f84610aad565b915091506000611ebd7f26af6f34783f6c05ad199b86190c89039b6a27ab2bac01a0ef363037be08c64e5490565b905081611f3b57604051638393db0b60e01b81526002906001600160a01b03831690638393db0b90611ef3908e906004016130c3565b602060405180830381865afa158015611f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3491906130d6565b60ff161091505b828015611f455750815b611f50576001611f53565b60005b60ff16975050505050505050611f9f565b60405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a59081b595d1a1bd9125960821b6044820152606401610854565b92915050565b80156109b957604051600090339060001990849084818181858888f193505050503d806000811461076e576040519150601f19603f3d011682016040523d82523d6000602084013e61076e565b366000612003610120840184612f13565b9092509050602c811461201557505050565b63095ea7b360e01b61202b601860148486612d49565b61203491612f59565b6001600160e01b031916036121e45760006120526014828486612d49565b61205b9161311b565b60601c9050600061206f8360188187612d49565b6120789161311b565b6040516382d2d97160e01b815260609190911c60048201819052915060009081906001600160a01b038516906382d2d971906024016040805180830381865afa1580156120c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ed919061314e565b604051636eb1769f60e11b81523060048201526001600160a01b038781166024830152929450909250839185169063dd62ed3e90604401602060405180830381865afa158015612141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121659190612e58565b1015610e4b5760405163095ea7b360e01b81526001600160a01b0385811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af11580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190612c89565b50505050505b505050565b600060018360018111156121ff576121ff612ee4565b03612217576000808551602087018986f49050612227565b600080855160208701888a87f190505b95945050505050565b600061223a61241a565b60405161190160f01b60208201526022810191909152604281018390526062015b604051602081830303815290604052805190602001209050919050565b60008060006122878585612457565b909250905060008160048111156122a0576122a0612ee4565b1480156122be5750856001600160a01b0316826001600160a01b0316145b156122ce576001925050506109e4565b600080876001600160a01b0316631626ba7e60e01b88886040516024016122f6929190613172565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516123349190612e3c565b600060405180830381855afa9150503d806000811461236f576040519150601f19603f3d011682016040523d82523d6000602084013e612374565b606091505b5091509150818015612387575080516020145b80156123ae57508051630b135d3f60e11b906123ac9083016020908101908401612e58565b145b98975050505050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c0161225b565b7f26af6f34783f6c05ad199b86190c89039b6a27ab2bac01a0ef363037be08c64e5490565b604080517f035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d47496020820152309181019190915260009060600161148a565b600080825160410361248d5760208301516040840151606085015160001a6124818782858561249c565b94509450505050612495565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156124d35750600090506003612557565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612527573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661255057600060019250925050612557565b9150600090505b94509492505050565b60006040828403121561257257600080fd5b50919050565b60008083601f84011261258a57600080fd5b5081356001600160401b038111156125a157600080fd5b60208301915083602082850101111561249557600080fd5b60008083601f8401126125cb57600080fd5b5081356001600160401b038111156125e257600080fd5b6020830191508360208260051b850101111561249557600080fd5b60008060008060006080868803121561261557600080fd5b61261f8787612560565b945060408601356001600160401b038082111561263b57600080fd5b61264789838a01612578565b9096509450606088013591508082111561266057600080fd5b5061266d888289016125b9565b969995985093965092949392505050565b60006060828403121561257257600080fd5b600080600080600060a086880312156126a857600080fd5b6126b2878761267e565b945060608601356001600160401b03808211156126ce57600080fd5b6126da89838a01612578565b9096509450608088013591508082111561266057600080fd5b6001600160a01b03811681146109b957600080fd5b8035612713816126f3565b919050565b6000806000806080858703121561272e57600080fd5b8435612739816126f3565b93506020850135612749816126f3565b92506040850135612759816126f3565b9396929550929360600135925050565b60006020828403121561277b57600080fd5b81356109e4816126f3565b60008060006060848603121561279b57600080fd5b83356001600160401b038111156127b157600080fd5b840161016081870312156127c457600080fd5b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715612811576128116127d9565b60405290565b604051601f8201601f191681016001600160401b038111828210171561283f5761283f6127d9565b604052919050565b600082601f83011261285857600080fd5b81356001600160401b03811115612871576128716127d9565b612884601f8201601f1916602001612817565b81815284602083860101111561289957600080fd5b816020850160208301376000918101602001919091529392505050565b80356002811061271357600080fd5b600080600080608085870312156128db57600080fd5b84356128e6816126f3565b93506020850135925060408501356001600160401b0381111561290857600080fd5b61291487828801612847565b925050612923606086016128b6565b905092959194509250565b60005b83811015612949578181015183820152602001612931565b50506000910152565b6000815180845261296a81602086016020860161292e565b601f01601f19169290920160200192915050565b8215158152604060208201526000610aa56040830184612952565b6000806000608084860312156129ae57600080fd5b6129b8858561267e565b925060608401356001600160401b038111156129d357600080fd5b6129df86828701612578565b9497909650939450505050565b600080600060408486031215612a0157600080fd5b8335925060208401356001600160401b038111156129d357600080fd5b600080600060608486031215612a3357600080fd5b8335612a3e816126f3565b92506020840135915060408401356001600160401b03811115612a6057600080fd5b612a6c86828701612847565b9150509250925092565b600080600060608486031215612a8b57600080fd5b612a958585612560565b925060408401356001600160401b038111156129d357600080fd5b80151581146109b957600080fd5b60006001600160401b0380841115612ad857612ad86127d9565b8360051b6020612ae9818301612817565b86815293509084019080840187831115612b0257600080fd5b855b83811015612bb057803585811115612b1c5760008081fd5b870160c0818b031215612b2f5760008081fd5b612b376127ef565b612b40826128b6565b815284820135612b4f81612ab0565b8186015260408281013590820152606080830135612b6c816126f3565b908201526080828101359082015260a08083013588811115612b8e5760008081fd5b612b9a8d828601612847565b9183019190915250835250908201908201612b04565b50505050509392505050565b600060208284031215612bce57600080fd5b81356001600160401b03811115612be457600080fd5b8201601f81018413612bf557600080fd5b610aa584823560208401612abe565b6020815260006109e46020830184612952565b60006109e4368484612abe565b80356001600160e01b03198116811461271357600080fd5b600060208284031215612c4e57600080fd5b6109e482612c24565b80356001600160401b038116811461271357600080fd5b600060208284031215612c8057600080fd5b6109e482612c57565b600060208284031215612c9b57600080fd5b81516109e481612ab0565b828152608081018235612cb8816126f3565b6001600160a01b03166020838101919091526001600160e01b031990612cdf908501612c24565b1660408301526001600160401b03612cf960408501612c57565b1660608301529392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000612227604083018486612d06565b60008085851115612d5957600080fd5b83861115612d6657600080fd5b5050820193919092039150565b6001600160f81b03198135818116916001851015612d9b5780818660010360031b1b83161692505b505092915050565b600080600080600060a08688031215612dbb57600080fd5b8535612dc6816126f3565b94506020860135612dd6816126f3565b9350612de460408701612c57565b925060608601356001600160401b0380821115612e0057600080fd5b612e0c89838a01612847565b93506080880135915080821115612e2257600080fd5b50612e2f88828901612847565b9150509295509295909350565b60008251612e4e81846020870161292e565b9190910192915050565b600060208284031215612e6a57600080fd5b5051919050565b828152606081018235612e83816126f3565b6001600160a01b03166020838101919091529290920135604090910152919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611f9f57611f9f612ea5565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060018201612f0c57612f0c612ea5565b5060010190565b6000808335601e19843603018112612f2a57600080fd5b8301803591506001600160401b03821115612f4457600080fd5b60200191503681900382131561249557600080fd5b6001600160e01b03198135818116916004851015612d9b5760049490940360031b84901b1690921692915050565b6000808335601e19843603018112612f9e57600080fd5b83016020810192503590506001600160401b03811115612fbd57600080fd5b80360382131561249557600080fd5b6000610160612feb84612fde85612708565b6001600160a01b03169052565b602083013560208501526130026040840184612f87565b8260408701526130158387018284612d06565b925050506130266060840184612f87565b8583036060870152613039838284612d06565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e085015261010080840135818601525061012061308081850185612f87565b86840383880152613092848284612d06565b93505050506101406130a681850185612f87565b868403838801526130b8848284612d06565b979650505050505050565b6020815260006109e46020830184612fcc565b6000602082840312156130e857600080fd5b815160ff811681146109e457600080fd5b60408152600061310c6040830185612fcc565b90508260208301529392505050565b6bffffffffffffffffffffffff198135818116916014851015612d9b5760149490940360031b84901b1690921692915050565b6000806040838503121561316157600080fd5b505080516020909101519092909150565b828152604060208201526000610aa5604083018461295256fea2646970667358221220df53babbbed3e165cd8897f4a0db8dd473bf73d96f545726f320786c043fb5a564736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c8063a95f524611610102578063cb103d7011610095578063f08a032311610064578063f08a0323146106a1578063f3a961ca146106c1578063f698da25146106e1578063ffa1ad74146106f657610218565b8063cb103d7014610638578063d087d2881461064c578063d3874edf14610661578063eb7617181461068157610218565b8063b6d5a063116100d1578063b6d5a06314610587578063b964f878146105ce578063bfa0b13314610602578063c300981e1461061857610218565b8063a95f5246146104b8578063adde2646146104d8578063b0d691fe1461050c578063b3080c241461055357610218565b80633a871cdd1161017a578063610b592511610149578063610b592514610444578063861067261461046457806391ca23d914610484578063a71d052b146104a457610218565b80633a871cdd1461039f578063468721a7146103bf5780634b574a02146103df5780635229073f1461041657610218565b80632d9ad53d116101b65780632d9ad53d146102e05780633408e4701461032e5780633659cfe61461034b578063378cf8041461036b57610218565b80630d192f8d1461027e57806328f8aa4d146102a05780632906737d146102c057610218565b366102185760405134815233907f9820dd13494dd7d9f03807aa0bb724fe8266855b5ac4db99848a199904f8074b9060200160405180910390a2005b34801561022457600080fd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d580548061024f57005b36600080373360601b365260008060143601600080855af190503d6000803e80610278573d6000fd5b503d6000f35b34801561028a57600080fd5b5061029e6102993660046125fd565b610734565b005b3480156102ac57600080fd5b5061029e6102bb366004612690565b610775565b3480156102cc57600080fd5b5061029e6102db366004612718565b61080f565b3480156102ec57600080fd5b506103196102fb366004612769565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b34801561033a57600080fd5b50465b604051908152602001610325565b34801561035757600080fd5b5061029e610366366004612769565b610902565b34801561037757600080fd5b5061033d7fdb53bc3f8ea86d0def94644136fcf091e6d7df8e8b19de81f3850704cf35d46881565b3480156103ab57600080fd5b5061033d6103ba366004612786565b6109bc565b3480156103cb57600080fd5b506103196103da3660046128c5565b6109eb565b3480156103eb57600080fd5b506103ff6103fa366004612769565b610aad565b604080519215158352901515602083015201610325565b34801561042257600080fd5b506104366104313660046128c5565b610c05565b60405161032592919061297e565b34801561045057600080fd5b5061029e61045f366004612769565b610c3b565b34801561047057600080fd5b5061029e61047f366004612769565b610cf2565b34801561049057600080fd5b5061029e61049f366004612999565b610d03565b3480156104b057600080fd5b506001610319565b3480156104c457600080fd5b5061029e6104d3366004612769565b610e54565b3480156104e457600080fd5b5061033d7fcaea1390f2df063d26d4762d71a4fa8603a564f3815d495b3df6135019f49be281565b34801561051857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610325565b34801561055f57600080fd5b5061053b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561059357600080fd5b506105a76105a23660046129ec565b610eff565b6040805193151584526001600160a01b039283166020850152911690820152606001610325565b3480156105da57600080fd5b5061033d7f31829d07c4d3c646006e946f988ff19ce6e7b36b244862de7ad825b17bd54d5281565b34801561060e57600080fd5b5061033d60055481565b34801561062457600080fd5b5061029e610633366004612a1e565b6110ed565b34801561064457600080fd5b50305461053b565b34801561065857600080fd5b5061033d61116a565b34801561066d57600080fd5b5061029e61067c366004612a76565b611203565b34801561068d57600080fd5b5061029e61069c366004612bbc565b6113c2565b3480156106ad57600080fd5b5061029e6106bc366004612769565b6113d3565b3480156106cd57600080fd5b5061029e6106dc366004612769565b61143c565b3480156106ed57600080fd5b5061033d61144d565b34801561070257600080fd5b5061072760405180604001604052806005815260200164302e302e3160d81b81525081565b6040516103259190612c04565b61073c6114a5565b610747858585611203565b61075c6107576020870187612769565b61151f565b61076e6107698284612c17565b6115a8565b5050505050565b61077d6114a5565b610788858585610d03565b6040805160608101909152600090806107a46020890189612769565b6001600160a01b031681526020018760200160208101906107c59190612c3c565b6001600160e01b03191681526020016107e46060890160408a01612c6e565b6001600160401b0316905290506107fa8161177f565b6108076107698385612c17565b505050505050565b60065460ff161561085d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b6001600160a01b0383166108b35760405162461bcd60e51b815260206004820152601960248201527f52657175697265642066616c6c6261636b2068616e646c6572000000000000006044820152606401610854565b6006805460ff191660011790556108e8837f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b6108f1846119b7565b6108fa82611a1e565b600555505050565b61090a611a81565b806001600160a01b031663a71d052b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c9190612c89565b6109b15760405162461bcd60e51b81526020600482015260166024820152752737ba10309029b7b234bab69039b4b733b632ba37b760511b6044820152606401610854565b6109b9813055565b50565b60006109c66114a5565b6109d08484611ab8565b90506109db82611fa5565b6109e484611ff2565b9392505050565b3360009081526001602052604081205460ff16610a345760405162461bcd60e51b815260206004820152600760248201526614d113534c4c0d60ca1b6044820152606401610854565b610a41858585855a6121e9565b90508015610a795760405133907f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb890600090a2610aa5565b60405133907facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37590600090a25b949350505050565b6000806001600160a01b038316610ac957506000928392509050565b6005546040516bffffffffffffffffffffffff19606086901b1660208201526034016040516020818303038152906040528051906020012003610b1157506001928392509050565b6004546001600160a01b0390811680151591851603610b365750600193849350915050565b6001600160a01b0384811660009081526003602090815260408083205460e090811b6001600160e01b03198181168652600285529483902083516060810185529054968716808252600160a01b880490931b90951693850193909352600160c01b9094046001600160401b03169083015291610bba57506000958695509350505050565b600081604001516001600160401b0316118015610be357504281604001516001600160401b0316105b15610bf657506000958695509350505050565b50600195911594509092505050565b60006060610c15868686866109eb565b915060405160203d0181016040523d81523d6000602083013e8091505094509492505050565b610c43611a81565b6001600160a01b03811660009081526001602052604090205460ff1615610c965760405162461bcd60e51b815260206004820152600760248201526653444d4d31303160c81b6044820152606401610854565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844091015b60405180910390a150565b610cfa611a81565b6109b981611a1e565b42610d146060850160408601612c6e565b6001600160401b031611610d535760405162461bcd60e51b8152602060048201526006602482015265534d4153303560d01b6044820152606401610854565b60007f31829d07c4d3c646006e946f988ff19ce6e7b36b244862de7ad825b17bd54d5284604051602001610d88929190612ca6565b6040516020818303038152906040528051906020012090506000610dab82612230565b90506000610dd77fe5230392f47deb1a37e1df3b9ee1d04b8a457138ebb1a61edeb61872e6c423225490565b6040516348203b0760e01b81529091506001600160a01b038216906348203b0790610e0a90859089908990600401612d2f565b602060405180830381865afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190612c89565b50505050505050565b610e5c611a81565b6001600160a01b03811660009081526001602052604090205460ff16610eae5760405162461bcd60e51b815260206004820152600760248201526653444d4d31303160c81b6044820152606401610854565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace40542769101610ce7565b6000808080610f116001828789612d49565b610f1a91612d73565b90506001600160f81b03198116600160f81b03610fd8576000610f4160156001888a612d49565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939450610f87925089915060159050818b612d49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050601483015195509050610fcf858a83612278565b955050506110e2565b6001600160f81b03198116600160f91b036110dd576000606080610fff886001818c612d49565b81019061100c9190612da3565b92995092975094509092509050426001600160401b03841610156110375760009650505050506110e4565b604080517fcaea1390f2df063d26d4762d71a4fa8603a564f3815d495b3df6135019f49be260208201526001600160a01b038716918101919091526001600160401b03841660608201526000906110a69060800160405160208183030381529060405280519060200120612230565b905060006110b5888385612278565b905060006110c4888e87612278565b90508180156110d05750805b99505050505050506110e2565b600093505b505b93509350939050565b6110f56114a5565b60006060846001600160a01b0316845a90856040516111149190612e3c565b600060405180830381858888f193505050503d8060008114611152576040519150601f19603f3d011682016040523d82523d6000602084013e611157565b606091505b5090925090508161076e57805160208201fd5b60007f0000000000000000000000000000000000000000000000000000000000000000604051631aab3f0d60e11b8152306004820152600060248201526001600160a01b0391909116906335567e1a90604401602060405180830381865afa1580156111da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fe9190612e58565b905090565b7febd64025eccab0d68ffd8dbdf22f162b40c6e98dc2bf27a2eabea8004135b99f54836020013510156112605760405162461bcd60e51b8152602060048201526005602482015264534d52303160d81b6044820152606401610854565b60007fdb53bc3f8ea86d0def94644136fcf091e6d7df8e8b19de81f3850704cf35d46884604051602001611295929190612e71565b60405160208183030381529060405280519060200120905060006112b882612230565b905060006112e47fe5230392f47deb1a37e1df3b9ee1d04b8a457138ebb1a61edeb61872e6c423225490565b6040516348203b0760e01b81529091506001600160a01b038216906348203b079061131790859089908990600401612d2f565b602060405180830381865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190612c89565b61138c5760405162461bcd60e51b8152602060048201526005602482015264534d52303360d81b6044820152606401610854565b61080761139e60208801356001612ebb565b7febd64025eccab0d68ffd8dbdf22f162b40c6e98dc2bf27a2eabea8004135b99f55565b6113ca6114a5565b6109b9816115a8565b6113db611a81565b611403817f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b6040516001600160a01b03821681527f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b090602001610ce7565b611444611a81565b6109b9816119b7565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218466040805160208101939093528201523060608201526080015b60405160208183030381529060405280519060200120905090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461151d5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152606401610854565b565b604080516060810182526001600160a01b038316808252635cea321160e11b602080840191909152600083850152600480546001600160c01b0319168317635cea321160a11b176001600160c01b03169055925190815290917ffa12114790d31d64c8d58b8d82cc1ee4a33374f9722f0327d08db01f53658cf891015b60405180910390a15050565b60005b815181101561177b5760008282815181106115c8576115c8612ece565b602002602001015190506000606082604001515a10156116235760405162461bcd60e51b8152602060048201526016602482015275536f6469756d3a204e4f545f454e4f5547485f47415360501b6044820152606401610854565b60018351600181111561163857611638612ee4565b036116c15782606001516001600160a01b03168360400151600014611661578360400151611663565b5a5b8460a001516040516116759190612e3c565b6000604051808303818686f4925050503d80600081146116b1576040519150601f19603f3d011682016040523d82523d6000602084013e6116b6565b606091505b509092509050611749565b82606001516001600160a01b0316836080015184604001516000146116ea5784604001516116ec565b5a5b908560a001516040516116ff9190612e3c565b600060405180830381858888f193505050503d806000811461173d576040519150601f19603f3d011682016040523d82523d6000602084013e611742565b606091505b5090925090505b81158015611758575082602001515b1561176557805160208201fd5b505050808061177390612efa565b9150506115ab565b5050565b80516001600160a01b03166117e25760405162461bcd60e51b8152602060048201526024808201527f73657373696f6e206f776e65722063616e6e6f74206265207a65726f206164646044820152637265737360e01b6064820152608401610854565b600081604001516001600160401b0316116118515760405162461bcd60e51b815260206004820152602960248201527f73657373696f6e2065787069726573206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610854565b6020818101516001600160e01b0319908116600090815260028352604090819020815160608101835290546001600160a01b038116808352600160a01b820460e01b90941694820194909452600160c01b9093046001600160401b031690830152156118dc5780516001600160a01b03166000908152600360205260409020805463ffffffff191690555b602082810180516001600160e01b03199081166000908152600284526040808220875181548651848b0180516001600160a01b039485166001600160c01b03199094168417600160a01b60e09490941c938402176001600160c01b0316600160c01b6001600160401b0392831602179095559186526003895294849020805463ffffffff1916909517909455855183518a51909216825295518516968101969096529151909116908401521660608201527f01e74df6c6bdc37dc1afe188087562a38bed53bd10947c71b129ee4004ce92e89060800161159c565b6001600160a01b0381166119f65760405162461bcd60e51b81526004016108549060208082526004908201526314d34c0d60e21b604082015260600190565b6109b9817fe5230392f47deb1a37e1df3b9ee1d04b8a457138ebb1a61edeb61872e6c4232255565b6001600160a01b038116611a5d5760405162461bcd60e51b8152602060048201526006602482015265534d4f50303160d01b6044820152606401610854565b7f26af6f34783f6c05ad199b86190c89039b6a27ab2bac01a0ef363037be08c64e55565b33301461151d5760405162461bcd60e51b8152602060048201526005602482015264475330333160d81b6044820152606401610854565b60006004611ac96060850185612f13565b90501080611ae657506016611ae2610140850185612f13565b9050105b15611af357506001611f9f565b6000611b026060850185612f13565b611b1191600491600091612d49565b611b1a91612f59565b90506000611b27846123ba565b9050600080611b3e836105a26101408a018a612f13565b509250905080611b55576001945050505050611f9f565b63f2e6d07360e01b6001600160e01b0319851601611bf657600080611b7d60608a018a612f13565b611b8c91602491601091612d49565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506014810151925090506001600160a01b0384811690831614611be3576001611be6565b60005b60ff169650505050505050611f9f565b63d70755b360e01b6001600160e01b0319851601611d4257600080611c1e60608a018a612f13565b611c2d91602491601091612d49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060148501516004549097509495506001600160a01b0390941615939250611c8691506123f59050565b905081611d0457604051638393db0b60e01b81526002906001600160a01b03831690638393db0b90611cbc908f906004016130c3565b602060405180830381865afa158015611cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfd91906130d6565b60ff161091505b856001600160a01b0316846001600160a01b0316148015611d225750815b611d2d576001611d30565b60005b60ff1698505050505050505050611f9f565b631e7fb3f160e11b6001600160e01b0319851601611e6b57600080611d6a60608a018a612f13565b611d7991602491601091612d49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060148201519350909150611dda9050826001600160a01b031660009081526001602052604090205460ff1690565b611ded5760019650505050505050611f9f565b604051631179c1f560e11b81526001600160a01b038316906322f383ea90611e1b908c908c906004016130f9565b6020604051808303816000875af1158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e9190612e58565b9650505050505050611f9f565b6302913d1d60e31b6001600160e01b0319851601611f6457600080611e8f84610aad565b915091506000611ebd7f26af6f34783f6c05ad199b86190c89039b6a27ab2bac01a0ef363037be08c64e5490565b905081611f3b57604051638393db0b60e01b81526002906001600160a01b03831690638393db0b90611ef3908e906004016130c3565b602060405180830381865afa158015611f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3491906130d6565b60ff161091505b828015611f455750815b611f50576001611f53565b60005b60ff16975050505050505050611f9f565b60405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a59081b595d1a1bd9125960821b6044820152606401610854565b92915050565b80156109b957604051600090339060001990849084818181858888f193505050503d806000811461076e576040519150601f19603f3d011682016040523d82523d6000602084013e61076e565b366000612003610120840184612f13565b9092509050602c811461201557505050565b63095ea7b360e01b61202b601860148486612d49565b61203491612f59565b6001600160e01b031916036121e45760006120526014828486612d49565b61205b9161311b565b60601c9050600061206f8360188187612d49565b6120789161311b565b6040516382d2d97160e01b815260609190911c60048201819052915060009081906001600160a01b038516906382d2d971906024016040805180830381865afa1580156120c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ed919061314e565b604051636eb1769f60e11b81523060048201526001600160a01b038781166024830152929450909250839185169063dd62ed3e90604401602060405180830381865afa158015612141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121659190612e58565b1015610e4b5760405163095ea7b360e01b81526001600160a01b0385811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af11580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190612c89565b50505050505b505050565b600060018360018111156121ff576121ff612ee4565b03612217576000808551602087018986f49050612227565b600080855160208701888a87f190505b95945050505050565b600061223a61241a565b60405161190160f01b60208201526022810191909152604281018390526062015b604051602081830303815290604052805190602001209050919050565b60008060006122878585612457565b909250905060008160048111156122a0576122a0612ee4565b1480156122be5750856001600160a01b0316826001600160a01b0316145b156122ce576001925050506109e4565b600080876001600160a01b0316631626ba7e60e01b88886040516024016122f6929190613172565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516123349190612e3c565b600060405180830381855afa9150503d806000811461236f576040519150601f19603f3d011682016040523d82523d6000602084013e612374565b606091505b5091509150818015612387575080516020145b80156123ae57508051630b135d3f60e11b906123ac9083016020908101908401612e58565b145b98975050505050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c0161225b565b7f26af6f34783f6c05ad199b86190c89039b6a27ab2bac01a0ef363037be08c64e5490565b604080517f035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d47496020820152309181019190915260009060600161148a565b600080825160410361248d5760208301516040840151606085015160001a6124818782858561249c565b94509450505050612495565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156124d35750600090506003612557565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612527573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661255057600060019250925050612557565b9150600090505b94509492505050565b60006040828403121561257257600080fd5b50919050565b60008083601f84011261258a57600080fd5b5081356001600160401b038111156125a157600080fd5b60208301915083602082850101111561249557600080fd5b60008083601f8401126125cb57600080fd5b5081356001600160401b038111156125e257600080fd5b6020830191508360208260051b850101111561249557600080fd5b60008060008060006080868803121561261557600080fd5b61261f8787612560565b945060408601356001600160401b038082111561263b57600080fd5b61264789838a01612578565b9096509450606088013591508082111561266057600080fd5b5061266d888289016125b9565b969995985093965092949392505050565b60006060828403121561257257600080fd5b600080600080600060a086880312156126a857600080fd5b6126b2878761267e565b945060608601356001600160401b03808211156126ce57600080fd5b6126da89838a01612578565b9096509450608088013591508082111561266057600080fd5b6001600160a01b03811681146109b957600080fd5b8035612713816126f3565b919050565b6000806000806080858703121561272e57600080fd5b8435612739816126f3565b93506020850135612749816126f3565b92506040850135612759816126f3565b9396929550929360600135925050565b60006020828403121561277b57600080fd5b81356109e4816126f3565b60008060006060848603121561279b57600080fd5b83356001600160401b038111156127b157600080fd5b840161016081870312156127c457600080fd5b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715612811576128116127d9565b60405290565b604051601f8201601f191681016001600160401b038111828210171561283f5761283f6127d9565b604052919050565b600082601f83011261285857600080fd5b81356001600160401b03811115612871576128716127d9565b612884601f8201601f1916602001612817565b81815284602083860101111561289957600080fd5b816020850160208301376000918101602001919091529392505050565b80356002811061271357600080fd5b600080600080608085870312156128db57600080fd5b84356128e6816126f3565b93506020850135925060408501356001600160401b0381111561290857600080fd5b61291487828801612847565b925050612923606086016128b6565b905092959194509250565b60005b83811015612949578181015183820152602001612931565b50506000910152565b6000815180845261296a81602086016020860161292e565b601f01601f19169290920160200192915050565b8215158152604060208201526000610aa56040830184612952565b6000806000608084860312156129ae57600080fd5b6129b8858561267e565b925060608401356001600160401b038111156129d357600080fd5b6129df86828701612578565b9497909650939450505050565b600080600060408486031215612a0157600080fd5b8335925060208401356001600160401b038111156129d357600080fd5b600080600060608486031215612a3357600080fd5b8335612a3e816126f3565b92506020840135915060408401356001600160401b03811115612a6057600080fd5b612a6c86828701612847565b9150509250925092565b600080600060608486031215612a8b57600080fd5b612a958585612560565b925060408401356001600160401b038111156129d357600080fd5b80151581146109b957600080fd5b60006001600160401b0380841115612ad857612ad86127d9565b8360051b6020612ae9818301612817565b86815293509084019080840187831115612b0257600080fd5b855b83811015612bb057803585811115612b1c5760008081fd5b870160c0818b031215612b2f5760008081fd5b612b376127ef565b612b40826128b6565b815284820135612b4f81612ab0565b8186015260408281013590820152606080830135612b6c816126f3565b908201526080828101359082015260a08083013588811115612b8e5760008081fd5b612b9a8d828601612847565b9183019190915250835250908201908201612b04565b50505050509392505050565b600060208284031215612bce57600080fd5b81356001600160401b03811115612be457600080fd5b8201601f81018413612bf557600080fd5b610aa584823560208401612abe565b6020815260006109e46020830184612952565b60006109e4368484612abe565b80356001600160e01b03198116811461271357600080fd5b600060208284031215612c4e57600080fd5b6109e482612c24565b80356001600160401b038116811461271357600080fd5b600060208284031215612c8057600080fd5b6109e482612c57565b600060208284031215612c9b57600080fd5b81516109e481612ab0565b828152608081018235612cb8816126f3565b6001600160a01b03166020838101919091526001600160e01b031990612cdf908501612c24565b1660408301526001600160401b03612cf960408501612c57565b1660608301529392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000612227604083018486612d06565b60008085851115612d5957600080fd5b83861115612d6657600080fd5b5050820193919092039150565b6001600160f81b03198135818116916001851015612d9b5780818660010360031b1b83161692505b505092915050565b600080600080600060a08688031215612dbb57600080fd5b8535612dc6816126f3565b94506020860135612dd6816126f3565b9350612de460408701612c57565b925060608601356001600160401b0380821115612e0057600080fd5b612e0c89838a01612847565b93506080880135915080821115612e2257600080fd5b50612e2f88828901612847565b9150509295509295909350565b60008251612e4e81846020870161292e565b9190910192915050565b600060208284031215612e6a57600080fd5b5051919050565b828152606081018235612e83816126f3565b6001600160a01b03166020838101919091529290920135604090910152919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611f9f57611f9f612ea5565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060018201612f0c57612f0c612ea5565b5060010190565b6000808335601e19843603018112612f2a57600080fd5b8301803591506001600160401b03821115612f4457600080fd5b60200191503681900382131561249557600080fd5b6001600160e01b03198135818116916004851015612d9b5760049490940360031b84901b1690921692915050565b6000808335601e19843603018112612f9e57600080fd5b83016020810192503590506001600160401b03811115612fbd57600080fd5b80360382131561249557600080fd5b6000610160612feb84612fde85612708565b6001600160a01b03169052565b602083013560208501526130026040840184612f87565b8260408701526130158387018284612d06565b925050506130266060840184612f87565b8583036060870152613039838284612d06565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e085015261010080840135818601525061012061308081850185612f87565b86840383880152613092848284612d06565b93505050506101406130a681850185612f87565b868403838801526130b8848284612d06565b979650505050505050565b6020815260006109e46020830184612fcc565b6000602082840312156130e857600080fd5b815160ff811681146109e457600080fd5b60408152600061310c6040830185612fcc565b90508260208301529392505050565b6bffffffffffffffffffffffff198135818116916014851015612d9b5760149490940360031b84901b1690921692915050565b6000806040838503121561316157600080fd5b505080516020909101519092909150565b828152604060208201526000610aa5604083018461295256fea2646970667358221220df53babbbed3e165cd8897f4a0db8dd473bf73d96f545726f320786c043fb5a564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "disableModule(address)": {
        "details": "Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.",
        "params": {
          "module": "Module to be removed."
        }
      },
      "enableModule(address)": {
        "details": "Allows to add a module to the whitelist.      This can only be done via a Safe transaction.",
        "params": {
          "module": "Module to be whitelisted."
        }
      },
      "execTransactionFromModule(address,uint256,bytes,uint8)": {
        "details": "Allows a Module to execute a Safe transaction without any further confirmations.",
        "params": {
          "data": "Data payload of module transaction.",
          "operation": "Operation type of module transaction.",
          "to": "Destination address of module transaction.",
          "value": "Ether value of module transaction."
        }
      },
      "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": {
        "details": "Allows a Module to execute a Safe transaction without any further confirmations and return data",
        "params": {
          "data": "Data payload of module transaction.",
          "operation": "Operation type of module transaction.",
          "to": "Destination address of module transaction.",
          "value": "Ether value of module transaction."
        }
      },
      "execute((uint8,bool,uint256,address,uint256,bytes)[])": {
        "details": "Relayers must ensure that the gasLimit specified for each transaction      is acceptable to them. A user could specify large enough that it could      consume all the gas available.",
        "params": {
          "_txs": "Transactions to process"
        }
      },
      "getChainId()": {
        "details": "Returns the chain id used by this contract."
      },
      "getSingleton()": {
        "returns": {
          "_imp": "The address of the current Wallet implementation"
        }
      },
      "isModuleEnabled(address)": {
        "details": "Returns if an module is enabled",
        "returns": {
          "_0": "True if the module is enabled"
        }
      },
      "setFallbackHandler(address)": {
        "details": "Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.",
        "params": {
          "handler": "contract to handle fallbacks calls."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "disableModule(address)": {
        "notice": "Disables the module `module` for the Safe."
      },
      "enableModule(address)": {
        "notice": "Enables the module `module` for the Safe."
      },
      "entryPoint()": {
        "notice": "return the entryPoint used by this account. subclass should return the current entryPoint used by this account."
      },
      "execute((uint8,bool,uint256,address,uint256,bytes)[])": {
        "notice": "Allow eip-4337 entryPoint or wallet self to execute an action"
      },
      "getNonce()": {
        "notice": "Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"
      },
      "getSingleton()": {
        "notice": "Returns the Wallet implementation"
      },
      "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
        "notice": "Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8131,
        "contract": "contracts/Sodium.sol:Sodium",
        "label": "_singleton",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5973,
        "contract": "contracts/Sodium.sol:Sodium",
        "label": "modules",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6497,
        "contract": "contracts/Sodium.sol:Sodium",
        "label": "_sessions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes4,t_struct(Session)6492_storage)"
      },
      {
        "astId": 6501,
        "contract": "contracts/Sodium.sol:Sodium",
        "label": "_ownerToUniqueId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bytes4)"
      },
      {
        "astId": 6504,
        "contract": "contracts/Sodium.sol:Sodium",
        "label": "_safeSession",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Session)6492_storage"
      },
      {
        "astId": 6506,
        "contract": "contracts/Sodium.sol:Sodium",
        "label": "salt",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 4980,
        "contract": "contracts/Sodium.sol:Sodium",
        "label": "initialized",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_mapping(t_bytes4,t_struct(Session)6492_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct SessionManager.Session)",
        "numberOfBytes": "32",
        "value": "t_struct(Session)6492_storage"
      },
      "t_struct(Session)6492_storage": {
        "encoding": "inplace",
        "label": "struct SessionManager.Session",
        "members": [
          {
            "astId": 6487,
            "contract": "contracts/Sodium.sol:Sodium",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6489,
            "contract": "contracts/Sodium.sol:Sodium",
            "label": "uniqueId",
            "offset": 20,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 6491,
            "contract": "contracts/Sodium.sol:Sodium",
            "label": "expires",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}