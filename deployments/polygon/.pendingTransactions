{
  "0x1b1cd74d117f7b827eab711f5edf36ac989b90c68c7675c93e53b7bb894be55e": {
    "name": "CompatibilityFallbackHandler2",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "CompatibilityFallbackHandler2",
      "sourceName": "contracts/handler/CompatibilityFallbackHandler2.sol",
      "abi": [
        {
          "inputs": [],
          "name": "NAME",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "VERSION",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "name": "getMessageHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract Sodium",
              "name": "so",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "name": "getMessageHashForSodium",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "_signature",
              "type": "bytes"
            }
          ],
          "name": "isValidSignature",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_signature",
              "type": "bytes"
            }
          ],
          "name": "isValidSignature",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "onERC1155BatchReceived",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "onERC1155Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "onERC721Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "tokensReceived",
          "outputs": [],
          "stateMutability": "pure",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b50610acf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c806320c13b0b1161007157806320c13b0b1461015b578063a3f4df7e1461016e578063bc197c81146101b7578063f23a6e61146101d9578063f653d43c146101f9578063ffa1ad741461020c57600080fd5b806223de29146100ad57806301ffc9a7146100c75780630a1028c4146100ef578063150b7a02146101105780631626ba7e14610148575b600080fd5b6100c56100bb36600461051f565b5050505050505050565b005b6100da6100d53660046105e6565b610230565b60405190151581526020015b60405180910390f35b6101026100fd3660046106ad565b610282565b6040519081526020016100e6565b61012f61011e3660046106ea565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100e6565b61012f61015636600461075d565b61028e565b61012f6101693660046107a9565b61034a565b6101aa6040518060400160405280601881526020017f44656661756c742043616c6c6261636b2048616e646c6572000000000000000081525081565b6040516100e6919061085b565b61012f6101c53660046108b3565b63bc197c8160e01b98975050505050505050565b61012f6101e7366004610951565b63f23a6e6160e01b9695505050505050565b6101026102073660046109cd565b6103a6565b6101aa604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216630271189760e51b148061026157506001600160e01b03198216630a85bd0160e11b145b8061027c57506001600160e01b031982166301ffc9a760e01b145b92915050565b600061027c33836103a6565b60408051602080820186905282518083039091018152818301928390526320c13b0b60e01b9092526000913391839183916320c13b0b916102d59189908990604401610a1d565b602060405180830381865afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610a63565b90506001600160e01b031981166320c13b0b60e01b14610337576000610340565b630b135d3f60e11b5b9695505050505050565b60008033905060006103928288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103a692505050565b506320c13b0b60e01b979650505050505050565b6000807f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020016103ef929190918252602082015260400190565b604051602081830303815290604052805190602001209050601960f81b600160f81b856001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610a80565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040528051906020012091505092915050565b6001600160a01b03811681146104d357600080fd5b50565b60008083601f8401126104e857600080fd5b50813567ffffffffffffffff81111561050057600080fd5b60208301915083602082850101111561051857600080fd5b9250929050565b60008060008060008060008060c0898b03121561053b57600080fd5b8835610546816104be565b97506020890135610556816104be565b96506040890135610566816104be565b955060608901359450608089013567ffffffffffffffff8082111561058a57600080fd5b6105968c838d016104d6565b909650945060a08b01359150808211156105af57600080fd5b506105bc8b828c016104d6565b999c989b5096995094979396929594505050565b6001600160e01b0319811681146104d357600080fd5b6000602082840312156105f857600080fd5b8135610603816105d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261063157600080fd5b813567ffffffffffffffff8082111561064c5761064c61060a565b604051601f8301601f19908116603f011681019082821181831017156106745761067461060a565b8160405283815286602085880101111561068d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156106bf57600080fd5b813567ffffffffffffffff8111156106d657600080fd5b6106e284828501610620565b949350505050565b60008060008060006080868803121561070257600080fd5b853561070d816104be565b9450602086013561071d816104be565b935060408601359250606086013567ffffffffffffffff81111561074057600080fd5b61074c888289016104d6565b969995985093965092949392505050565b60008060006040848603121561077257600080fd5b83359250602084013567ffffffffffffffff81111561079057600080fd5b61079c868287016104d6565b9497909650939450505050565b600080600080604085870312156107bf57600080fd5b843567ffffffffffffffff808211156107d757600080fd5b6107e3888389016104d6565b909650945060208701359150808211156107fc57600080fd5b50610809878288016104d6565b95989497509550505050565b6000815180845260005b8181101561083b5760208185018101518683018201520161081f565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106036020830184610815565b60008083601f84011261088057600080fd5b50813567ffffffffffffffff81111561089857600080fd5b6020830191508360208260051b850101111561051857600080fd5b60008060008060008060008060a0898b0312156108cf57600080fd5b88356108da816104be565b975060208901356108ea816104be565b9650604089013567ffffffffffffffff8082111561090757600080fd5b6109138c838d0161086e565b909850965060608b013591508082111561092c57600080fd5b6109388c838d0161086e565b909650945060808b01359150808211156105af57600080fd5b60008060008060008060a0878903121561096a57600080fd5b8635610975816104be565b95506020870135610985816104be565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109af57600080fd5b6109bb89828a016104d6565b979a9699509497509295939492505050565b600080604083850312156109e057600080fd5b82356109eb816104be565b9150602083013567ffffffffffffffff811115610a0757600080fd5b610a1385828601610620565b9150509250929050565b604081526000610a306040830186610815565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b600060208284031215610a7557600080fd5b8151610603816105d0565b600060208284031215610a9257600080fd5b505191905056fea26469706673582212208bd5ae150548811980a103c815589699f4c185724d34fb78ec49d29f9bf94b7e64736f6c63430008110033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c806320c13b0b1161007157806320c13b0b1461015b578063a3f4df7e1461016e578063bc197c81146101b7578063f23a6e61146101d9578063f653d43c146101f9578063ffa1ad741461020c57600080fd5b806223de29146100ad57806301ffc9a7146100c75780630a1028c4146100ef578063150b7a02146101105780631626ba7e14610148575b600080fd5b6100c56100bb36600461051f565b5050505050505050565b005b6100da6100d53660046105e6565b610230565b60405190151581526020015b60405180910390f35b6101026100fd3660046106ad565b610282565b6040519081526020016100e6565b61012f61011e3660046106ea565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100e6565b61012f61015636600461075d565b61028e565b61012f6101693660046107a9565b61034a565b6101aa6040518060400160405280601881526020017f44656661756c742043616c6c6261636b2048616e646c6572000000000000000081525081565b6040516100e6919061085b565b61012f6101c53660046108b3565b63bc197c8160e01b98975050505050505050565b61012f6101e7366004610951565b63f23a6e6160e01b9695505050505050565b6101026102073660046109cd565b6103a6565b6101aa604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216630271189760e51b148061026157506001600160e01b03198216630a85bd0160e11b145b8061027c57506001600160e01b031982166301ffc9a760e01b145b92915050565b600061027c33836103a6565b60408051602080820186905282518083039091018152818301928390526320c13b0b60e01b9092526000913391839183916320c13b0b916102d59189908990604401610a1d565b602060405180830381865afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610a63565b90506001600160e01b031981166320c13b0b60e01b14610337576000610340565b630b135d3f60e11b5b9695505050505050565b60008033905060006103928288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103a692505050565b506320c13b0b60e01b979650505050505050565b6000807f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020016103ef929190918252602082015260400190565b604051602081830303815290604052805190602001209050601960f81b600160f81b856001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610a80565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040528051906020012091505092915050565b6001600160a01b03811681146104d357600080fd5b50565b60008083601f8401126104e857600080fd5b50813567ffffffffffffffff81111561050057600080fd5b60208301915083602082850101111561051857600080fd5b9250929050565b60008060008060008060008060c0898b03121561053b57600080fd5b8835610546816104be565b97506020890135610556816104be565b96506040890135610566816104be565b955060608901359450608089013567ffffffffffffffff8082111561058a57600080fd5b6105968c838d016104d6565b909650945060a08b01359150808211156105af57600080fd5b506105bc8b828c016104d6565b999c989b5096995094979396929594505050565b6001600160e01b0319811681146104d357600080fd5b6000602082840312156105f857600080fd5b8135610603816105d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261063157600080fd5b813567ffffffffffffffff8082111561064c5761064c61060a565b604051601f8301601f19908116603f011681019082821181831017156106745761067461060a565b8160405283815286602085880101111561068d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156106bf57600080fd5b813567ffffffffffffffff8111156106d657600080fd5b6106e284828501610620565b949350505050565b60008060008060006080868803121561070257600080fd5b853561070d816104be565b9450602086013561071d816104be565b935060408601359250606086013567ffffffffffffffff81111561074057600080fd5b61074c888289016104d6565b969995985093965092949392505050565b60008060006040848603121561077257600080fd5b83359250602084013567ffffffffffffffff81111561079057600080fd5b61079c868287016104d6565b9497909650939450505050565b600080600080604085870312156107bf57600080fd5b843567ffffffffffffffff808211156107d757600080fd5b6107e3888389016104d6565b909650945060208701359150808211156107fc57600080fd5b50610809878288016104d6565b95989497509550505050565b6000815180845260005b8181101561083b5760208185018101518683018201520161081f565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106036020830184610815565b60008083601f84011261088057600080fd5b50813567ffffffffffffffff81111561089857600080fd5b6020830191508360208260051b850101111561051857600080fd5b60008060008060008060008060a0898b0312156108cf57600080fd5b88356108da816104be565b975060208901356108ea816104be565b9650604089013567ffffffffffffffff8082111561090757600080fd5b6109138c838d0161086e565b909850965060608b013591508082111561092c57600080fd5b6109388c838d0161086e565b909650945060808b01359150808211156105af57600080fd5b60008060008060008060a0878903121561096a57600080fd5b8635610975816104be565b95506020870135610985816104be565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109af57600080fd5b6109bb89828a016104d6565b979a9699509497509295939492505050565b600080604083850312156109e057600080fd5b82356109eb816104be565b9150602083013567ffffffffffffffff811115610a0757600080fd5b610a1385828601610620565b9150509250929050565b604081526000610a306040830186610815565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b600060208284031215610a7557600080fd5b8151610603816105d0565b600060208284031215610a9257600080fd5b505191905056fea26469706673582212208bd5ae150548811980a103c815589699f4c185724d34fb78ec49d29f9bf94b7e64736f6c63430008110033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getMessageHash(bytes)": {
            "details": "Returns hash of a message that can be signed by owners.",
            "params": {
              "message": "Message that should be hashed"
            },
            "returns": {
              "_0": "Message hash."
            }
          },
          "getMessageHashForSodium(address,bytes)": {
            "details": "Returns hash of a message that can be signed by owners.",
            "params": {
              "message": "Message that should be hashed",
              "so": "Sodium to which the message is targeted"
            },
            "returns": {
              "_0": "Message hash."
            }
          },
          "isValidSignature(bytes,bytes)": {
            "details": "Should return whether the signature provided is valid for the provided data.",
            "params": {
              "_data": "Arbitrary length data signed on the behalf of address(msg.sender)",
              "_signature": "Signature byte array associated with _data"
            },
            "returns": {
              "_0": "a bool upon valid or invalid signature with corresponding _data"
            }
          },
          "isValidSignature(bytes32,bytes)": {
            "details": "Should return whether the signature provided is valid for the provided data.       The save does not implement the interface since `checkSignatures` is not a view method.       The method will not perform any state changes (see parameters of `checkSignatures`)",
            "params": {
              "_dataHash": "Hash of the data signed on the behalf of address(msg.sender)",
              "_signature": "Signature byte array associated with _dataHash"
            },
            "returns": {
              "_0": "a bool upon valid or invalid signature with corresponding _dataHash"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50610acf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c806320c13b0b1161007157806320c13b0b1461015b578063a3f4df7e1461016e578063bc197c81146101b7578063f23a6e61146101d9578063f653d43c146101f9578063ffa1ad741461020c57600080fd5b806223de29146100ad57806301ffc9a7146100c75780630a1028c4146100ef578063150b7a02146101105780631626ba7e14610148575b600080fd5b6100c56100bb36600461051f565b5050505050505050565b005b6100da6100d53660046105e6565b610230565b60405190151581526020015b60405180910390f35b6101026100fd3660046106ad565b610282565b6040519081526020016100e6565b61012f61011e3660046106ea565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100e6565b61012f61015636600461075d565b61028e565b61012f6101693660046107a9565b61034a565b6101aa6040518060400160405280601881526020017f44656661756c742043616c6c6261636b2048616e646c6572000000000000000081525081565b6040516100e6919061085b565b61012f6101c53660046108b3565b63bc197c8160e01b98975050505050505050565b61012f6101e7366004610951565b63f23a6e6160e01b9695505050505050565b6101026102073660046109cd565b6103a6565b6101aa604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216630271189760e51b148061026157506001600160e01b03198216630a85bd0160e11b145b8061027c57506001600160e01b031982166301ffc9a760e01b145b92915050565b600061027c33836103a6565b60408051602080820186905282518083039091018152818301928390526320c13b0b60e01b9092526000913391839183916320c13b0b916102d59189908990604401610a1d565b602060405180830381865afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610a63565b90506001600160e01b031981166320c13b0b60e01b14610337576000610340565b630b135d3f60e11b5b9695505050505050565b60008033905060006103928288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103a692505050565b506320c13b0b60e01b979650505050505050565b6000807f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020016103ef929190918252602082015260400190565b604051602081830303815290604052805190602001209050601960f81b600160f81b856001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610a80565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040528051906020012091505092915050565b6001600160a01b03811681146104d357600080fd5b50565b60008083601f8401126104e857600080fd5b50813567ffffffffffffffff81111561050057600080fd5b60208301915083602082850101111561051857600080fd5b9250929050565b60008060008060008060008060c0898b03121561053b57600080fd5b8835610546816104be565b97506020890135610556816104be565b96506040890135610566816104be565b955060608901359450608089013567ffffffffffffffff8082111561058a57600080fd5b6105968c838d016104d6565b909650945060a08b01359150808211156105af57600080fd5b506105bc8b828c016104d6565b999c989b5096995094979396929594505050565b6001600160e01b0319811681146104d357600080fd5b6000602082840312156105f857600080fd5b8135610603816105d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261063157600080fd5b813567ffffffffffffffff8082111561064c5761064c61060a565b604051601f8301601f19908116603f011681019082821181831017156106745761067461060a565b8160405283815286602085880101111561068d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156106bf57600080fd5b813567ffffffffffffffff8111156106d657600080fd5b6106e284828501610620565b949350505050565b60008060008060006080868803121561070257600080fd5b853561070d816104be565b9450602086013561071d816104be565b935060408601359250606086013567ffffffffffffffff81111561074057600080fd5b61074c888289016104d6565b969995985093965092949392505050565b60008060006040848603121561077257600080fd5b83359250602084013567ffffffffffffffff81111561079057600080fd5b61079c868287016104d6565b9497909650939450505050565b600080600080604085870312156107bf57600080fd5b843567ffffffffffffffff808211156107d757600080fd5b6107e3888389016104d6565b909650945060208701359150808211156107fc57600080fd5b50610809878288016104d6565b95989497509550505050565b6000815180845260005b8181101561083b5760208185018101518683018201520161081f565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106036020830184610815565b60008083601f84011261088057600080fd5b50813567ffffffffffffffff81111561089857600080fd5b6020830191508360208260051b850101111561051857600080fd5b60008060008060008060008060a0898b0312156108cf57600080fd5b88356108da816104be565b975060208901356108ea816104be565b9650604089013567ffffffffffffffff8082111561090757600080fd5b6109138c838d0161086e565b909850965060608b013591508082111561092c57600080fd5b6109388c838d0161086e565b909650945060808b01359150808211156105af57600080fd5b60008060008060008060a0878903121561096a57600080fd5b8635610975816104be565b95506020870135610985816104be565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109af57600080fd5b6109bb89828a016104d6565b979a9699509497509295939492505050565b600080604083850312156109e057600080fd5b82356109eb816104be565b9150602083013567ffffffffffffffff811115610a0757600080fd5b610a1385828601610620565b9150509250929050565b604081526000610a306040830186610815565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b600060208284031215610a7557600080fd5b8151610603816105d0565b600060208284031215610a9257600080fd5b505191905056fea26469706673582212208bd5ae150548811980a103c815589699f4c185724d34fb78ec49d29f9bf94b7e64736f6c63430008110033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xACF DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x20C13B0B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x20C13B0B EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xA3F4DF7E EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xF653D43C EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0xA1028C4 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x148 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC5 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x51F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDA PUSH2 0xD5 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E6 JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x6AD JUMP JUMPDEST PUSH2 0x282 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x6EA JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x156 CALLDATASIZE PUSH1 0x4 PUSH2 0x75D JUMP JUMPDEST PUSH2 0x28E JUMP JUMPDEST PUSH2 0x12F PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0x7A9 JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH2 0x1AA PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x44656661756C742043616C6C6261636B2048616E646C65720000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE6 SWAP2 SWAP1 PUSH2 0x85B JUMP JUMPDEST PUSH2 0x12F PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B3 JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x12F PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x951 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x102 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x1AA PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x312E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x261 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x27C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27C CALLER DUP4 PUSH2 0x3A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE DUP2 DUP4 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH4 0x20C13B0B PUSH1 0xE0 SHL SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 CALLER SWAP2 DUP4 SWAP2 DUP4 SWAP2 PUSH4 0x20C13B0B SWAP2 PUSH2 0x2D5 SWAP2 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x44 ADD PUSH2 0xA1D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0xA63 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x20C13B0B PUSH1 0xE0 SHL EQ PUSH2 0x337 JUMPI PUSH1 0x0 PUSH2 0x340 JUMP JUMPDEST PUSH4 0xB135D3F PUSH1 0xE1 SHL JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH1 0x0 PUSH2 0x392 DUP3 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x3A6 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH4 0x20C13B0B PUSH1 0xE0 SHL SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x60B3CBF8B4A223D68D641B3B6DDF9A298E7F33710CF3D3A9D1146B5A6150FBCA PUSH1 0x0 SHL DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3EF SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF698DA25 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x44F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x473 SWAP2 SWAP1 PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x546 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x556 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x566 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x58A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x596 DUP13 DUP4 DUP14 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BC DUP12 DUP3 DUP13 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x603 DUP2 PUSH2 0x5D0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x64C JUMPI PUSH2 0x64C PUSH2 0x60A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x674 JUMPI PUSH2 0x674 PUSH2 0x60A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6E2 DUP5 DUP3 DUP6 ADD PUSH2 0x620 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x70D DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x71D DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74C DUP9 DUP3 DUP10 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79C DUP7 DUP3 DUP8 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E3 DUP9 DUP4 DUP10 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x809 DUP8 DUP3 DUP9 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x83B JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x81F JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x603 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x815 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x8CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x8DA DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x8EA DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x907 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x913 DUP13 DUP4 DUP14 ADD PUSH2 0x86E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x92C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x938 DUP13 DUP4 DUP14 ADD PUSH2 0x86E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x96A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x975 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x985 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BB DUP10 DUP3 DUP11 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x9EB DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA13 DUP6 DUP3 DUP7 ADD PUSH2 0x620 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xA30 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x815 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE DUP4 DUP2 MSTORE DUP4 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP7 ADD AND DUP3 ADD ADD SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x603 DUP2 PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0xD5 0xAE ISZERO SDIV BASEFEE DUP2 NOT DUP1 LOG1 SUB 0xC8 ISZERO PC SWAP7 SWAP10 DELEGATECALL 0xC1 DUP6 PUSH19 0x4D34FB78EC49D29F9BF94B7E64736F6C634300 ADDMOD GT STOP CALLER ",
          "sourceMap": "250:3590:24:-:0;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@NAME_3962": {
              "entryPoint": null,
              "id": 3962,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@VERSION_3965": {
              "entryPoint": null,
              "id": 3965,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@getMessageHashForSodium_3902": {
              "entryPoint": 934,
              "id": 3902,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getMessageHash_3860": {
              "entryPoint": 642,
              "id": 3860,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isValidSignature_3840": {
              "entryPoint": 842,
              "id": 3840,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@isValidSignature_3943": {
              "entryPoint": 654,
              "id": 3943,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@onERC1155BatchReceived_4005": {
              "entryPoint": null,
              "id": 4005,
              "parameterSlots": 8,
              "returnSlots": 1
            },
            "@onERC1155Received_3984": {
              "entryPoint": null,
              "id": 3984,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "@onERC721Received_4022": {
              "entryPoint": null,
              "id": 4022,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@supportsInterface_4069": {
              "entryPoint": 560,
              "id": 4069,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokensReceived_4039": {
              "entryPoint": null,
              "id": 4039,
              "parameterSlots": 8,
              "returnSlots": 0
            },
            "abi_decode_array_uint256_dyn_calldata": {
              "entryPoint": 2158,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_bytes": {
              "entryPoint": 1568,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bytes_calldata": {
              "entryPoint": 1238,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr": {
              "entryPoint": 1311,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 8
            },
            "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr": {
              "entryPoint": 2227,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 8
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr": {
              "entryPoint": 1770,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr": {
              "entryPoint": 2385,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_decode_tuple_t_bytes32_fromMemory": {
              "entryPoint": 2688,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32t_bytes_calldata_ptr": {
              "entryPoint": 1885,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 1510,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 2659,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes_calldata_ptrt_bytes_calldata_ptr": {
              "entryPoint": 1961,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_bytes_memory_ptr": {
              "entryPoint": 1709,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_Sodium_$1767t_bytes_memory_ptr": {
              "entryPoint": 2509,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_string": {
              "entryPoint": 2069,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 2589,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 2139,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 1546,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 1214,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_bytes4": {
              "entryPoint": 1488,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:11157:34",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:34",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "59:86:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "123:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "132:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "135:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "125:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "125:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "125:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "82:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "93:5:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "108:3:34",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "113:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "104:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "104:11:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "117:1:34",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "100:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "100:19:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "89:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "89:31:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "79:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "79:42:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "72:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "72:50:34"
                          },
                          "nodeType": "YulIf",
                          "src": "69:70:34"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "48:5:34",
                        "type": ""
                      }
                    ],
                    "src": "14:131:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "222:275:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "271:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "280:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "283:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "273:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "273:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "273:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "250:6:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "258:4:34",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "246:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "246:17:34"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "265:3:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "242:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "242:27:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "235:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "235:35:34"
                          },
                          "nodeType": "YulIf",
                          "src": "232:55:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "296:30:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "319:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "306:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "306:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "296:6:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "369:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "378:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "381:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "371:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "371:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "371:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "341:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "349:18:34",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "338:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "338:30:34"
                          },
                          "nodeType": "YulIf",
                          "src": "335:50:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "394:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "410:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "418:4:34",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "406:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "406:17:34"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "394:8:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "475:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "484:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "487:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "477:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "477:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "477:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "446:6:34"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "454:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "442:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "442:19:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "463:4:34",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "438:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "438:30:34"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "470:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "435:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "435:39:34"
                          },
                          "nodeType": "YulIf",
                          "src": "432:59:34"
                        }
                      ]
                    },
                    "name": "abi_decode_bytes_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "185:6:34",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "193:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "201:8:34",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "211:6:34",
                        "type": ""
                      }
                    ],
                    "src": "150:347:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "695:1012:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "742:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "751:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "754:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "744:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "744:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "744:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "716:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "725:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "712:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "712:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "737:3:34",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "708:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "708:33:34"
                          },
                          "nodeType": "YulIf",
                          "src": "705:53:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "767:36:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "793:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "780:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "780:23:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "771:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "837:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "812:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "812:31:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "812:31:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "852:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "862:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "852:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "876:47:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "908:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "919:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "904:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "904:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "891:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "891:32:34"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "880:7:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "957:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "932:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "932:33:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "932:33:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "974:17:34",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "984:7:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "974:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1000:47:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1032:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1043:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1028:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1028:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1015:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1015:32:34"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "1004:7:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "1081:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1056:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1056:33:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1056:33:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1098:17:34",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "1108:7:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1098:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1124:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1151:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1162:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1147:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1147:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1134:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1134:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "1124:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1175:47:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1206:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1217:3:34",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1202:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1202:19:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1189:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1189:33:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1179:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1231:28:34",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1241:18:34",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1235:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1286:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1295:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1298:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1288:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1288:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1288:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1274:6:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1282:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1271:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1271:14:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1268:34:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1311:84:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1367:9:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1378:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1363:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1363:22:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1387:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "1337:25:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1337:58:34"
                          },
                          "variables": [
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "1315:8:34",
                              "type": ""
                            },
                            {
                              "name": "value5_1",
                              "nodeType": "YulTypedName",
                              "src": "1325:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1404:18:34",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "1414:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "1404:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1431:18:34",
                          "value": {
                            "name": "value5_1",
                            "nodeType": "YulIdentifier",
                            "src": "1441:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "1431:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1458:49:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1491:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1502:3:34",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1487:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1487:19:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1474:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1474:33:34"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "1462:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1536:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1545:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1548:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1538:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1538:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1538:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "1522:8:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1532:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1519:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1519:16:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1516:36:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1561:86:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1617:9:34"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1628:8:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1613:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1613:24:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1639:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "1587:25:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1587:60:34"
                          },
                          "variables": [
                            {
                              "name": "value6_1",
                              "nodeType": "YulTypedName",
                              "src": "1565:8:34",
                              "type": ""
                            },
                            {
                              "name": "value7_1",
                              "nodeType": "YulTypedName",
                              "src": "1575:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1656:18:34",
                          "value": {
                            "name": "value6_1",
                            "nodeType": "YulIdentifier",
                            "src": "1666:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "1656:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1683:18:34",
                          "value": {
                            "name": "value7_1",
                            "nodeType": "YulIdentifier",
                            "src": "1693:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "1683:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "605:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "616:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "628:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "636:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "644:6:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "652:6:34",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "660:6:34",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "668:6:34",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "676:6:34",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "684:6:34",
                        "type": ""
                      }
                    ],
                    "src": "502:1205:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1756:87:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1821:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1830:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1833:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1823:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1823:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1823:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1779:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1790:5:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1801:3:34",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1806:10:34",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1797:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1797:20:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1786:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1786:32:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1776:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1776:43:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1769:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1769:51:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1766:71:34"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1745:5:34",
                        "type": ""
                      }
                    ],
                    "src": "1712:131:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1917:176:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1963:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1972:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1975:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1965:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1965:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1965:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1938:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1947:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1934:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1934:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1959:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1930:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1930:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "1927:52:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1988:36:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2014:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2001:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2001:23:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1992:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2057:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "2033:23:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2033:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2033:30:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2072:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2082:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2072:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1883:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1894:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1906:6:34",
                        "type": ""
                      }
                    ],
                    "src": "1848:245:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2193:92:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2203:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2215:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2226:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2211:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2211:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2203:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2245:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "2270:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2263:6:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2263:14:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2256:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2256:22:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2238:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2238:41:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2238:41:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2162:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2173:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2184:4:34",
                        "type": ""
                      }
                    ],
                    "src": "2098:187:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2322:95:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2339:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2346:3:34",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2351:10:34",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2342:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2342:20:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2332:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2332:31:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2332:31:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2379:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2382:4:34",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2372:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2372:15:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2372:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2403:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2406:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "2396:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2396:15:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2396:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "2290:127:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2474:666:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2523:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2532:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2535:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2525:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2525:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2525:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2502:6:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2510:4:34",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2498:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2498:17:34"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2517:3:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2494:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2494:27:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2487:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2487:35:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2484:55:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2548:30:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2571:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2558:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2558:20:34"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2552:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2587:28:34",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2597:18:34",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "2591:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2638:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2640:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2640:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2640:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2630:2:34"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2634:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2627:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2627:10:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2624:36:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2669:17:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2683:2:34",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "2679:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2679:7:34"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "2673:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2695:23:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2715:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2709:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2709:9:34"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "2699:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2727:71:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2749:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2773:2:34"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2777:4:34",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2769:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2769:13:34"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "2784:2:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "2765:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2765:22:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2789:2:34",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2761:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2761:31:34"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2794:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2757:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2757:40:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2745:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2745:53:34"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "2731:10:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2857:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2859:16:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2859:18:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2859:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2816:10:34"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2828:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2813:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2813:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2836:10:34"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2848:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2833:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2833:22:34"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "2810:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2810:46:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2807:72:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2895:2:34",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2899:10:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2888:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2888:22:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2888:22:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2926:6:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2934:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2919:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2919:18:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2919:18:34"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2985:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2994:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2997:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2987:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2987:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2987:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2960:6:34"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2968:2:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2956:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2956:15:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2973:4:34",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2952:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2952:26:34"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2980:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2949:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2949:35:34"
                          },
                          "nodeType": "YulIf",
                          "src": "2946:55:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3027:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3035:4:34",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3023:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3023:17:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3046:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3054:4:34",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3042:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3042:17:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3061:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "3010:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3010:54:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3010:54:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "3088:6:34"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3096:2:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3084:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3084:15:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3101:4:34",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3080:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3080:26:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3108:1:34",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3073:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3073:37:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3073:37:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3119:15:34",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "3128:6:34"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3119:5:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2448:6:34",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2456:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2464:5:34",
                        "type": ""
                      }
                    ],
                    "src": "2422:718:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3224:241:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3270:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3279:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3282:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3272:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3272:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3272:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3245:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3254:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3241:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3241:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3266:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3237:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3237:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "3234:52:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3295:37:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3322:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3309:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3309:23:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3299:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3375:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3384:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3387:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3377:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3377:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3377:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3347:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3355:18:34",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3344:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3344:30:34"
                          },
                          "nodeType": "YulIf",
                          "src": "3341:50:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3400:59:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3431:9:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3442:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3427:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3427:22:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3451:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "3410:16:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3410:49:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3400:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3190:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3201:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3213:6:34",
                        "type": ""
                      }
                    ],
                    "src": "3145:320:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3571:76:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3581:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3593:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3604:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3589:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3589:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3581:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3623:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3634:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3616:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3616:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3616:25:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3540:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3551:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3562:4:34",
                        "type": ""
                      }
                    ],
                    "src": "3470:177:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3792:614:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3839:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3848:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3851:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3841:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3841:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3841:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3813:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3822:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3809:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3809:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3834:3:34",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3805:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3805:33:34"
                          },
                          "nodeType": "YulIf",
                          "src": "3802:53:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3864:36:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3890:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3877:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3877:23:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3868:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3934:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3909:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3909:31:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3909:31:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3949:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3959:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3949:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3973:47:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4005:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4016:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4001:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4001:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3988:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3988:32:34"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "3977:7:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "4054:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "4029:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4029:33:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4029:33:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4071:17:34",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "4081:7:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4071:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4097:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4124:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4135:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4120:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4120:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4107:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4107:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4097:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4148:46:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4179:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4190:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4175:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4175:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4162:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4162:32:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "4152:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4237:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4246:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4249:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4239:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4239:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4239:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4209:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4217:18:34",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4206:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4206:30:34"
                          },
                          "nodeType": "YulIf",
                          "src": "4203:50:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4262:84:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4318:9:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4329:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4314:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4314:22:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4338:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4288:25:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4288:58:34"
                          },
                          "variables": [
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "4266:8:34",
                              "type": ""
                            },
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "4276:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4355:18:34",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "4365:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "4355:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4382:18:34",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "4392:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "4382:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3726:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3737:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3749:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3757:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3765:6:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "3773:6:34",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "3781:6:34",
                        "type": ""
                      }
                    ],
                    "src": "3652:754:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4510:103:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4520:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4532:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4543:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4528:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4528:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4520:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4562:9:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4577:6:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4589:3:34",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4594:10:34",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "4585:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4585:20:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4573:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4573:33:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4555:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4555:52:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4555:52:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4479:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4490:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4501:4:34",
                        "type": ""
                      }
                    ],
                    "src": "4411:202:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4724:371:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4770:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4779:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4782:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4772:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4772:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4772:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4745:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4754:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4741:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4741:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4766:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4737:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4737:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "4734:52:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4795:33:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4818:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4805:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4805:23:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4795:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4837:46:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4868:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4879:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4864:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4864:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4851:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4851:32:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "4841:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4926:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4935:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4938:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4928:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4928:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4928:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4898:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4906:18:34",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4895:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4895:30:34"
                          },
                          "nodeType": "YulIf",
                          "src": "4892:50:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4951:84:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5007:9:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5018:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5003:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5003:22:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5027:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4977:25:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4977:58:34"
                          },
                          "variables": [
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "4955:8:34",
                              "type": ""
                            },
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "4965:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5044:18:34",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "5054:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5044:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5071:18:34",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "5081:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5071:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4674:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4685:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4697:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4705:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4713:6:34",
                        "type": ""
                      }
                    ],
                    "src": "4618:477:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5225:592:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5271:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5280:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5283:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5273:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5273:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5273:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5246:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5255:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5242:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5242:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5267:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5238:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5238:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "5235:52:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5296:37:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5323:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5310:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5310:23:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5300:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5342:28:34",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5352:18:34",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5346:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5397:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5406:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5409:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5399:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5399:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5399:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5385:6:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5393:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5382:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5382:14:34"
                          },
                          "nodeType": "YulIf",
                          "src": "5379:34:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5422:84:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5478:9:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5489:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5474:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5474:22:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5498:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "5448:25:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5448:58:34"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "5426:8:34",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "5436:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5515:18:34",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "5525:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5515:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5542:18:34",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "5552:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5542:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5569:48:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5602:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5613:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5598:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5598:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5585:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5585:32:34"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "5573:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5646:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5655:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5658:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5648:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5648:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5648:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "5632:8:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5642:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5629:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5629:16:34"
                          },
                          "nodeType": "YulIf",
                          "src": "5626:36:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5671:86:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5727:9:34"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5738:8:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5723:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5723:24:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5749:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "5697:25:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5697:60:34"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "5675:8:34",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "5685:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5766:18:34",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "5776:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5766:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5793:18:34",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "5803:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "5793:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_calldata_ptrt_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5167:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5178:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5190:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5198:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5206:6:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5214:6:34",
                        "type": ""
                      }
                    ],
                    "src": "5100:717:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5872:373:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5882:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5902:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5896:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5896:12:34"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "5886:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5924:3:34"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5929:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5917:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5917:19:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5917:19:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5945:10:34",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5954:1:34",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "5949:1:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6016:110:34",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6030:14:34",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6040:4:34",
                                  "type": "",
                                  "value": "0x20"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "6034:2:34",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "6072:3:34"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "6077:1:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "6068:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6068:11:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "6081:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6064:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6064:20:34"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6100:5:34"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6107:1:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "6096:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "6096:13:34"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "6111:2:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "6092:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6092:22:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "6086:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6086:29:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6057:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6057:59:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6057:59:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5975:1:34"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5978:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5972:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5972:13:34"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5986:21:34",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5988:17:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "5997:1:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6000:4:34",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5993:3:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5993:12:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "5988:1:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5968:3:34",
                            "statements": []
                          },
                          "src": "5964:162:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "6150:3:34"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "6155:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6146:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6146:16:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6164:4:34",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6142:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6142:27:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6171:1:34",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6135:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6135:38:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6135:38:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6182:57:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6197:3:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "6210:6:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6218:2:34",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6206:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6206:15:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6227:2:34",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "6223:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6223:7:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6202:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6202:29:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6193:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6193:39:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6234:4:34",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6189:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6189:50:34"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6182:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "5849:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5856:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5864:3:34",
                        "type": ""
                      }
                    ],
                    "src": "5822:423:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6371:99:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6388:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6399:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6381:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6381:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6381:21:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6411:53:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6437:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6449:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6460:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6445:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6445:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "6419:17:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6419:45:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6411:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6340:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6351:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6362:4:34",
                        "type": ""
                      }
                    ],
                    "src": "6250:220:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6559:283:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6608:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6617:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6620:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6610:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6610:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6610:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6587:6:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6595:4:34",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6583:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6583:17:34"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "6602:3:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6579:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6579:27:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6572:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6572:35:34"
                          },
                          "nodeType": "YulIf",
                          "src": "6569:55:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6633:30:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6656:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6643:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6643:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "6633:6:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6706:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6715:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6718:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6708:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6708:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6708:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6678:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6686:18:34",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6675:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6675:30:34"
                          },
                          "nodeType": "YulIf",
                          "src": "6672:50:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6731:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6747:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6755:4:34",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6743:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6743:17:34"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "6731:8:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6820:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6829:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6832:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6822:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6822:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6822:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6783:6:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6795:1:34",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "6798:6:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6791:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6791:14:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6779:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6779:27:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6808:4:34",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6775:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6775:38:34"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "6815:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6772:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6772:47:34"
                          },
                          "nodeType": "YulIf",
                          "src": "6769:67:34"
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256_dyn_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "6522:6:34",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6530:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "6538:8:34",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "6548:6:34",
                        "type": ""
                      }
                    ],
                    "src": "6475:367:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7074:1111:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7121:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7130:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7133:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7123:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7123:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7123:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7095:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7104:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7091:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7091:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7116:3:34",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7087:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7087:33:34"
                          },
                          "nodeType": "YulIf",
                          "src": "7084:53:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7146:36:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7172:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7159:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7159:23:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "7150:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7216:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "7191:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7191:31:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7191:31:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7231:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7241:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7231:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7255:47:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7287:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7298:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7283:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7283:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7270:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7270:32:34"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "7259:7:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "7336:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "7311:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7311:33:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7311:33:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7353:17:34",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "7363:7:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7353:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7379:46:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7410:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7421:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7406:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7406:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7393:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7393:32:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "7383:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7434:28:34",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7444:18:34",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7438:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7489:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7498:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7501:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7491:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7491:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7491:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7477:6:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7485:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7474:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7474:14:34"
                          },
                          "nodeType": "YulIf",
                          "src": "7471:34:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7514:96:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7582:9:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "7593:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7578:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7578:22:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7602:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "7540:37:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7540:70:34"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "7518:8:34",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "7528:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7619:18:34",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "7629:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "7619:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7646:18:34",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "7656:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "7646:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7673:48:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7706:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7717:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7702:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7702:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7689:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7689:32:34"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "7677:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7750:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7759:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7762:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7752:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7752:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7752:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "7736:8:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7746:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7733:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7733:16:34"
                          },
                          "nodeType": "YulIf",
                          "src": "7730:36:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7775:98:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7843:9:34"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7854:8:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7839:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7839:24:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7865:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "7801:37:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7801:72:34"
                          },
                          "variables": [
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "7779:8:34",
                              "type": ""
                            },
                            {
                              "name": "value5_1",
                              "nodeType": "YulTypedName",
                              "src": "7789:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7882:18:34",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "7892:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "7882:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7909:18:34",
                          "value": {
                            "name": "value5_1",
                            "nodeType": "YulIdentifier",
                            "src": "7919:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "7909:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7936:49:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7969:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7980:3:34",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7965:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7965:19:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7952:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7952:33:34"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "7940:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8014:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8023:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8026:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8016:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8016:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8016:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "8000:8:34"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8010:2:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7997:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7997:16:34"
                          },
                          "nodeType": "YulIf",
                          "src": "7994:36:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8039:86:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8095:9:34"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8106:8:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8091:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8091:24:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8117:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "8065:25:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8065:60:34"
                          },
                          "variables": [
                            {
                              "name": "value6_1",
                              "nodeType": "YulTypedName",
                              "src": "8043:8:34",
                              "type": ""
                            },
                            {
                              "name": "value7_1",
                              "nodeType": "YulTypedName",
                              "src": "8053:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8134:18:34",
                          "value": {
                            "name": "value6_1",
                            "nodeType": "YulIdentifier",
                            "src": "8144:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "8134:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8161:18:34",
                          "value": {
                            "name": "value7_1",
                            "nodeType": "YulIdentifier",
                            "src": "8171:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "8161:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6984:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6995:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7007:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7015:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7023:6:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7031:6:34",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "7039:6:34",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "7047:6:34",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "7055:6:34",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "7063:6:34",
                        "type": ""
                      }
                    ],
                    "src": "6847:1338:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8347:666:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8394:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8403:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8406:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8396:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8396:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8396:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8368:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8377:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8364:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8364:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8389:3:34",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8360:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8360:33:34"
                          },
                          "nodeType": "YulIf",
                          "src": "8357:53:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8419:36:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8445:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8432:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8432:23:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "8423:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8489:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "8464:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8464:31:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8464:31:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8504:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8514:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8504:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8528:47:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8560:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8571:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8556:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8556:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8543:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8543:32:34"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "8532:7:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "8609:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "8584:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8584:33:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8584:33:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8626:17:34",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "8636:7:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8626:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8652:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8679:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8690:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8675:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8675:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8662:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8662:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8652:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8703:42:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8730:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8741:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8726:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8726:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8713:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8713:32:34"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "8703:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8754:47:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8785:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8796:3:34",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8781:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8781:19:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8768:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8768:33:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "8758:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8844:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8853:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8856:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8846:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8846:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8846:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8816:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8824:18:34",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8813:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8813:30:34"
                          },
                          "nodeType": "YulIf",
                          "src": "8810:50:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8869:84:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8925:9:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "8936:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8921:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8921:22:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8945:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "8895:25:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8895:58:34"
                          },
                          "variables": [
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "8873:8:34",
                              "type": ""
                            },
                            {
                              "name": "value5_1",
                              "nodeType": "YulTypedName",
                              "src": "8883:8:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8962:18:34",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "8972:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "8962:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8989:18:34",
                          "value": {
                            "name": "value5_1",
                            "nodeType": "YulIdentifier",
                            "src": "8999:8:34"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "8989:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8273:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8284:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8296:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8304:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8312:6:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8320:6:34",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "8328:6:34",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "8336:6:34",
                        "type": ""
                      }
                    ],
                    "src": "8190:823:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9129:359:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9175:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9184:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9187:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9177:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9177:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9177:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9150:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9159:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9146:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9146:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9171:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9142:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9142:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "9139:52:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9200:36:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9226:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9213:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9213:23:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9204:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9270:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "9245:24:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9245:31:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9245:31:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9285:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9295:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9285:6:34"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9309:46:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9340:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9351:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9336:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9336:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9323:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9323:32:34"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "9313:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9398:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9407:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9410:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9400:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9400:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9400:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "9370:6:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9378:18:34",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9367:2:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9367:30:34"
                          },
                          "nodeType": "YulIf",
                          "src": "9364:50:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9423:59:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9454:9:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "9465:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9450:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9450:22:34"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9474:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "9433:16:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9433:49:34"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "9423:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_Sodium_$1767t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9087:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9098:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9110:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9118:6:34",
                        "type": ""
                      }
                    ],
                    "src": "9018:470:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9668:365:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9685:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9696:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9678:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9678:21:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9678:21:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9708:59:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9740:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9752:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9763:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9748:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9748:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "9722:17:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9722:45:34"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "9712:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9787:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9798:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9783:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9783:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9807:6:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9815:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9803:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9803:22:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9776:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9776:50:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9776:50:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "9842:6:34"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "9850:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9835:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9835:22:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9835:22:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9883:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9891:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9879:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9879:15:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9896:6:34"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "9904:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "9866:12:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9866:45:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9866:45:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "9935:6:34"
                                      },
                                      {
                                        "name": "value2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9943:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9931:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9931:19:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9952:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9927:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9927:28:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9957:1:34",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9920:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9920:39:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9920:39:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9968:59:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9984:6:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value2",
                                            "nodeType": "YulIdentifier",
                                            "src": "10000:6:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10008:2:34",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "9996:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9996:15:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10017:2:34",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "10013:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10013:7:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "9992:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9992:29:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9980:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9980:42:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10024:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9976:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9976:51:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9968:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9621:9:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9632:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9640:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9648:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9659:4:34",
                        "type": ""
                      }
                    ],
                    "src": "9493:540:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10118:169:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10164:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10173:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10176:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10166:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10166:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10166:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10139:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10148:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10135:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10135:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10160:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10131:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10131:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "10128:52:34"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10189:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10208:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10202:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10202:16:34"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "10193:5:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "10251:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "10227:23:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10227:30:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10227:30:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10266:15:34",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "10276:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10266:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10084:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10095:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10107:6:34",
                        "type": ""
                      }
                    ],
                    "src": "10038:249:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10421:119:34",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10431:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10443:9:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10454:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10439:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10439:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10431:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10473:9:34"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10484:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10466:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10466:25:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10466:25:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10511:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10522:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10507:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10507:18:34"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "10527:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10500:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10500:34:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10500:34:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10382:9:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10393:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10401:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10412:4:34",
                        "type": ""
                      }
                    ],
                    "src": "10292:248:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10626:103:34",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10672:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10681:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10684:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10674:6:34"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10674:12:34"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10674:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10647:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10656:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10643:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10643:23:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10668:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10639:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10639:32:34"
                          },
                          "nodeType": "YulIf",
                          "src": "10636:52:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10697:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10713:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10707:5:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10707:16:34"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10697:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10592:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10603:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10615:6:34",
                        "type": ""
                      }
                    ],
                    "src": "10545:184:34"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10933:222:34",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10943:23:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10957:3:34",
                                "type": "",
                                "value": "248"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10962:3:34",
                                "type": "",
                                "value": "255"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "10953:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10953:13:34"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10947:2:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10982:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10991:6:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10999:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10987:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10987:15:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10975:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10975:28:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10975:28:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "11023:3:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11028:1:34",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11019:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11019:11:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11036:6:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11044:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11032:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11032:15:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11012:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11012:36:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11012:36:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "11068:3:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11073:1:34",
                                    "type": "",
                                    "value": "2"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11064:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11064:11:34"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "11077:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11057:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11057:27:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11057:27:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "11104:3:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11109:2:34",
                                    "type": "",
                                    "value": "34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11100:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11100:12:34"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "11114:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11093:6:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11093:28:34"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11093:28:34"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11130:19:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11141:3:34"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11146:2:34",
                                "type": "",
                                "value": "66"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11137:3:34"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11137:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "11130:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "10885:3:34",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10890:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10898:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10906:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10914:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "10925:3:34",
                        "type": ""
                      }
                    ],
                    "src": "10734:421:34"
                  }
                ]
              },
              "contents": "{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_contract$_Sodium_$1767t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, value2)\n        calldatacopy(add(tail_1, 32), value1, value2)\n        mstore(add(add(tail_1, value2), 32), 0)\n        tail := add(add(tail_1, and(add(value2, 31), not(31))), 32)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        let _1 := shl(248, 255)\n        mstore(pos, and(value0, _1))\n        mstore(add(pos, 1), and(value1, _1))\n        mstore(add(pos, 2), value2)\n        mstore(add(pos, 34), value3)\n        end := add(pos, 66)\n    }\n}",
              "id": 34,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100a85760003560e01c806320c13b0b1161007157806320c13b0b1461015b578063a3f4df7e1461016e578063bc197c81146101b7578063f23a6e61146101d9578063f653d43c146101f9578063ffa1ad741461020c57600080fd5b806223de29146100ad57806301ffc9a7146100c75780630a1028c4146100ef578063150b7a02146101105780631626ba7e14610148575b600080fd5b6100c56100bb36600461051f565b5050505050505050565b005b6100da6100d53660046105e6565b610230565b60405190151581526020015b60405180910390f35b6101026100fd3660046106ad565b610282565b6040519081526020016100e6565b61012f61011e3660046106ea565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100e6565b61012f61015636600461075d565b61028e565b61012f6101693660046107a9565b61034a565b6101aa6040518060400160405280601881526020017f44656661756c742043616c6c6261636b2048616e646c6572000000000000000081525081565b6040516100e6919061085b565b61012f6101c53660046108b3565b63bc197c8160e01b98975050505050505050565b61012f6101e7366004610951565b63f23a6e6160e01b9695505050505050565b6101026102073660046109cd565b6103a6565b6101aa604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216630271189760e51b148061026157506001600160e01b03198216630a85bd0160e11b145b8061027c57506001600160e01b031982166301ffc9a760e01b145b92915050565b600061027c33836103a6565b60408051602080820186905282518083039091018152818301928390526320c13b0b60e01b9092526000913391839183916320c13b0b916102d59189908990604401610a1d565b602060405180830381865afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610a63565b90506001600160e01b031981166320c13b0b60e01b14610337576000610340565b630b135d3f60e11b5b9695505050505050565b60008033905060006103928288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103a692505050565b506320c13b0b60e01b979650505050505050565b6000807f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020016103ef929190918252602082015260400190565b604051602081830303815290604052805190602001209050601960f81b600160f81b856001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610a80565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040528051906020012091505092915050565b6001600160a01b03811681146104d357600080fd5b50565b60008083601f8401126104e857600080fd5b50813567ffffffffffffffff81111561050057600080fd5b60208301915083602082850101111561051857600080fd5b9250929050565b60008060008060008060008060c0898b03121561053b57600080fd5b8835610546816104be565b97506020890135610556816104be565b96506040890135610566816104be565b955060608901359450608089013567ffffffffffffffff8082111561058a57600080fd5b6105968c838d016104d6565b909650945060a08b01359150808211156105af57600080fd5b506105bc8b828c016104d6565b999c989b5096995094979396929594505050565b6001600160e01b0319811681146104d357600080fd5b6000602082840312156105f857600080fd5b8135610603816105d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261063157600080fd5b813567ffffffffffffffff8082111561064c5761064c61060a565b604051601f8301601f19908116603f011681019082821181831017156106745761067461060a565b8160405283815286602085880101111561068d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156106bf57600080fd5b813567ffffffffffffffff8111156106d657600080fd5b6106e284828501610620565b949350505050565b60008060008060006080868803121561070257600080fd5b853561070d816104be565b9450602086013561071d816104be565b935060408601359250606086013567ffffffffffffffff81111561074057600080fd5b61074c888289016104d6565b969995985093965092949392505050565b60008060006040848603121561077257600080fd5b83359250602084013567ffffffffffffffff81111561079057600080fd5b61079c868287016104d6565b9497909650939450505050565b600080600080604085870312156107bf57600080fd5b843567ffffffffffffffff808211156107d757600080fd5b6107e3888389016104d6565b909650945060208701359150808211156107fc57600080fd5b50610809878288016104d6565b95989497509550505050565b6000815180845260005b8181101561083b5760208185018101518683018201520161081f565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106036020830184610815565b60008083601f84011261088057600080fd5b50813567ffffffffffffffff81111561089857600080fd5b6020830191508360208260051b850101111561051857600080fd5b60008060008060008060008060a0898b0312156108cf57600080fd5b88356108da816104be565b975060208901356108ea816104be565b9650604089013567ffffffffffffffff8082111561090757600080fd5b6109138c838d0161086e565b909850965060608b013591508082111561092c57600080fd5b6109388c838d0161086e565b909650945060808b01359150808211156105af57600080fd5b60008060008060008060a0878903121561096a57600080fd5b8635610975816104be565b95506020870135610985816104be565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109af57600080fd5b6109bb89828a016104d6565b979a9699509497509295939492505050565b600080604083850312156109e057600080fd5b82356109eb816104be565b9150602083013567ffffffffffffffff811115610a0757600080fd5b610a1385828601610620565b9150509250929050565b604081526000610a306040830186610815565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b600060208284031215610a7557600080fd5b8151610603816105d0565b600060208284031215610a9257600080fd5b505191905056fea26469706673582212208bd5ae150548811980a103c815589699f4c185724d34fb78ec49d29f9bf94b7e64736f6c63430008110033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x20C13B0B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x20C13B0B EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0xA3F4DF7E EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xF653D43C EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0xA1028C4 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x148 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC5 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x51F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDA PUSH2 0xD5 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E6 JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x6AD JUMP JUMPDEST PUSH2 0x282 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x6EA JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x156 CALLDATASIZE PUSH1 0x4 PUSH2 0x75D JUMP JUMPDEST PUSH2 0x28E JUMP JUMPDEST PUSH2 0x12F PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0x7A9 JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH2 0x1AA PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x44656661756C742043616C6C6261636B2048616E646C65720000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE6 SWAP2 SWAP1 PUSH2 0x85B JUMP JUMPDEST PUSH2 0x12F PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B3 JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x12F PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x951 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x102 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x1AA PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x312E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x261 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x27C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27C CALLER DUP4 PUSH2 0x3A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE DUP2 DUP4 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH4 0x20C13B0B PUSH1 0xE0 SHL SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 CALLER SWAP2 DUP4 SWAP2 DUP4 SWAP2 PUSH4 0x20C13B0B SWAP2 PUSH2 0x2D5 SWAP2 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x44 ADD PUSH2 0xA1D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0xA63 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x20C13B0B PUSH1 0xE0 SHL EQ PUSH2 0x337 JUMPI PUSH1 0x0 PUSH2 0x340 JUMP JUMPDEST PUSH4 0xB135D3F PUSH1 0xE1 SHL JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH1 0x0 PUSH2 0x392 DUP3 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x3A6 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH4 0x20C13B0B PUSH1 0xE0 SHL SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x60B3CBF8B4A223D68D641B3B6DDF9A298E7F33710CF3D3A9D1146B5A6150FBCA PUSH1 0x0 SHL DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3EF SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF698DA25 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x44F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x473 SWAP2 SWAP1 PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x546 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x556 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x566 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x58A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x596 DUP13 DUP4 DUP14 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BC DUP12 DUP3 DUP13 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x603 DUP2 PUSH2 0x5D0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x64C JUMPI PUSH2 0x64C PUSH2 0x60A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x674 JUMPI PUSH2 0x674 PUSH2 0x60A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6E2 DUP5 DUP3 DUP6 ADD PUSH2 0x620 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x70D DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x71D DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74C DUP9 DUP3 DUP10 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79C DUP7 DUP3 DUP8 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E3 DUP9 DUP4 DUP10 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x809 DUP8 DUP3 DUP9 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x83B JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x81F JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x603 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x815 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x8CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x8DA DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x8EA DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x907 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x913 DUP13 DUP4 DUP14 ADD PUSH2 0x86E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x92C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x938 DUP13 DUP4 DUP14 ADD PUSH2 0x86E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x96A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x975 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x985 DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BB DUP10 DUP3 DUP11 ADD PUSH2 0x4D6 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x9EB DUP2 PUSH2 0x4BE JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA13 DUP6 DUP3 DUP7 ADD PUSH2 0x620 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xA30 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x815 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE DUP4 DUP2 MSTORE DUP4 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP7 ADD AND DUP3 ADD ADD SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x603 DUP2 PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0xD5 0xAE ISZERO SDIV BASEFEE DUP2 NOT DUP1 LOG1 SUB 0xC8 ISZERO PC SWAP7 SWAP10 DELEGATECALL 0xC1 DUP6 PUSH19 0x4D34FB78EC49D29F9BF94B7E64736F6C634300 ADDMOD GT STOP CALLER ",
          "sourceMap": "250:3590:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1251:253:25;;;;;;:::i;:::-;;;;;;;;;;;;1510:350;;;;;;:::i;:::-;;:::i;:::-;;;2263:14:34;;2256:22;2238:41;;2226:2;2211:18;1510:350:25;;;;;;;;1818:175:24;;;;;;:::i;:::-;;:::i;:::-;;;3616:25:34;;;3604:2;3589:18;1818:175:24;3470:177:34;1064:181:25;;;;;;:::i;:::-;-1:-1:-1;;;1064:181:25;;;;;;;;;;;-1:-1:-1;;;;;;4573:33:34;;;4555:52;;4543:2;4528:18;1064:181:25;4411:202:34;3432:406:24;;;;;;:::i;:::-;;:::i;1225:435::-;;;;;;:::i;:::-;;:::i;518:56:25:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;832:226::-;;;;;;:::i;:::-;-1:-1:-1;;;832:226:25;;;;;;;;;;;627:199;;;;;;:::i;:::-;-1:-1:-1;;;627:199:25;;;;;;;;;2209:494:24;;;;;;:::i;:::-;;:::i;580:40:25:-;;;;;;;;;;;;;;;-1:-1:-1;;;580:40:25;;;;;1510:350;1637:4;-1:-1:-1;;;;;;1676:53:25;;-1:-1:-1;;;1676:53:25;;:121;;-1:-1:-1;;;;;;;1745:52:25;;-1:-1:-1;;;1745:52:25;1676:121;:177;;;-1:-1:-1;;;;;;;1813:40:25;;-1:-1:-1;;;1813:40:25;1676:177;1657:196;1510:350;-1:-1:-1;;1510:350:25:o;1818:175:24:-;1899:7;1925:61;1964:10;1978:7;1925:23;:61::i;3432:406::-;3695:21;;;;;;;3616:25:34;;;3695:21:24;;;;;;;;;;3589:18:34;;;3695:21:24;;;;-1:-1:-1;;;3655:95:24;;;3549:6;;3619:10;;3549:6;;3619:10;;3655:26;;:95;;3730:10;;;;3655:95;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3640:110;-1:-1:-1;;;;;;;3768:28:24;;-1:-1:-1;;;3768:28:24;3767:64;;3829:1;3767:64;;;-1:-1:-1;;;3767:64:24;3760:71;3432:406;-1:-1:-1;;;;;;3432:406:24:o;1225:435::-;1352:6;1370:9;1397:10;1370:39;;1419:19;1441:34;1465:2;1469:5;;1441:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1441:23:24;;-1:-1:-1;;;1441:34:24:i;:::-;-1:-1:-1;;;;1634:19:24;1225:435;-1:-1:-1;;;;;;;1225:435:24:o;2209:494::-;2318:7;2337:23;497:66;2397:17;;2426:7;2416:18;;;;;;2386:49;;;;;;;;10466:25:34;;;10522:2;10507:18;;10500:34;10454:2;10439:18;;10292:248;2386:49:24;;;;;;;;;;;;;2363:82;;;;;;2337:108;;2546:4;2539:12;;2580:4;2573:12;;2607:2;-1:-1:-1;;;;;2607:18:24;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2501:181;;-1:-1:-1;;;;;;10987:15:34;;;2501:181:24;;;10975:28:34;11032:15;;;;11019:11;;;11012:36;11064:11;;;11057:27;11100:12;;;11093:28;;;11137:12;;2501:181:24;;;;;;;;;;;;2474:222;;;;;;2455:241;;;2209:494;;;;:::o;14:131:34:-;-1:-1:-1;;;;;89:31:34;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:347::-;201:8;211:6;265:3;258:4;250:6;246:17;242:27;232:55;;283:1;280;273:12;232:55;-1:-1:-1;306:20:34;;349:18;338:30;;335:50;;;381:1;378;371:12;335:50;418:4;410:6;406:17;394:29;;470:3;463:4;454:6;446;442:19;438:30;435:39;432:59;;;487:1;484;477:12;432:59;150:347;;;;;:::o;502:1205::-;628:6;636;644;652;660;668;676;684;737:3;725:9;716:7;712:23;708:33;705:53;;;754:1;751;744:12;705:53;793:9;780:23;812:31;837:5;812:31;:::i;:::-;862:5;-1:-1:-1;919:2:34;904:18;;891:32;932:33;891:32;932:33;:::i;:::-;984:7;-1:-1:-1;1043:2:34;1028:18;;1015:32;1056:33;1015:32;1056:33;:::i;:::-;1108:7;-1:-1:-1;1162:2:34;1147:18;;1134:32;;-1:-1:-1;1217:3:34;1202:19;;1189:33;1241:18;1271:14;;;1268:34;;;1298:1;1295;1288:12;1268:34;1337:58;1387:7;1378:6;1367:9;1363:22;1337:58;:::i;:::-;1414:8;;-1:-1:-1;1311:84:34;-1:-1:-1;1502:3:34;1487:19;;1474:33;;-1:-1:-1;1519:16:34;;;1516:36;;;1548:1;1545;1538:12;1516:36;;1587:60;1639:7;1628:8;1617:9;1613:24;1587:60;:::i;:::-;502:1205;;;;-1:-1:-1;502:1205:34;;-1:-1:-1;502:1205:34;;;;;;1666:8;-1:-1:-1;;;502:1205:34:o;1712:131::-;-1:-1:-1;;;;;;1786:32:34;;1776:43;;1766:71;;1833:1;1830;1823:12;1848:245;1906:6;1959:2;1947:9;1938:7;1934:23;1930:32;1927:52;;;1975:1;1972;1965:12;1927:52;2014:9;2001:23;2033:30;2057:5;2033:30;:::i;:::-;2082:5;1848:245;-1:-1:-1;;;1848:245:34:o;2290:127::-;2351:10;2346:3;2342:20;2339:1;2332:31;2382:4;2379:1;2372:15;2406:4;2403:1;2396:15;2422:718;2464:5;2517:3;2510:4;2502:6;2498:17;2494:27;2484:55;;2535:1;2532;2525:12;2484:55;2571:6;2558:20;2597:18;2634:2;2630;2627:10;2624:36;;;2640:18;;:::i;:::-;2715:2;2709:9;2683:2;2769:13;;-1:-1:-1;;2765:22:34;;;2789:2;2761:31;2757:40;2745:53;;;2813:18;;;2833:22;;;2810:46;2807:72;;;2859:18;;:::i;:::-;2899:10;2895:2;2888:22;2934:2;2926:6;2919:18;2980:3;2973:4;2968:2;2960:6;2956:15;2952:26;2949:35;2946:55;;;2997:1;2994;2987:12;2946:55;3061:2;3054:4;3046:6;3042:17;3035:4;3027:6;3023:17;3010:54;3108:1;3101:4;3096:2;3088:6;3084:15;3080:26;3073:37;3128:6;3119:15;;;;;;2422:718;;;;:::o;3145:320::-;3213:6;3266:2;3254:9;3245:7;3241:23;3237:32;3234:52;;;3282:1;3279;3272:12;3234:52;3322:9;3309:23;3355:18;3347:6;3344:30;3341:50;;;3387:1;3384;3377:12;3341:50;3410:49;3451:7;3442:6;3431:9;3427:22;3410:49;:::i;:::-;3400:59;3145:320;-1:-1:-1;;;;3145:320:34:o;3652:754::-;3749:6;3757;3765;3773;3781;3834:3;3822:9;3813:7;3809:23;3805:33;3802:53;;;3851:1;3848;3841:12;3802:53;3890:9;3877:23;3909:31;3934:5;3909:31;:::i;:::-;3959:5;-1:-1:-1;4016:2:34;4001:18;;3988:32;4029:33;3988:32;4029:33;:::i;:::-;4081:7;-1:-1:-1;4135:2:34;4120:18;;4107:32;;-1:-1:-1;4190:2:34;4175:18;;4162:32;4217:18;4206:30;;4203:50;;;4249:1;4246;4239:12;4203:50;4288:58;4338:7;4329:6;4318:9;4314:22;4288:58;:::i;:::-;3652:754;;;;-1:-1:-1;3652:754:34;;-1:-1:-1;4365:8:34;;4262:84;3652:754;-1:-1:-1;;;3652:754:34:o;4618:477::-;4697:6;4705;4713;4766:2;4754:9;4745:7;4741:23;4737:32;4734:52;;;4782:1;4779;4772:12;4734:52;4818:9;4805:23;4795:33;;4879:2;4868:9;4864:18;4851:32;4906:18;4898:6;4895:30;4892:50;;;4938:1;4935;4928:12;4892:50;4977:58;5027:7;5018:6;5007:9;5003:22;4977:58;:::i;:::-;4618:477;;5054:8;;-1:-1:-1;4951:84:34;;-1:-1:-1;;;;4618:477:34:o;5100:717::-;5190:6;5198;5206;5214;5267:2;5255:9;5246:7;5242:23;5238:32;5235:52;;;5283:1;5280;5273:12;5235:52;5323:9;5310:23;5352:18;5393:2;5385:6;5382:14;5379:34;;;5409:1;5406;5399:12;5379:34;5448:58;5498:7;5489:6;5478:9;5474:22;5448:58;:::i;:::-;5525:8;;-1:-1:-1;5422:84:34;-1:-1:-1;5613:2:34;5598:18;;5585:32;;-1:-1:-1;5629:16:34;;;5626:36;;;5658:1;5655;5648:12;5626:36;;5697:60;5749:7;5738:8;5727:9;5723:24;5697:60;:::i;:::-;5100:717;;;;-1:-1:-1;5776:8:34;-1:-1:-1;;;;5100:717:34:o;5822:423::-;5864:3;5902:5;5896:12;5929:6;5924:3;5917:19;5954:1;5964:162;5978:6;5975:1;5972:13;5964:162;;;6040:4;6096:13;;;6092:22;;6086:29;6068:11;;;6064:20;;6057:59;5993:12;5964:162;;;5968:3;6171:1;6164:4;6155:6;6150:3;6146:16;6142:27;6135:38;6234:4;6227:2;6223:7;6218:2;6210:6;6206:15;6202:29;6197:3;6193:39;6189:50;6182:57;;;5822:423;;;;:::o;6250:220::-;6399:2;6388:9;6381:21;6362:4;6419:45;6460:2;6449:9;6445:18;6437:6;6419:45;:::i;6475:367::-;6538:8;6548:6;6602:3;6595:4;6587:6;6583:17;6579:27;6569:55;;6620:1;6617;6610:12;6569:55;-1:-1:-1;6643:20:34;;6686:18;6675:30;;6672:50;;;6718:1;6715;6708:12;6672:50;6755:4;6747:6;6743:17;6731:29;;6815:3;6808:4;6798:6;6795:1;6791:14;6783:6;6779:27;6775:38;6772:47;6769:67;;;6832:1;6829;6822:12;6847:1338;7007:6;7015;7023;7031;7039;7047;7055;7063;7116:3;7104:9;7095:7;7091:23;7087:33;7084:53;;;7133:1;7130;7123:12;7084:53;7172:9;7159:23;7191:31;7216:5;7191:31;:::i;:::-;7241:5;-1:-1:-1;7298:2:34;7283:18;;7270:32;7311:33;7270:32;7311:33;:::i;:::-;7363:7;-1:-1:-1;7421:2:34;7406:18;;7393:32;7444:18;7474:14;;;7471:34;;;7501:1;7498;7491:12;7471:34;7540:70;7602:7;7593:6;7582:9;7578:22;7540:70;:::i;:::-;7629:8;;-1:-1:-1;7514:96:34;-1:-1:-1;7717:2:34;7702:18;;7689:32;;-1:-1:-1;7733:16:34;;;7730:36;;;7762:1;7759;7752:12;7730:36;7801:72;7865:7;7854:8;7843:9;7839:24;7801:72;:::i;:::-;7892:8;;-1:-1:-1;7775:98:34;-1:-1:-1;7980:3:34;7965:19;;7952:33;;-1:-1:-1;7997:16:34;;;7994:36;;;8026:1;8023;8016:12;8190:823;8296:6;8304;8312;8320;8328;8336;8389:3;8377:9;8368:7;8364:23;8360:33;8357:53;;;8406:1;8403;8396:12;8357:53;8445:9;8432:23;8464:31;8489:5;8464:31;:::i;:::-;8514:5;-1:-1:-1;8571:2:34;8556:18;;8543:32;8584:33;8543:32;8584:33;:::i;:::-;8636:7;-1:-1:-1;8690:2:34;8675:18;;8662:32;;-1:-1:-1;8741:2:34;8726:18;;8713:32;;-1:-1:-1;8796:3:34;8781:19;;8768:33;8824:18;8813:30;;8810:50;;;8856:1;8853;8846:12;8810:50;8895:58;8945:7;8936:6;8925:9;8921:22;8895:58;:::i;:::-;8190:823;;;;-1:-1:-1;8190:823:34;;-1:-1:-1;8190:823:34;;8972:8;;8190:823;-1:-1:-1;;;8190:823:34:o;9018:470::-;9110:6;9118;9171:2;9159:9;9150:7;9146:23;9142:32;9139:52;;;9187:1;9184;9177:12;9139:52;9226:9;9213:23;9245:31;9270:5;9245:31;:::i;:::-;9295:5;-1:-1:-1;9351:2:34;9336:18;;9323:32;9378:18;9367:30;;9364:50;;;9410:1;9407;9400:12;9364:50;9433:49;9474:7;9465:6;9454:9;9450:22;9433:49;:::i;:::-;9423:59;;;9018:470;;;;;:::o;9493:540::-;9696:2;9685:9;9678:21;9659:4;9722:45;9763:2;9752:9;9748:18;9740:6;9722:45;:::i;:::-;9815:9;9807:6;9803:22;9798:2;9787:9;9783:18;9776:50;9850:6;9842;9835:22;9904:6;9896;9891:2;9883:6;9879:15;9866:45;9957:1;9952:2;9943:6;9935;9931:19;9927:28;9920:39;10024:2;10017;10013:7;10008:2;10000:6;9996:15;9992:29;9984:6;9980:42;9976:51;9968:59;;;9493:540;;;;;;:::o;10038:249::-;10107:6;10160:2;10148:9;10139:7;10135:23;10131:32;10128:52;;;10176:1;10173;10166:12;10128:52;10208:9;10202:16;10227:30;10251:5;10227:30;:::i;10545:184::-;10615:6;10668:2;10656:9;10647:7;10643:23;10639:32;10636:52;;;10684:1;10681;10674:12;10636:52;-1:-1:-1;10707:16:34;;10545:184;-1:-1:-1;10545:184:34:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "553400",
            "executionCost": "587",
            "totalCost": "553987"
          },
          "external": {
            "NAME()": "infinite",
            "VERSION()": "infinite",
            "getMessageHash(bytes)": "infinite",
            "getMessageHashForSodium(address,bytes)": "infinite",
            "isValidSignature(bytes,bytes)": "infinite",
            "isValidSignature(bytes32,bytes)": "infinite",
            "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "infinite",
            "onERC1155Received(address,address,uint256,uint256,bytes)": "infinite",
            "onERC721Received(address,address,uint256,bytes)": "infinite",
            "supportsInterface(bytes4)": "533",
            "tokensReceived(address,address,address,uint256,bytes,bytes)": "infinite"
          }
        },
        "methodIdentifiers": {
          "NAME()": "a3f4df7e",
          "VERSION()": "ffa1ad74",
          "getMessageHash(bytes)": "0a1028c4",
          "getMessageHashForSodium(address,bytes)": "f653d43c",
          "isValidSignature(bytes,bytes)": "20c13b0b",
          "isValidSignature(bytes32,bytes)": "1626ba7e",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
          "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
          "onERC721Received(address,address,uint256,bytes)": "150b7a02",
          "supportsInterface(bytes4)": "01ffc9a7",
          "tokensReceived(address,address,address,uint256,bytes,bytes)": "0023de29"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Sodium\",\"name\":\"so\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHashForSodium\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMessageHash(bytes)\":{\"details\":\"Returns hash of a message that can be signed by owners.\",\"params\":{\"message\":\"Message that should be hashed\"},\"returns\":{\"_0\":\"Message hash.\"}},\"getMessageHashForSodium(address,bytes)\":{\"details\":\"Returns hash of a message that can be signed by owners.\",\"params\":{\"message\":\"Message that should be hashed\",\"so\":\"Sodium to which the message is targeted\"},\"returns\":{\"_0\":\"Message hash.\"}},\"isValidSignature(bytes,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data.\",\"params\":{\"_data\":\"Arbitrary length data signed on the behalf of address(msg.sender)\",\"_signature\":\"Signature byte array associated with _data\"},\"returns\":{\"_0\":\"a bool upon valid or invalid signature with corresponding _data\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data.       The save does not implement the interface since `checkSignatures` is not a view method.       The method will not perform any state changes (see parameters of `checkSignatures`)\",\"params\":{\"_dataHash\":\"Hash of the data signed on the behalf of address(msg.sender)\",\"_signature\":\"Signature byte array associated with _dataHash\"},\"returns\":{\"_0\":\"a bool upon valid or invalid signature with corresponding _dataHash\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isValidSignature(bytes,bytes)\":{\"notice\":\"Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Implementation of updated EIP-1271See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handler/CompatibilityFallbackHandler2.sol\":\"CompatibilityFallbackHandler2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Sodium.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/SessionManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/GuardManager.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/EtherPaymentFallback.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./external/GnosisSafeMath.sol\\\";\\nimport \\\"./eip4337/core/BaseAccount.sol\\\";\\nimport \\\"./eip4337/interfaces/IEntryPoint.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./base/NonceManager.sol\\\";\\nimport \\\"./common/Enum.sol\\\";\\n\\nstruct Transaction {\\n    Enum.Operation op; // Performs delegatecall\\n    bool revertOnError; // Reverts transaction bundle if tx fails\\n    uint256 gasLimit; // Maximum gas to be forwarded\\n    address target; // Address of the contract to call\\n    uint256 value; // Amount of ETH to pass with the call\\n    bytes data; // calldata to pass\\n}\\n\\ncontract Sodium is\\n    Singleton,\\n    ModuleManager,\\n    SessionManager,\\n    NonceManager,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    GuardManager,\\n    BaseAccount,\\n    EtherPaymentFallback\\n{\\n    using ECDSA for bytes32;\\n    using GnosisSafeMath for uint256;\\n\\n    string public constant VERSION = \\\"0.0.1\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    event SodiumSetup(\\n        address indexed sessionOwner,\\n        bytes4 platform,\\n        address fallbackHandler\\n    );\\n\\n    bool private initialized;\\n    address public immutable _entryPoint;\\n\\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\\n    constructor(IEntryPoint entryPoint) {\\n        _entryPoint = address(entryPoint);\\n    }\\n\\n    function setup(\\n        address _sessionOwner,\\n        bytes4 _platform,\\n        address _fallbackHandler\\n    ) public {\\n        require(!initialized, \\\"Already initialized\\\");\\n        require(_fallbackHandler != address(0), \\\"Required fallback handler\\\");\\n        initialized = true;\\n        internalSetFallbackHandler(_fallbackHandler);\\n        internalAddSession(_sessionOwner, _platform);\\n    }\\n\\n    /**\\n     * @notice Returns the next nonce of the default nonce space\\n     * @dev The default nonce space is 0x00\\n     * @return The next nonce\\n     */\\n    function nonce() public view override returns (uint256) {\\n        return readNonce(0);\\n    }\\n\\n    function entryPoint() public view override returns (IEntryPoint) {\\n        return IEntryPoint(_entryPoint);\\n    }\\n\\n    function upgradeTo(Sodium newSingleton) external authorized {\\n        require(newSingleton.isSodiumSingleton(), \\\"Not a Sodium singleton\\\");\\n        _setSingleton(address(newSingleton));\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal override returns (uint256 validationData) {\\n        // validate the signature is valid for this message.\\n    }\\n\\n    /**\\n     * validate the current nonce matches the UserOperation nonce.\\n     * then it should update the account's state to prevent replay of this UserOperation.\\n     * called only if initCode is empty (since \\\"nonce\\\" field is used as \\\"salt\\\" on account creation)\\n     * @param userOp the op to validate.\\n     */\\n    function _validateAndUpdateNonce(\\n        UserOperation calldata userOp\\n    ) internal override {\\n        // _validateNonce(userOp.nonce);\\n    }\\n\\n    function _requireFromAdmin() internal view {\\n        require(\\n            msg.sender == address(this) || msg.sender == address(_entryPoint),\\n            \\\"only entryPoint or wallet self\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Allow eip-4337 entryPoint or wallet self to execute an action\\n     * @dev Relayers must ensure that the gasLimit specified for each transaction\\n     *      is acceptable to them. A user could specify large enough that it could\\n     *      consume all the gas available.\\n     * @param _txs Transactions to process\\n     */\\n    function execute(Transaction[] memory _txs) public {\\n        // only allow eip-4337 entryPoint or wallet self to execute an action\\n        _requireFromAdmin();\\n        // Execute the transactions\\n        _execute(_txs);\\n    }\\n\\n    /**\\n     * @notice Executes a list of transactions\\n     * @param _txs  Transactions to execute\\n     */\\n    function _execute(Transaction[] memory _txs) private {\\n        // Execute transaction\\n        for (uint256 i = 0; i < _txs.length; i++) {\\n            Transaction memory transaction = _txs[i];\\n            bool success;\\n            bytes memory result;\\n            require(\\n                gasleft() >= transaction.gasLimit,\\n                \\\"Sodium: NOT_ENOUGH_GAS\\\"\\n            );\\n            if (transaction.op == Enum.Operation.DelegateCall) {\\n                (success, result) = transaction.target.delegatecall{\\n                    gas: transaction.gasLimit == 0\\n                        ? gasleft()\\n                        : transaction.gasLimit\\n                }(transaction.data);\\n            } else {\\n                (success, result) = transaction.target.call{\\n                    value: transaction.value,\\n                    gas: transaction.gasLimit == 0\\n                        ? gasleft()\\n                        : transaction.gasLimit\\n                }(transaction.data);\\n            }\\n            if (!success && transaction.revertOnError) {\\n                assembly {\\n                    revert(add(result, 0x20), mload(result))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the chain id used by this contract.\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xcc83f84329bcebdffcb13e1dd539a106c670ecf8494c85f91a0aae00a87aec17\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\ncontract Executor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5fb71b98bb583620d71f6ed9704e8d6a3179663fed1cea0eded02bcaa1ee8185\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    function internalSetFallbackHandler(address handler) internal {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /// @dev Allows to add a contract to handle fallback calls.\\n    ///      Only fallback calls without value and with data will be forwarded.\\n    ///      This can only be done via a Safe transaction.\\n    /// @param handler contract to handle fallbacks calls.\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1be9f0f3e80a78134c2e3a026c6a14759785bd35d135e87a4a025aeb6742791f\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\ninterface Guard {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address guard);\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Set a guard that checks transactions before execution\\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\\n    function setGuard(address guard) external authorized {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53a532a31f9632d5a73ad0df56f05bd2b66a2f781f571eb48d00367d370707f9\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\ncontract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    mapping(address => bool) internal modules;\\n\\n    /// @dev Allows to add a module to the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Enables the module `module` for the Safe.\\n    /// @param module Module to be whitelisted.\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(!modules[module], \\\"SDMM101\\\");\\n        modules[module] = true;\\n        emit EnabledModule(module);\\n    }\\n\\n    /// @dev Allows to remove a module from the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Disables the module `module` for the Safe.\\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(\\n        address prevModule,\\n        address module\\n    ) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(modules[module], \\\"SDMM101\\\");\\n        modules[module] = false;\\n        emit DisabledModule(module);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(\\n            modules[msg.sender],\\n            \\\"SDMM104\\\"\\n        );\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, gasleft());\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return modules[module];\\n    }\\n}\\n\",\"keccak256\":\"0x2165410be0398900eb844e30693f6ee1268d95364effce1de43e48205d5c8ce2\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/NonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../common/StorageHelper.sol\\\";\\nimport \\\"../interfaces/INonceManager.sol\\\";\\n\\ncontract NonceManager is SelfAuthorized, INonceManager {\\n    // NONCE_KEY = keccak256(\\\"org.sodium.base.nonce\\\");\\n    bytes32 private constant NONCE_KEY =\\n        bytes32(\\n            0x1ec7ef52f8bbd89fae80c55c6884305d3fb5ef41070638221dac337a4377b7df\\n        );\\n\\n    uint256 private constant NONCE_BITS = 96;\\n    bytes32 private constant NONCE_MASK = bytes32((1 << NONCE_BITS) - 1);\\n\\n    /**\\n     * @notice Decodes a raw nonce\\n     * @dev A raw nonce is encoded using the first 160 bits for the space\\n     *  and the last 96 bits for the nonce\\n     * @param _rawNonce Nonce to be decoded\\n     * @return _space The nonce space of the raw nonce\\n     * @return _nonce The nonce of the raw nonce\\n     */\\n    function _decodeNonce(\\n        uint256 _rawNonce\\n    ) private pure returns (uint256 _space, uint256 _nonce) {\\n        _nonce = uint256(bytes32(_rawNonce) & NONCE_MASK);\\n        _space = _rawNonce >> NONCE_BITS;\\n    }\\n\\n    /**\\n     * @notice Returns the next nonce of the given nonce space\\n     * @param _space Nonce space, each space keeps an independent nonce count\\n     * @return The next nonce\\n     */\\n    function readNonce(uint256 _space) public view returns (uint256) {\\n        return\\n            uint256(StorageHelper.readBytes32Map(NONCE_KEY, bytes32(_space)));\\n    }\\n\\n    /**\\n     * @notice Changes the next nonce of the given nonce space\\n     * @param _space Nonce space, each space keeps an independent nonce count\\n     * @param _nonce Nonce to write on the space\\n     */\\n    function _writeNonce(uint256 _space, uint256 _nonce) private {\\n        StorageHelper.writeBytes32Map(\\n            NONCE_KEY,\\n            bytes32(_space),\\n            bytes32(_nonce)\\n        );\\n    }\\n\\n    /**\\n     * @notice Verify if a nonce is valid\\n     * @param _rawNonce Nonce to validate (may contain an encoded space)\\n     * @dev A valid nonce must be above the last one used\\n     *   with a maximum delta of 100\\n     */\\n    function _validateNonce(uint256 _rawNonce) internal {\\n        // Retrieve current nonce for this wallet\\n        (uint256 space, uint256 providedNonce) = _decodeNonce(_rawNonce);\\n        uint256 currentNonce = readNonce(space);\\n\\n        // Verify if nonce is valid\\n        require(providedNonce == currentNonce, \\\"INVALID_NONCE\\\");\\n\\n        // Update signature nonce\\n        uint256 newNonce = providedNonce + 1;\\n        _writeNonce(space, newNonce);\\n        emit NonceChange(space, newNonce);\\n    }\\n}\\n\",\"keccak256\":\"0xe2ffeccd30c6b4fbea15c1470038659105d8bf80fd6d401375d63c0faa67c9d9\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/SessionManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\ncontract SessionManager is SelfAuthorized {\\n    event AddedSession(address owner, bytes4 sessionKey);\\n    event RemovedSession(address owner, bytes4 sessionKey);\\n\\n    bytes4 internal constant sessionPlatformPC = bytes4(keccak256(\\\"pc\\\"));\\n    bytes4 internal constant sessionPlatformMobile =\\n        bytes4(keccak256(\\\"mobile\\\"));\\n    bytes4 internal constant sessionPlatformWeb = bytes4(keccak256(\\\"web\\\"));\\n\\n    // kecc256(\\\"pc|mobile|web\\\") => session pubkey address\\n    mapping(bytes4 => address) internal sessionByPlatform;\\n\\n    function checkPlatform(bytes4 platform) internal pure {\\n        require(\\n            platform == sessionPlatformPC ||\\n                platform == sessionPlatformMobile ||\\n                platform == sessionPlatformWeb,\\n            \\\"invalid platform\\\"\\n        );\\n    }\\n\\n    function internalAddSession(address owner, bytes4 platform) internal {\\n        checkPlatform(platform);\\n        sessionByPlatform[platform] = owner;\\n        emit AddedSession(owner, platform);\\n    }\\n\\n    function addSession(address owner, bytes4 platform) public authorized {\\n        if (sessionByPlatform[platform] != address(0)) {\\n            removeSession(sessionByPlatform[platform], platform);\\n        }\\n        internalAddSession(owner, platform);\\n    }\\n\\n    function removeSession(address owner, bytes4 platform) public authorized {\\n        require(\\n            sessionByPlatform[platform] == owner,\\n            \\\"platform session expired\\\"\\n        );\\n        sessionByPlatform[platform] = address(0);\\n        emit RemovedSession(owner, platform);\\n    }\\n\\n    function isSessionOwner(address owner) public view returns (bool) {\\n        if (owner == address(0)) {\\n            return false;\\n        }\\n        address[] memory owners = getSessionOwners();\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owner == owners[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of session owners.\\n    function getSessionOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](3);\\n        array[0] = sessionByPlatform[sessionPlatformPC];\\n        array[1] = sessionByPlatform[sessionPlatformMobile];\\n        array[2] = sessionByPlatform[sessionPlatformWeb];\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x5b0468f441be0d1f6a048b523a091f21ef3bda1ca9a63527ee300c08bad3937a\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/EtherPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract EtherPaymentFallback {\\n    event NativeTokenReceived(address indexed sender, uint256 value);\\n\\n    /// @dev Fallback function accepts Ether transactions.\\n    receive() external payable {\\n        emit NativeTokenReceived(msg.sender, msg.value);\\n    }\\n}\",\"keccak256\":\"0x332fdf4f747e35befb5b4a19a595e6c5f87554e6b7c899e5d609bc2b9b7a1f2e\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SelfAuthorized - authorizes current contract to perform actions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x59d36efca578b75541a776f62a0d0ef03712fc27b6647c3915c14b572106d7bc\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./SelfAuthorized.sol\\\";\\n\\ncontract Singleton is SelfAuthorized {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    // @deprecated\\n    address private _singleton;\\n\\n    /**\\n     * @notice Updates the Wallet implementation\\n     * @param _imp New implementation address\\n     * @dev The wallet implementation is stored on the storage slot\\n     *   defined by the address of the wallet itself\\n     *   WARNING updating this value may break the wallet and users\\n     *   must be confident that the new implementation is safe.\\n     */\\n    function _setSingleton(address _imp) internal {\\n        assembly {\\n            sstore(address(), _imp)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the Wallet implementation\\n     * @return _imp The address of the current Wallet implementation\\n     */\\n    function getSingleton() external view returns (address _imp) {\\n        assembly {\\n            _imp := sload(address())\\n        }\\n    }\\n\\n    function isSodiumSingleton() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1f2a863d0af458b35b64c6b64919a27e44f7db20cc10c1c55bdf1a64c1d9158b\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/StorageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nlibrary StorageHelper {\\n    function writeBytes32(bytes32 _key, bytes32 _val) internal {\\n        assembly {\\n            sstore(_key, _val)\\n        }\\n    }\\n\\n    function readBytes32(bytes32 _key) internal view returns (bytes32 val) {\\n        assembly {\\n            val := sload(_key)\\n        }\\n    }\\n\\n    function writeBytes32Map(\\n        bytes32 _key,\\n        bytes32 _subKey,\\n        bytes32 _val\\n    ) internal {\\n        bytes32 key = keccak256(abi.encode(_key, _subKey));\\n        assembly {\\n            sstore(key, _val)\\n        }\\n    }\\n\\n    function readBytes32Map(bytes32 _key, bytes32 _subKey)\\n        internal\\n        view\\n        returns (bytes32 val)\\n    {\\n        bytes32 key = keccak256(abi.encode(_key, _subKey));\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d73862ba5905b3ed2cf152f4f54e131246bd405ed428afdd0072af2909400fa\",\"license\":\"LGPL-3.0-only\"},\"contracts/eip4337/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\n * specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * return the account nonce.\\n     * subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)\\n     */\\n    function nonce() public view virtual returns (uint256);\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external override virtual returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        if (userOp.initCode.length == 0) {\\n            _validateAndUpdateNonce(userOp);\\n        }\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\n    internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * validate the current nonce matches the UserOperation nonce.\\n     * then it should update the account's state to prevent replay of this UserOperation.\\n     * called only if initCode is empty (since \\\"nonce\\\" field is used as \\\"salt\\\" on account creation)\\n     * @param userOp the op to validate.\\n     */\\n    function _validateAndUpdateNonce(UserOperation calldata userOp) internal virtual;\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\",\"keccak256\":\"0xd4b9b6443593b317a19ce3371b82bb3f1698627050435235c462921f5114cb67\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\nstruct ValidationData {\\n    address aggregator;\\n    uint48 validAfter;\\n    uint48 validUntil;\\n}\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\nfunction _parseValidationData(\\n    uint validationData\\n) pure returns (ValidationData memory data) {\\n    address aggregator = address(uint160(validationData));\\n    uint48 validUntil = uint48(validationData >> 160);\\n    if (validUntil == 0) {\\n        validUntil = type(uint48).max;\\n    }\\n    uint48 validAfter = uint48(validationData >> (48 + 160));\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n// intersect account and paymaster ranges.\\nfunction _intersectTimeRange(\\n    uint256 validationData,\\n    uint256 paymasterValidationData\\n) pure returns (ValidationData memory) {\\n    ValidationData memory accountValidationData = _parseValidationData(\\n        validationData\\n    );\\n    ValidationData memory pmValidationData = _parseValidationData(\\n        paymasterValidationData\\n    );\\n    address aggregator = accountValidationData.aggregator;\\n    if (aggregator == address(0)) {\\n        aggregator = pmValidationData.aggregator;\\n    }\\n    uint48 validAfter = accountValidationData.validAfter;\\n    uint48 validUntil = accountValidationData.validUntil;\\n    uint48 pmValidAfter = pmValidationData.validAfter;\\n    uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n    if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n    if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\nfunction _packValidationData(\\n    ValidationData memory data\\n) pure returns (uint256) {\\n    return\\n        uint160(data.aggregator) |\\n        (uint256(data.validUntil) << 160) |\\n        (uint256(data.validAfter) << (160 + 48));\\n}\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\nfunction _packValidationData(\\n    bool sigFailed,\\n    uint48 validUntil,\\n    uint48 validAfter\\n) pure returns (uint256) {\\n    return\\n        (sigFailed ? 1 : 0) |\\n        (uint256(validUntil) << 160) |\\n        (uint256(validAfter) << (160 + 48));\\n}\\n\",\"keccak256\":\"0x10e419b300e0ea69db85a648605e874fd73df2dc5f36a56bea8f6601455487fc\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager {\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address indexed paymaster,\\n        uint256 nonce,\\n        bool success,\\n        uint256 actualGasCost,\\n        uint256 actualGasUsed\\n    );\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address factory,\\n        address paymaster\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce,\\n        bytes revertReason\\n    );\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(\\n        ReturnInfo returnInfo,\\n        StakeInfo senderInfo,\\n        StakeInfo factoryInfo,\\n        StakeInfo paymasterInfo\\n    );\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(\\n        ReturnInfo returnInfo,\\n        StakeInfo senderInfo,\\n        StakeInfo factoryInfo,\\n        StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo\\n    );\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(\\n        uint256 preOpGas,\\n        uint256 paid,\\n        uint48 validAfter,\\n        uint48 validUntil,\\n        bool targetSuccess,\\n        bytes targetResult\\n    );\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(\\n        UserOperation[] calldata ops,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(\\n        UserOperation calldata userOp\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(\\n        UserOperation calldata op,\\n        address target,\\n        bytes calldata targetCallData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x64516675039e845ff5f86e22522ba67bc474058910f537df4a59cdb40712805a\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"contracts/eip4337/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        // copy directly the userOp from calldata up to (but not including) the signature.\\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\\n        // than referencing each field separately.\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xf67381bb53c148ce587a74acdf576cc05d641a952180d801ac982898de30810e\",\"license\":\"GPL-3.0\"},\"contracts/external/GnosisSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title GnosisSafeMath\\n * @dev Math operations with safety checks that revert on error\\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\\n * TODO: remove once open zeppelin update to solc 0.5.0\\n */\\nlibrary GnosisSafeMath {\\n    /**\\n     * @dev Multiplies two numbers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x036a65e5f43cee60a50b5cebf08bbf425b9f32c793dcaf9f4f48097f06a5db62\",\"license\":\"LGPL-3.0-only\"},\"contracts/handler/CompatibilityFallbackHandler2.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./DefaultCallbackHandler.sol\\\";\\nimport \\\"../interfaces/ISignatureValidator.sol\\\";\\nimport \\\"../Sodium.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract CompatibilityFallbackHandler2 is\\n    DefaultCallbackHandler,\\n    ISignatureValidator\\n{\\n    using ECDSA for bytes32;\\n    //keccak256(\\n    //    \\\"SafeMessage(bytes message)\\\"\\n    //);\\n    bytes32 private constant SAFE_MSG_TYPEHASH =\\n        0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\\n    bytes4 internal constant SIMULATE_SELECTOR =\\n        bytes4(keccak256(\\\"simulate(address,bytes)\\\"));\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n    bytes4 internal constant UPDATED_MAGIC_VALUE = 0x1626ba7e;\\n\\n    /**\\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\\n     * @dev Should return whether the signature provided is valid for the provided data.\\n     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _data\\n     * @return a bool upon valid or invalid signature with corresponding _data\\n     */\\n    function isValidSignature(\\n        bytes calldata _data,\\n        bytes calldata _signature\\n    ) public view override returns (bytes4) {\\n        Sodium so = Sodium(payable(msg.sender));\\n        bytes32 messageHash = getMessageHashForSodium(so, _data);\\n        // require(\\n        //     so.isSessionOwner(messageHash.recover(_signature)),\\n        //     \\\"wallet: wrong signature\\\"\\n        // );\\n        return EIP1271_MAGIC_VALUE;\\n    }\\n\\n    /// @dev Returns hash of a message that can be signed by owners.\\n    /// @param message Message that should be hashed\\n    /// @return Message hash.\\n    function getMessageHash(\\n        bytes memory message\\n    ) public view returns (bytes32) {\\n        return getMessageHashForSodium(Sodium(payable(msg.sender)), message);\\n    }\\n\\n    /// @dev Returns hash of a message that can be signed by owners.\\n    /// @param so Sodium to which the message is targeted\\n    /// @param message Message that should be hashed\\n    /// @return Message hash.\\n    function getMessageHashForSodium(\\n        Sodium so,\\n        bytes memory message\\n    ) public view returns (bytes32) {\\n        bytes32 safeMessageHash = keccak256(\\n            abi.encode(SAFE_MSG_TYPEHASH, keccak256(message))\\n        );\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0x01),\\n                    so.domainSeparator(),\\n                    safeMessageHash\\n                )\\n            );\\n    }\\n\\n    /**\\n     * Implementation of updated EIP-1271\\n     * @dev Should return whether the signature provided is valid for the provided data.\\n     *       The save does not implement the interface since `checkSignatures` is not a view method.\\n     *       The method will not perform any state changes (see parameters of `checkSignatures`)\\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _dataHash\\n     * @return a bool upon valid or invalid signature with corresponding _dataHash\\n     * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n     */\\n    function isValidSignature(\\n        bytes32 _dataHash,\\n        bytes calldata _signature\\n    ) external view returns (bytes4) {\\n        ISignatureValidator validator = ISignatureValidator(msg.sender);\\n        bytes4 value = validator.isValidSignature(\\n            abi.encode(_dataHash),\\n            _signature\\n        );\\n        return (value == EIP1271_MAGIC_VALUE) ? UPDATED_MAGIC_VALUE : bytes4(0);\\n    }\\n}\\n\",\"keccak256\":\"0xeff231c851dd1abce7a9bb1edf6420e2c3e699657eaded7f29f7407739dabfa1\",\"license\":\"LGPL-3.0-only\"},\"contracts/handler/DefaultCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../interfaces/ERC1155TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC721TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC777TokensRecipient.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/// @title Default Callback Handler - returns true for known token callbacks\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract DefaultCallbackHandler is\\n    ERC1155TokenReceiver,\\n    ERC777TokensRecipient,\\n    ERC721TokenReceiver,\\n    IERC165\\n{\\n    string public constant NAME = \\\"Default Callback Handler\\\";\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x03459163add5fb8f1852489ef474616fd7c835067af4b0fec5c8a9992ab53657\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface ERC1155TokenReceiver {\\n    /**\\n        @notice Handle the receipt of a single ERC1155 token type.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n        This function MUST revert if it rejects the transfer.\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _id        The ID of the token being transferred\\n        @param _value     The amount of tokens being transferred\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @notice Handle the receipt of multiple ERC1155 token types.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n        This function MUST revert if it rejects the transfer(s).\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7894ef55ee3334f6388e5e1d749bbabd85fc03d5a2ab949f284bce830f8aa398\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8a3dd41df3a49d9ae2d45dd4087ca595946ed3c6051b8aa304727017b5eabaa4\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC777TokensRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ERC777TokensRecipient {\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1cfbdb95761067c5bc35599fcae6c11e487f2879d7fa2c6f47e7b94506b4039c\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5c64c2e071245db8fe3ea8b94f73c5a8de236933858ae240348d502433a9d178\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface INonceManager {\\n    event NonceChange(uint256 _space, uint256 _newNonce);\\n\\n    /**\\n     * @notice Returns the next nonce of the given nonce space\\n     * @param _space Nonce space, each space keeps an independent nonce count\\n     * @return The next nonce\\n     */\\n    function readNonce(uint256 _space) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd98d903dfeb3283b438182585b08b6af957aae66be54d19ad464be57e18efccc\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _data Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes calldata _data, bytes calldata _signature)\\n        public\\n        view\\n        virtual\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0x08aa9cb79a05c096dae42d7125462048322bd10792a444fe2d53b32411b88a81\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
      "storageLayout": {
        "storage": [],
        "types": null
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "isValidSignature(bytes,bytes)": {
            "notice": "Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)"
          },
          "isValidSignature(bytes32,bytes)": {
            "notice": "Implementation of updated EIP-1271See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\n    },\n    \"contracts/base/Executor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\ncontract Executor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/base/FallbackManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    function internalSetFallbackHandler(address handler) internal {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /// @dev Allows to add a contract to handle fallback calls.\\n    ///      Only fallback calls without value and with data will be forwarded.\\n    ///      This can only be done via a Safe transaction.\\n    /// @param handler contract to handle fallbacks calls.\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/base/GuardManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\ninterface Guard {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address guard);\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Set a guard that checks transactions before execution\\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\\n    function setGuard(address guard) external authorized {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/base/ModuleManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\ncontract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    mapping(address => bool) internal modules;\\n\\n    /// @dev Allows to add a module to the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Enables the module `module` for the Safe.\\n    /// @param module Module to be whitelisted.\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(!modules[module], \\\"SDMM101\\\");\\n        modules[module] = true;\\n        emit EnabledModule(module);\\n    }\\n\\n    /// @dev Allows to remove a module from the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Disables the module `module` for the Safe.\\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(\\n        address prevModule,\\n        address module\\n    ) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(modules[module], \\\"SDMM101\\\");\\n        modules[module] = false;\\n        emit DisabledModule(module);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(\\n            modules[msg.sender],\\n            \\\"SDMM104\\\"\\n        );\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, gasleft());\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return modules[module];\\n    }\\n}\\n\"\n    },\n    \"contracts/base/NonceManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../common/StorageHelper.sol\\\";\\nimport \\\"../interfaces/INonceManager.sol\\\";\\n\\ncontract NonceManager is SelfAuthorized, INonceManager {\\n    // NONCE_KEY = keccak256(\\\"org.sodium.base.nonce\\\");\\n    bytes32 private constant NONCE_KEY =\\n        bytes32(\\n            0x1ec7ef52f8bbd89fae80c55c6884305d3fb5ef41070638221dac337a4377b7df\\n        );\\n\\n    uint256 private constant NONCE_BITS = 96;\\n    bytes32 private constant NONCE_MASK = bytes32((1 << NONCE_BITS) - 1);\\n\\n    /**\\n     * @notice Decodes a raw nonce\\n     * @dev A raw nonce is encoded using the first 160 bits for the space\\n     *  and the last 96 bits for the nonce\\n     * @param _rawNonce Nonce to be decoded\\n     * @return _space The nonce space of the raw nonce\\n     * @return _nonce The nonce of the raw nonce\\n     */\\n    function _decodeNonce(\\n        uint256 _rawNonce\\n    ) private pure returns (uint256 _space, uint256 _nonce) {\\n        _nonce = uint256(bytes32(_rawNonce) & NONCE_MASK);\\n        _space = _rawNonce >> NONCE_BITS;\\n    }\\n\\n    /**\\n     * @notice Returns the next nonce of the given nonce space\\n     * @param _space Nonce space, each space keeps an independent nonce count\\n     * @return The next nonce\\n     */\\n    function readNonce(uint256 _space) public view returns (uint256) {\\n        return\\n            uint256(StorageHelper.readBytes32Map(NONCE_KEY, bytes32(_space)));\\n    }\\n\\n    /**\\n     * @notice Changes the next nonce of the given nonce space\\n     * @param _space Nonce space, each space keeps an independent nonce count\\n     * @param _nonce Nonce to write on the space\\n     */\\n    function _writeNonce(uint256 _space, uint256 _nonce) private {\\n        StorageHelper.writeBytes32Map(\\n            NONCE_KEY,\\n            bytes32(_space),\\n            bytes32(_nonce)\\n        );\\n    }\\n\\n    /**\\n     * @notice Verify if a nonce is valid\\n     * @param _rawNonce Nonce to validate (may contain an encoded space)\\n     * @dev A valid nonce must be above the last one used\\n     *   with a maximum delta of 100\\n     */\\n    function _validateNonce(uint256 _rawNonce) internal {\\n        // Retrieve current nonce for this wallet\\n        (uint256 space, uint256 providedNonce) = _decodeNonce(_rawNonce);\\n        uint256 currentNonce = readNonce(space);\\n\\n        // Verify if nonce is valid\\n        require(providedNonce == currentNonce, \\\"INVALID_NONCE\\\");\\n\\n        // Update signature nonce\\n        uint256 newNonce = providedNonce + 1;\\n        _writeNonce(space, newNonce);\\n        emit NonceChange(space, newNonce);\\n    }\\n}\\n\"\n    },\n    \"contracts/base/SessionManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\ncontract SessionManager is SelfAuthorized {\\n    event AddedSession(address owner, bytes4 sessionKey);\\n    event RemovedSession(address owner, bytes4 sessionKey);\\n\\n    bytes4 internal constant sessionPlatformPC = bytes4(keccak256(\\\"pc\\\"));\\n    bytes4 internal constant sessionPlatformMobile =\\n        bytes4(keccak256(\\\"mobile\\\"));\\n    bytes4 internal constant sessionPlatformWeb = bytes4(keccak256(\\\"web\\\"));\\n\\n    // kecc256(\\\"pc|mobile|web\\\") => session pubkey address\\n    mapping(bytes4 => address) internal sessionByPlatform;\\n\\n    function checkPlatform(bytes4 platform) internal pure {\\n        require(\\n            platform == sessionPlatformPC ||\\n                platform == sessionPlatformMobile ||\\n                platform == sessionPlatformWeb,\\n            \\\"invalid platform\\\"\\n        );\\n    }\\n\\n    function internalAddSession(address owner, bytes4 platform) internal {\\n        checkPlatform(platform);\\n        sessionByPlatform[platform] = owner;\\n        emit AddedSession(owner, platform);\\n    }\\n\\n    function addSession(address owner, bytes4 platform) public authorized {\\n        if (sessionByPlatform[platform] != address(0)) {\\n            removeSession(sessionByPlatform[platform], platform);\\n        }\\n        internalAddSession(owner, platform);\\n    }\\n\\n    function removeSession(address owner, bytes4 platform) public authorized {\\n        require(\\n            sessionByPlatform[platform] == owner,\\n            \\\"platform session expired\\\"\\n        );\\n        sessionByPlatform[platform] = address(0);\\n        emit RemovedSession(owner, platform);\\n    }\\n\\n    function isSessionOwner(address owner) public view returns (bool) {\\n        if (owner == address(0)) {\\n            return false;\\n        }\\n        address[] memory owners = getSessionOwners();\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owner == owners[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of session owners.\\n    function getSessionOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](3);\\n        array[0] = sessionByPlatform[sessionPlatformPC];\\n        array[1] = sessionByPlatform[sessionPlatformMobile];\\n        array[2] = sessionByPlatform[sessionPlatformWeb];\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"contracts/common/Enum.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\"\n    },\n    \"contracts/common/EtherPaymentFallback.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract EtherPaymentFallback {\\n    event NativeTokenReceived(address indexed sender, uint256 value);\\n\\n    /// @dev Fallback function accepts Ether transactions.\\n    receive() external payable {\\n        emit NativeTokenReceived(msg.sender, msg.value);\\n    }\\n}\"\n    },\n    \"contracts/common/SelfAuthorized.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SelfAuthorized - authorizes current contract to perform actions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\"\n    },\n    \"contracts/common/Singleton.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./SelfAuthorized.sol\\\";\\n\\ncontract Singleton is SelfAuthorized {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    // @deprecated\\n    address private _singleton;\\n\\n    /**\\n     * @notice Updates the Wallet implementation\\n     * @param _imp New implementation address\\n     * @dev The wallet implementation is stored on the storage slot\\n     *   defined by the address of the wallet itself\\n     *   WARNING updating this value may break the wallet and users\\n     *   must be confident that the new implementation is safe.\\n     */\\n    function _setSingleton(address _imp) internal {\\n        assembly {\\n            sstore(address(), _imp)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the Wallet implementation\\n     * @return _imp The address of the current Wallet implementation\\n     */\\n    function getSingleton() external view returns (address _imp) {\\n        assembly {\\n            _imp := sload(address())\\n        }\\n    }\\n\\n    function isSodiumSingleton() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/common/StorageHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nlibrary StorageHelper {\\n    function writeBytes32(bytes32 _key, bytes32 _val) internal {\\n        assembly {\\n            sstore(_key, _val)\\n        }\\n    }\\n\\n    function readBytes32(bytes32 _key) internal view returns (bytes32 val) {\\n        assembly {\\n            val := sload(_key)\\n        }\\n    }\\n\\n    function writeBytes32Map(\\n        bytes32 _key,\\n        bytes32 _subKey,\\n        bytes32 _val\\n    ) internal {\\n        bytes32 key = keccak256(abi.encode(_key, _subKey));\\n        assembly {\\n            sstore(key, _val)\\n        }\\n    }\\n\\n    function readBytes32Map(bytes32 _key, bytes32 _subKey)\\n        internal\\n        view\\n        returns (bytes32 val)\\n    {\\n        bytes32 key = keccak256(abi.encode(_key, _subKey));\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/eip4337/core/BaseAccount.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\n * specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * return the account nonce.\\n     * subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)\\n     */\\n    function nonce() public view virtual returns (uint256);\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external override virtual returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        if (userOp.initCode.length == 0) {\\n            _validateAndUpdateNonce(userOp);\\n        }\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\n    internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * validate the current nonce matches the UserOperation nonce.\\n     * then it should update the account's state to prevent replay of this UserOperation.\\n     * called only if initCode is empty (since \\\"nonce\\\" field is used as \\\"salt\\\" on account creation)\\n     * @param userOp the op to validate.\\n     */\\n    function _validateAndUpdateNonce(UserOperation calldata userOp) internal virtual;\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\"\n    },\n    \"contracts/eip4337/core/Helpers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\nstruct ValidationData {\\n    address aggregator;\\n    uint48 validAfter;\\n    uint48 validUntil;\\n}\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\nfunction _parseValidationData(\\n    uint validationData\\n) pure returns (ValidationData memory data) {\\n    address aggregator = address(uint160(validationData));\\n    uint48 validUntil = uint48(validationData >> 160);\\n    if (validUntil == 0) {\\n        validUntil = type(uint48).max;\\n    }\\n    uint48 validAfter = uint48(validationData >> (48 + 160));\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n// intersect account and paymaster ranges.\\nfunction _intersectTimeRange(\\n    uint256 validationData,\\n    uint256 paymasterValidationData\\n) pure returns (ValidationData memory) {\\n    ValidationData memory accountValidationData = _parseValidationData(\\n        validationData\\n    );\\n    ValidationData memory pmValidationData = _parseValidationData(\\n        paymasterValidationData\\n    );\\n    address aggregator = accountValidationData.aggregator;\\n    if (aggregator == address(0)) {\\n        aggregator = pmValidationData.aggregator;\\n    }\\n    uint48 validAfter = accountValidationData.validAfter;\\n    uint48 validUntil = accountValidationData.validUntil;\\n    uint48 pmValidAfter = pmValidationData.validAfter;\\n    uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n    if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n    if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\nfunction _packValidationData(\\n    ValidationData memory data\\n) pure returns (uint256) {\\n    return\\n        uint160(data.aggregator) |\\n        (uint256(data.validUntil) << 160) |\\n        (uint256(data.validAfter) << (160 + 48));\\n}\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\nfunction _packValidationData(\\n    bool sigFailed,\\n    uint48 validUntil,\\n    uint48 validAfter\\n) pure returns (uint256) {\\n    return\\n        (sigFailed ? 1 : 0) |\\n        (uint256(validUntil) << 160) |\\n        (uint256(validAfter) << (160 + 48));\\n}\\n\"\n    },\n    \"contracts/eip4337/interfaces/IAccount.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\"\n    },\n    \"contracts/eip4337/interfaces/IAggregator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\"\n    },\n    \"contracts/eip4337/interfaces/IEntryPoint.sol\": {\n      \"content\": \"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager {\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address indexed paymaster,\\n        uint256 nonce,\\n        bool success,\\n        uint256 actualGasCost,\\n        uint256 actualGasUsed\\n    );\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address factory,\\n        address paymaster\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce,\\n        bytes revertReason\\n    );\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(\\n        ReturnInfo returnInfo,\\n        StakeInfo senderInfo,\\n        StakeInfo factoryInfo,\\n        StakeInfo paymasterInfo\\n    );\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(\\n        ReturnInfo returnInfo,\\n        StakeInfo senderInfo,\\n        StakeInfo factoryInfo,\\n        StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo\\n    );\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(\\n        uint256 preOpGas,\\n        uint256 paid,\\n        uint48 validAfter,\\n        uint48 validUntil,\\n        bool targetSuccess,\\n        bytes targetResult\\n    );\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(\\n        UserOperation[] calldata ops,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(\\n        UserOperation calldata userOp\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(\\n        UserOperation calldata op,\\n        address target,\\n        bytes calldata targetCallData\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/eip4337/interfaces/IStakeManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\"\n    },\n    \"contracts/eip4337/interfaces/UserOperation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        // copy directly the userOp from calldata up to (but not including) the signature.\\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\\n        // than referencing each field separately.\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\n    },\n    \"contracts/external/GnosisSafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title GnosisSafeMath\\n * @dev Math operations with safety checks that revert on error\\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\\n * TODO: remove once open zeppelin update to solc 0.5.0\\n */\\nlibrary GnosisSafeMath {\\n    /**\\n     * @dev Multiplies two numbers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\"\n    },\n    \"contracts/handler/CompatibilityFallbackHandler.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./DefaultCallbackHandler.sol\\\";\\nimport \\\"../interfaces/ISignatureValidator.sol\\\";\\nimport \\\"../Sodium.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract CompatibilityFallbackHandler is\\n    DefaultCallbackHandler,\\n    ISignatureValidator\\n{\\n    using ECDSA for bytes32;\\n    //keccak256(\\n    //    \\\"SafeMessage(bytes message)\\\"\\n    //);\\n    bytes32 private constant SAFE_MSG_TYPEHASH =\\n        0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\\n    bytes4 internal constant SIMULATE_SELECTOR =\\n        bytes4(keccak256(\\\"simulate(address,bytes)\\\"));\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n    bytes4 internal constant UPDATED_MAGIC_VALUE = 0x1626ba7e;\\n\\n    /**\\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\\n     * @dev Should return whether the signature provided is valid for the provided data.\\n     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _data\\n     * @return a bool upon valid or invalid signature with corresponding _data\\n     */\\n    function isValidSignature(\\n        bytes calldata _data,\\n        bytes calldata _signature\\n    ) public view override returns (bytes4) {\\n        Sodium so = Sodium(payable(msg.sender));\\n        bytes32 messageHash = getMessageHashForSodium(so, _data);\\n        require(\\n            so.isSessionOwner(messageHash.recover(_signature)),\\n            \\\"wallet: wrong signature\\\"\\n        );\\n        return EIP1271_MAGIC_VALUE;\\n    }\\n\\n    /// @dev Returns hash of a message that can be signed by owners.\\n    /// @param message Message that should be hashed\\n    /// @return Message hash.\\n    function getMessageHash(\\n        bytes memory message\\n    ) public view returns (bytes32) {\\n        return getMessageHashForSodium(Sodium(payable(msg.sender)), message);\\n    }\\n\\n    /// @dev Returns hash of a message that can be signed by owners.\\n    /// @param so Sodium to which the message is targeted\\n    /// @param message Message that should be hashed\\n    /// @return Message hash.\\n    function getMessageHashForSodium(\\n        Sodium so,\\n        bytes memory message\\n    ) public view returns (bytes32) {\\n        bytes32 safeMessageHash = keccak256(\\n            abi.encode(SAFE_MSG_TYPEHASH, keccak256(message))\\n        );\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0x01),\\n                    so.domainSeparator(),\\n                    safeMessageHash\\n                )\\n            );\\n    }\\n\\n    /**\\n     * Implementation of updated EIP-1271\\n     * @dev Should return whether the signature provided is valid for the provided data.\\n     *       The save does not implement the interface since `checkSignatures` is not a view method.\\n     *       The method will not perform any state changes (see parameters of `checkSignatures`)\\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _dataHash\\n     * @return a bool upon valid or invalid signature with corresponding _dataHash\\n     * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n     */\\n    function isValidSignature(\\n        bytes32 _dataHash,\\n        bytes calldata _signature\\n    ) external view returns (bytes4) {\\n        ISignatureValidator validator = ISignatureValidator(msg.sender);\\n        bytes4 value = validator.isValidSignature(\\n            abi.encode(_dataHash),\\n            _signature\\n        );\\n        return (value == EIP1271_MAGIC_VALUE) ? UPDATED_MAGIC_VALUE : bytes4(0);\\n    }\\n}\\n\"\n    },\n    \"contracts/handler/CompatibilityFallbackHandler2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./DefaultCallbackHandler.sol\\\";\\nimport \\\"../interfaces/ISignatureValidator.sol\\\";\\nimport \\\"../Sodium.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract CompatibilityFallbackHandler2 is\\n    DefaultCallbackHandler,\\n    ISignatureValidator\\n{\\n    using ECDSA for bytes32;\\n    //keccak256(\\n    //    \\\"SafeMessage(bytes message)\\\"\\n    //);\\n    bytes32 private constant SAFE_MSG_TYPEHASH =\\n        0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\\n    bytes4 internal constant SIMULATE_SELECTOR =\\n        bytes4(keccak256(\\\"simulate(address,bytes)\\\"));\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n    bytes4 internal constant UPDATED_MAGIC_VALUE = 0x1626ba7e;\\n\\n    /**\\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\\n     * @dev Should return whether the signature provided is valid for the provided data.\\n     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _data\\n     * @return a bool upon valid or invalid signature with corresponding _data\\n     */\\n    function isValidSignature(\\n        bytes calldata _data,\\n        bytes calldata _signature\\n    ) public view override returns (bytes4) {\\n        Sodium so = Sodium(payable(msg.sender));\\n        bytes32 messageHash = getMessageHashForSodium(so, _data);\\n        // require(\\n        //     so.isSessionOwner(messageHash.recover(_signature)),\\n        //     \\\"wallet: wrong signature\\\"\\n        // );\\n        return EIP1271_MAGIC_VALUE;\\n    }\\n\\n    /// @dev Returns hash of a message that can be signed by owners.\\n    /// @param message Message that should be hashed\\n    /// @return Message hash.\\n    function getMessageHash(\\n        bytes memory message\\n    ) public view returns (bytes32) {\\n        return getMessageHashForSodium(Sodium(payable(msg.sender)), message);\\n    }\\n\\n    /// @dev Returns hash of a message that can be signed by owners.\\n    /// @param so Sodium to which the message is targeted\\n    /// @param message Message that should be hashed\\n    /// @return Message hash.\\n    function getMessageHashForSodium(\\n        Sodium so,\\n        bytes memory message\\n    ) public view returns (bytes32) {\\n        bytes32 safeMessageHash = keccak256(\\n            abi.encode(SAFE_MSG_TYPEHASH, keccak256(message))\\n        );\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0x01),\\n                    so.domainSeparator(),\\n                    safeMessageHash\\n                )\\n            );\\n    }\\n\\n    /**\\n     * Implementation of updated EIP-1271\\n     * @dev Should return whether the signature provided is valid for the provided data.\\n     *       The save does not implement the interface since `checkSignatures` is not a view method.\\n     *       The method will not perform any state changes (see parameters of `checkSignatures`)\\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _dataHash\\n     * @return a bool upon valid or invalid signature with corresponding _dataHash\\n     * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n     */\\n    function isValidSignature(\\n        bytes32 _dataHash,\\n        bytes calldata _signature\\n    ) external view returns (bytes4) {\\n        ISignatureValidator validator = ISignatureValidator(msg.sender);\\n        bytes4 value = validator.isValidSignature(\\n            abi.encode(_dataHash),\\n            _signature\\n        );\\n        return (value == EIP1271_MAGIC_VALUE) ? UPDATED_MAGIC_VALUE : bytes4(0);\\n    }\\n}\\n\"\n    },\n    \"contracts/handler/DefaultCallbackHandler.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../interfaces/ERC1155TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC721TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC777TokensRecipient.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/// @title Default Callback Handler - returns true for known token callbacks\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract DefaultCallbackHandler is\\n    ERC1155TokenReceiver,\\n    ERC777TokensRecipient,\\n    ERC721TokenReceiver,\\n    IERC165\\n{\\n    string public constant NAME = \\\"Default Callback Handler\\\";\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/ERC1155TokenReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface ERC1155TokenReceiver {\\n    /**\\n        @notice Handle the receipt of a single ERC1155 token type.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n        This function MUST revert if it rejects the transfer.\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _id        The ID of the token being transferred\\n        @param _value     The amount of tokens being transferred\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @notice Handle the receipt of multiple ERC1155 token types.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n        This function MUST revert if it rejects the transfer(s).\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/interfaces/ERC721TokenReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/interfaces/ERC777TokensRecipient.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ERC777TokensRecipient {\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/interfaces/INonceManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface INonceManager {\\n    event NonceChange(uint256 _space, uint256 _newNonce);\\n\\n    /**\\n     * @notice Returns the next nonce of the given nonce space\\n     * @param _space Nonce space, each space keeps an independent nonce count\\n     * @return The next nonce\\n     */\\n    function readNonce(uint256 _space) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/ISignatureValidator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _data Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes calldata _data, bytes calldata _signature)\\n        public\\n        view\\n        virtual\\n        returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/Sodium.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/SessionManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/GuardManager.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/EtherPaymentFallback.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./external/GnosisSafeMath.sol\\\";\\nimport \\\"./eip4337/core/BaseAccount.sol\\\";\\nimport \\\"./eip4337/interfaces/IEntryPoint.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./base/NonceManager.sol\\\";\\nimport \\\"./common/Enum.sol\\\";\\n\\nstruct Transaction {\\n    Enum.Operation op; // Performs delegatecall\\n    bool revertOnError; // Reverts transaction bundle if tx fails\\n    uint256 gasLimit; // Maximum gas to be forwarded\\n    address target; // Address of the contract to call\\n    uint256 value; // Amount of ETH to pass with the call\\n    bytes data; // calldata to pass\\n}\\n\\ncontract Sodium is\\n    Singleton,\\n    ModuleManager,\\n    SessionManager,\\n    NonceManager,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    GuardManager,\\n    BaseAccount,\\n    EtherPaymentFallback\\n{\\n    using ECDSA for bytes32;\\n    using GnosisSafeMath for uint256;\\n\\n    string public constant VERSION = \\\"0.0.1\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    event SodiumSetup(\\n        address indexed sessionOwner,\\n        bytes4 platform,\\n        address fallbackHandler\\n    );\\n\\n    bool private initialized;\\n    address public immutable _entryPoint;\\n\\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\\n    constructor(IEntryPoint entryPoint) {\\n        _entryPoint = address(entryPoint);\\n    }\\n\\n    function setup(\\n        address _sessionOwner,\\n        bytes4 _platform,\\n        address _fallbackHandler\\n    ) public {\\n        require(!initialized, \\\"Already initialized\\\");\\n        require(_fallbackHandler != address(0), \\\"Required fallback handler\\\");\\n        initialized = true;\\n        internalSetFallbackHandler(_fallbackHandler);\\n        internalAddSession(_sessionOwner, _platform);\\n    }\\n\\n    /**\\n     * @notice Returns the next nonce of the default nonce space\\n     * @dev The default nonce space is 0x00\\n     * @return The next nonce\\n     */\\n    function nonce() public view override returns (uint256) {\\n        return readNonce(0);\\n    }\\n\\n    function entryPoint() public view override returns (IEntryPoint) {\\n        return IEntryPoint(_entryPoint);\\n    }\\n\\n    function upgradeTo(Sodium newSingleton) external authorized {\\n        require(newSingleton.isSodiumSingleton(), \\\"Not a Sodium singleton\\\");\\n        _setSingleton(address(newSingleton));\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal override returns (uint256 validationData) {\\n        // validate the signature is valid for this message.\\n    }\\n\\n    /**\\n     * validate the current nonce matches the UserOperation nonce.\\n     * then it should update the account's state to prevent replay of this UserOperation.\\n     * called only if initCode is empty (since \\\"nonce\\\" field is used as \\\"salt\\\" on account creation)\\n     * @param userOp the op to validate.\\n     */\\n    function _validateAndUpdateNonce(\\n        UserOperation calldata userOp\\n    ) internal override {\\n        // _validateNonce(userOp.nonce);\\n    }\\n\\n    function _requireFromAdmin() internal view {\\n        require(\\n            msg.sender == address(this) || msg.sender == address(_entryPoint),\\n            \\\"only entryPoint or wallet self\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Allow eip-4337 entryPoint or wallet self to execute an action\\n     * @dev Relayers must ensure that the gasLimit specified for each transaction\\n     *      is acceptable to them. A user could specify large enough that it could\\n     *      consume all the gas available.\\n     * @param _txs Transactions to process\\n     */\\n    function execute(Transaction[] memory _txs) public {\\n        // only allow eip-4337 entryPoint or wallet self to execute an action\\n        _requireFromAdmin();\\n        // Execute the transactions\\n        _execute(_txs);\\n    }\\n\\n    /**\\n     * @notice Executes a list of transactions\\n     * @param _txs  Transactions to execute\\n     */\\n    function _execute(Transaction[] memory _txs) private {\\n        // Execute transaction\\n        for (uint256 i = 0; i < _txs.length; i++) {\\n            Transaction memory transaction = _txs[i];\\n            bool success;\\n            bytes memory result;\\n            require(\\n                gasleft() >= transaction.gasLimit,\\n                \\\"Sodium: NOT_ENOUGH_GAS\\\"\\n            );\\n            if (transaction.op == Enum.Operation.DelegateCall) {\\n                (success, result) = transaction.target.delegatecall{\\n                    gas: transaction.gasLimit == 0\\n                        ? gasleft()\\n                        : transaction.gasLimit\\n                }(transaction.data);\\n            } else {\\n                (success, result) = transaction.target.call{\\n                    value: transaction.value,\\n                    gas: transaction.gasLimit == 0\\n                        ? gasleft()\\n                        : transaction.gasLimit\\n                }(transaction.data);\\n            }\\n            if (!success && transaction.revertOnError) {\\n                assembly {\\n                    revert(add(result, 0x20), mload(result))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the chain id used by this contract.\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this)\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/systemModules/MPCRecovery.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../Sodium.sol\\\";\\n\\ncontract MPCRecovery {\\n    constructor() {\\n        \\n    }\\n}\\n\"\n    },\n    \"contracts/temp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Temp {\\n    /**\\n     * @notice Updates the Wallet implementation\\n     * @param _imp New implementation address\\n     * @dev The wallet implementation is stored on the storage slot\\n     *   defined by the address of the wallet itself\\n     *   WARNING updating this value may break the wallet and users\\n     *   must be confident that the new implementation is safe.\\n     */\\n    function upgradeTo(address _imp) external {\\n        assembly {\\n            sstore(address(), _imp)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the Wallet implementation\\n     * @return _imp The address of the current Wallet implementation\\n     */\\n    function getSingleton() external view returns (address _imp) {\\n        assembly {\\n            _imp := sload(address())\\n        }\\n    }\\n\\n    function isSodiumSingleton() external pure returns (bool) {\\n        return true;\\n    }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "83c51582ee67b079b63a960908c19d43",
      "transactionHash": "0x1b1cd74d117f7b827eab711f5edf36ac989b90c68c7675c93e53b7bb894be55e",
      "args": []
    },
    "decoded": {
      "from": "0x17a243f7Dd13BadE0a7001Ad71a7ef4628A75fCB",
      "gasPrice": "58937531786",
      "maxFeePerGas": "58937531786",
      "maxPriorityFeePerGas": "39051203362",
      "gasLimit": "660408",
      "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
      "value": "0",
      "nonce": 27,
      "data": "0x0000000000000000000000000000000000000000000000000000000000000000608060405234801561001057600080fd5b50610acf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c806320c13b0b1161007157806320c13b0b1461015b578063a3f4df7e1461016e578063bc197c81146101b7578063f23a6e61146101d9578063f653d43c146101f9578063ffa1ad741461020c57600080fd5b806223de29146100ad57806301ffc9a7146100c75780630a1028c4146100ef578063150b7a02146101105780631626ba7e14610148575b600080fd5b6100c56100bb36600461051f565b5050505050505050565b005b6100da6100d53660046105e6565b610230565b60405190151581526020015b60405180910390f35b6101026100fd3660046106ad565b610282565b6040519081526020016100e6565b61012f61011e3660046106ea565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100e6565b61012f61015636600461075d565b61028e565b61012f6101693660046107a9565b61034a565b6101aa6040518060400160405280601881526020017f44656661756c742043616c6c6261636b2048616e646c6572000000000000000081525081565b6040516100e6919061085b565b61012f6101c53660046108b3565b63bc197c8160e01b98975050505050505050565b61012f6101e7366004610951565b63f23a6e6160e01b9695505050505050565b6101026102073660046109cd565b6103a6565b6101aa604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216630271189760e51b148061026157506001600160e01b03198216630a85bd0160e11b145b8061027c57506001600160e01b031982166301ffc9a760e01b145b92915050565b600061027c33836103a6565b60408051602080820186905282518083039091018152818301928390526320c13b0b60e01b9092526000913391839183916320c13b0b916102d59189908990604401610a1d565b602060405180830381865afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610a63565b90506001600160e01b031981166320c13b0b60e01b14610337576000610340565b630b135d3f60e11b5b9695505050505050565b60008033905060006103928288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103a692505050565b506320c13b0b60e01b979650505050505050565b6000807f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020016103ef929190918252602082015260400190565b604051602081830303815290604052805190602001209050601960f81b600160f81b856001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610a80565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040528051906020012091505092915050565b6001600160a01b03811681146104d357600080fd5b50565b60008083601f8401126104e857600080fd5b50813567ffffffffffffffff81111561050057600080fd5b60208301915083602082850101111561051857600080fd5b9250929050565b60008060008060008060008060c0898b03121561053b57600080fd5b8835610546816104be565b97506020890135610556816104be565b96506040890135610566816104be565b955060608901359450608089013567ffffffffffffffff8082111561058a57600080fd5b6105968c838d016104d6565b909650945060a08b01359150808211156105af57600080fd5b506105bc8b828c016104d6565b999c989b5096995094979396929594505050565b6001600160e01b0319811681146104d357600080fd5b6000602082840312156105f857600080fd5b8135610603816105d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261063157600080fd5b813567ffffffffffffffff8082111561064c5761064c61060a565b604051601f8301601f19908116603f011681019082821181831017156106745761067461060a565b8160405283815286602085880101111561068d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156106bf57600080fd5b813567ffffffffffffffff8111156106d657600080fd5b6106e284828501610620565b949350505050565b60008060008060006080868803121561070257600080fd5b853561070d816104be565b9450602086013561071d816104be565b935060408601359250606086013567ffffffffffffffff81111561074057600080fd5b61074c888289016104d6565b969995985093965092949392505050565b60008060006040848603121561077257600080fd5b83359250602084013567ffffffffffffffff81111561079057600080fd5b61079c868287016104d6565b9497909650939450505050565b600080600080604085870312156107bf57600080fd5b843567ffffffffffffffff808211156107d757600080fd5b6107e3888389016104d6565b909650945060208701359150808211156107fc57600080fd5b50610809878288016104d6565b95989497509550505050565b6000815180845260005b8181101561083b5760208185018101518683018201520161081f565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106036020830184610815565b60008083601f84011261088057600080fd5b50813567ffffffffffffffff81111561089857600080fd5b6020830191508360208260051b850101111561051857600080fd5b60008060008060008060008060a0898b0312156108cf57600080fd5b88356108da816104be565b975060208901356108ea816104be565b9650604089013567ffffffffffffffff8082111561090757600080fd5b6109138c838d0161086e565b909850965060608b013591508082111561092c57600080fd5b6109388c838d0161086e565b909650945060808b01359150808211156105af57600080fd5b60008060008060008060a0878903121561096a57600080fd5b8635610975816104be565b95506020870135610985816104be565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109af57600080fd5b6109bb89828a016104d6565b979a9699509497509295939492505050565b600080604083850312156109e057600080fd5b82356109eb816104be565b9150602083013567ffffffffffffffff811115610a0757600080fd5b610a1385828601610620565b9150509250929050565b604081526000610a306040830186610815565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b600060208284031215610a7557600080fd5b8151610603816105d0565b600060208284031215610a9257600080fd5b505191905056fea26469706673582212208bd5ae150548811980a103c815589699f4c185724d34fb78ec49d29f9bf94b7e64736f6c63430008110033",
      "r": "0x584a15c54f37f792dfa8a46e17bf5a10dd0766e9f457760eb50cf9539c4e71b9",
      "s": "0x380f61fcdef1af219f054043edf7720cca51428d9ea1e8a4f3ff8427dff12e6d",
      "v": 1,
      "chainId": 137
    }
  }
}