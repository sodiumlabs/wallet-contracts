{
  "address": "0xfeE35E475D04062eB515feb679a5a12611D6B3A4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SenderCreator",
          "name": "_senderCreator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "preOpGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "validAfter",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "validUntil",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "targetSuccess",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "targetResult",
          "type": "bytes"
        }
      ],
      "name": "ExecutionResult",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "opIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "FailedOp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderAddressResult",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SignatureValidationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "preOpGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prefund",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sigFailed",
              "type": "bool"
            },
            {
              "internalType": "uint48",
              "name": "validAfter",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "validUntil",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "paymasterContext",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.ReturnInfo",
          "name": "returnInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "senderInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "factoryInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "paymasterInfo",
          "type": "tuple"
        }
      ],
      "name": "ValidationResult",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "preOpGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prefund",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sigFailed",
              "type": "bool"
            },
            {
              "internalType": "uint48",
              "name": "validAfter",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "validUntil",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "paymasterContext",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.ReturnInfo",
          "name": "returnInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "senderInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "factoryInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelaySec",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "paymasterInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "aggregator",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "stake",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "unstakeDelaySec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IStakeManager.StakeInfo",
              "name": "stakeInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct IEntryPoint.AggregatorStakeInfo",
          "name": "aggregatorInfo",
          "type": "tuple"
        }
      ],
      "name": "ValidationResultWithAggregation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        }
      ],
      "name": "AccountDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SignatureAggregatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeDelaySec",
          "type": "uint256"
        }
      ],
      "name": "StakeLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        }
      ],
      "name": "StakeUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasUsed",
          "type": "uint256"
        }
      ],
      "name": "UserOperationEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "revertReason",
          "type": "bytes"
        }
      ],
      "name": "UserOperationRevertReason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SIG_VALIDATION_FAILED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initCode",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "paymasterAndData",
          "type": "bytes"
        }
      ],
      "name": "_validateSenderAndPaymaster",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "deposit",
          "type": "uint112"
        },
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint112",
          "name": "stake",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        },
        {
          "internalType": "uint48",
          "name": "withdrawTime",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDepositInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "deposit",
              "type": "uint112"
            },
            {
              "internalType": "bool",
              "name": "staked",
              "type": "bool"
            },
            {
              "internalType": "uint112",
              "name": "stake",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "unstakeDelaySec",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "withdrawTime",
              "type": "uint48"
            }
          ],
          "internalType": "struct IStakeManager.DepositInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "getUserOpHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct UserOperation[]",
              "name": "userOps",
              "type": "tuple[]"
            },
            {
              "internalType": "contract IAggregator",
              "name": "aggregator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.UserOpsPerAggregator[]",
          "name": "opsPerAggregator",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleAggregatedOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation[]",
          "name": "ops",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                }
              ],
              "internalType": "struct EntryPoint.MemoryUserOp",
              "name": "mUserOp",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "userOpHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "prefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contextOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preOpGas",
              "type": "uint256"
            }
          ],
          "internalType": "struct EntryPoint.UserOpInfo",
          "name": "opInfo",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        }
      ],
      "name": "innerHandleOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "senderCreator",
      "outputs": [
        {
          "internalType": "contract SenderCreator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "op",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "targetCallData",
          "type": "bytes"
        }
      ],
      "name": "simulateHandleOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "simulateValidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x90117be9b9deb92a879d267e276575df748d1ceb60bc90ffcdb9687ecaa9383b",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x17a243f7Dd13BadE0a7001Ad71a7ef4628A75fCB",
    "contractAddress": null,
    "transactionIndex": 37,
    "gasUsed": "3343150",
    "logsBloom": "0x
    "blockHash": "0x82e57e821e68fd4004d31352056053459c9fb5f42fd03a345a0d224f487fa551",
    "transactionHash": "0x90117be9b9deb92a879d267e276575df748d1ceb60bc90ffcdb9687ecaa9383b",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 40041545,
        "transactionHash": "0x90117be9b9deb92a879d267e276575df748d1ceb60bc90ffcdb9687ecaa9383b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000017a243f7dd13bade0a7001ad71a7ef4628a75fcb",
          "0x000000000000000000000000ef46d5fe753c988606e6f703260d816af53b03eb"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001645150fd6ce80000000000000000000000000000000000000000000000000066ec68c73506d68d0000000000000000000000000000000000000000000002235895d2ada0613d97000000000000000000000000000000000000000000000000658817763799ee8d00000000000000000000000000000000000000000000022359fa23fe9dce2597",
        "logIndex": 177,
        "blockHash": "0x82e57e821e68fd4004d31352056053459c9fb5f42fd03a345a0d224f487fa551"
      }
    ],
    "blockNumber": 40041545,
    "cumulativeGasUsed": "10626115",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCA25952469BBae82c63A7A75D8aBc7dBf9442e18"
  ],
  "numDeployments": 2,
  "solcInputHash": "e36723426982162f94f91f49468ecdec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SenderCreator\",\"name\":\"_senderCreator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"targetSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"targetResult\",\"type\":\"bytes\"}],\"name\":\"ExecutionResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IEntryPoint.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResultWithAggregation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SIG_VALIDATION_FAILED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"}],\"name\":\"_validateSenderAndPaymaster\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPoint.MemoryUserOp\",\"name\":\"mUserOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPoint.UserOpInfo\",\"name\":\"opInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"innerHandleOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderCreator\",\"outputs\":[{\"internalType\":\"contract SenderCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetCallData\",\"type\":\"bytes\"}],\"name\":\"simulateHandleOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"params\":{\"opIndex\":\"- index into the array of ops to the failed one (in simulateValidation, this is always zero)\",\"reason\":\"- revert reason      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\"}}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"params\":{\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"params\":{\"aggregatorInfo\":\"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation\",\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}]},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"opsPerAggregator\":\"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\"}},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"ops\":\"the operations to execute\"}},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"params\":{\"op\":\"the UserOperation to simulate\",\"target\":\"if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.\",\"targetCallData\":\"callData to pass to target address\"}},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"details\":\"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\",\"params\":{\"userOp\":\"the user operation to validate.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)\":[{\"notice\":\"return value of simulateHandleOp\"}],\"FailedOp(uint256,string)\":[{\"notice\":\"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"SenderAddressResult(address)\":[{\"notice\":\"return value of getSenderAddress\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"error case when a signature aggregator fails to verify the aggregated signature it had created.\"}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"notice\":\"Successful result from simulateValidation.\"}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"notice\":\"Successful result from simulateValidation, if the account returns a signature aggregator\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"account \\\"sender\\\" was deployed.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"signature aggregator used by the following UserOperationEvents within this bundle.\"},\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\"}},\"kind\":\"user\",\"methods\":{\"SIG_VALIDATION_FAILED()\":{\"notice\":\"for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value in case of signature failure, instead of revert.\"},\"_validateSenderAndPaymaster(bytes,address,bytes)\":{\"notice\":\"Called only during simulation. This function always reverts to prevent warm/cold storage differentiation in simulation vs execution.\"},\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"balanceOf(address)\":{\"notice\":\"return the deposit (for gas payment) of the account\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"deposits(address)\":{\"notice\":\"maps paymaster to their deposits and stakes\"},\"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperations. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)\":{\"notice\":\"inner function to handle a UserOperation. Must be declared \\\"external\\\" to open a call context, but it can only be called by handleOps.\"},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"notice\":\"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \\\"ExecutionResult\\\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events.\"},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/eip4337/core/EntryPoint.sol\":\"EntryPoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n    Minimal upgradeable proxy implementation, delegates all calls to the address\\n    defined by the storage slot matching the wallet address.\\n    Inspired by EIP-1167 Implementation (https://eips.ethereum.org/EIPS/eip-1167)\\n    deployed code:\\n        0x00    0x36         0x36      CALLDATASIZE      cds\\n        0x01    0x3d         0x3d      RETURNDATASIZE    0 cds\\n        0x02    0x3d         0x3d      RETURNDATASIZE    0 0 cds\\n        0x03    0x37         0x37      CALLDATACOPY\\n        0x04    0x3d         0x3d      RETURNDATASIZE    0\\n        0x05    0x3d         0x3d      RETURNDATASIZE    0 0\\n        0x06    0x3d         0x3d      RETURNDATASIZE    0 0 0\\n        0x07    0x36         0x36      CALLDATASIZE      cds 0 0 0\\n        0x08    0x3d         0x3d      RETURNDATASIZE    0 cds 0 0 0\\n        0x09    0x30         0x30      ADDRESS           addr 0 cds 0 0 0\\n        0x0A    0x54         0x54      SLOAD             imp 0 cds 0 0 0\\n        0x0B    0x5a         0x5a      GAS               gas imp 0 cds 0 0 0\\n        0x0C    0xf4         0xf4      DELEGATECALL      suc 0\\n        0x0D    0x3d         0x3d      RETURNDATASIZE    rds suc 0\\n        0x0E    0x82         0x82      DUP3              0 rds suc 0\\n        0x0F    0x80         0x80      DUP1              0 0 rds suc 0\\n        0x10    0x3e         0x3e      RETURNDATACOPY    suc 0\\n        0x11    0x90         0x90      SWAP1             0 suc\\n        0x12    0x3d         0x3d      RETURNDATASIZE    rds 0 suc\\n        0x13    0x91         0x91      SWAP2             suc 0 rds\\n        0x14    0x60 0x18    0x6018    PUSH1             0x18 suc 0 rds\\n    /-- 0x16    0x57         0x57      JUMPI             0 rds\\n    |   0x17    0xfd         0xfd      REVERT\\n    \\\\-> 0x18    0x5b         0x5b      JUMPDEST          0 rds\\n        0x19    0xf3         0xf3      RETURN\\n    flat deployed code: 0x363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\\n    deploy function:\\n        0x00    0x60 0x3a    0x603a    PUSH1             0x3a\\n        0x02    0x60 0x0e    0x600e    PUSH1             0x0e 0x3a\\n        0x04    0x3d         0x3d      RETURNDATASIZE    0 0x0e 0x3a\\n        0x05    0x39         0x39      CODECOPY\\n        0x06    0x60 0x1a    0x601a    PUSH1             0x1a\\n        0x08    0x80         0x80      DUP1              0x1a 0x1a\\n        0x09    0x51         0x51      MLOAD             imp 0x1a\\n        0x0A    0x30         0x30      ADDRESS           addr imp 0x1a\\n        0x0B    0x55         0x55      SSTORE            0x1a\\n        0x0C    0x3d         0x3d      RETURNDATASIZE    0 0x1a\\n        0x0D    0xf3         0xf3      RETURN\\n        [...deployed code]\\n    flat deploy function: 0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\\n*/\\nlibrary Wallet {\\n  bytes internal constant creationCode = hex\\\"603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\\\";\\n}\",\"keccak256\":\"0x2149dfc23a198f5a513f74d415e381739c00a2558356b26f5f7aae35dcc58b49\",\"license\":\"LGPL-3.0-only\"},\"contracts/eip4337/core/EntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IPaymaster.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Exec.sol\\\";\\nimport \\\"./StakeManager.sol\\\";\\nimport \\\"./SenderCreator.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\ncontract EntryPoint is IEntryPoint, StakeManager {\\n    using UserOperationLib for UserOperation;\\n\\n    SenderCreator public senderCreator;\\n\\n    // internal value used during simulation: need to query aggregator.\\n    address private constant SIMULATE_FIND_AGGREGATOR = address(1);\\n\\n    // marker for inner call revert on out of gas\\n    bytes32 private constant INNER_OUT_OF_GAS = hex\\\"deaddead\\\";\\n\\n    uint256 private constant REVERT_REASON_MAX_LEN = 2048;\\n\\n    /**\\n     * for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value\\n     * in case of signature failure, instead of revert.\\n     */\\n    uint256 public constant SIG_VALIDATION_FAILED = 1;\\n\\n    constructor(SenderCreator _senderCreator) {\\n        senderCreator = _senderCreator;\\n    }\\n\\n    /**\\n     * compensate the caller's beneficiary address with the collected fees of all UserOperations.\\n     * @param beneficiary the address to receive the fees\\n     * @param amount amount to transfer.\\n     */\\n    function _compensate(address payable beneficiary, uint256 amount) internal {\\n        require(beneficiary != address(0), \\\"AA90 invalid beneficiary\\\");\\n        (bool success, ) = beneficiary.call{value: amount}(\\\"\\\");\\n        require(success, \\\"AA91 failed send to beneficiary\\\");\\n    }\\n\\n    /**\\n     * execute a user op\\n     * @param opIndex index into the opInfo array\\n     * @param userOp the userOp to execute\\n     * @param opInfo the opInfo filled by validatePrepayment for this userOp.\\n     * @return collected the total amount this userOp paid.\\n     */\\n    function _executeUserOp(\\n        uint256 opIndex,\\n        UserOperation calldata userOp,\\n        UserOpInfo memory opInfo\\n    ) private returns (uint256 collected) {\\n        uint256 preGas = gasleft();\\n        bytes memory context = getMemoryBytesFromOffset(opInfo.contextOffset);\\n\\n        try this.innerHandleOp(userOp.callData, opInfo, context) returns (\\n            uint256 _actualGasCost\\n        ) {\\n            collected = _actualGasCost;\\n        } catch {\\n            bytes32 innerRevertCode;\\n            assembly {\\n                returndatacopy(0, 0, 32)\\n                innerRevertCode := mload(0)\\n            }\\n            // handleOps was called with gas limit too low. abort entire bundle.\\n            if (innerRevertCode == INNER_OUT_OF_GAS) {\\n                //report paymaster, since if it is not deliberately caused by the bundler,\\n                // it must be a revert caused by paymaster.\\n                revert FailedOp(opIndex, \\\"AA95 out of gas\\\");\\n            }\\n\\n            uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\\n            collected = _handlePostOp(\\n                opIndex,\\n                IPaymaster.PostOpMode.postOpReverted,\\n                opInfo,\\n                context,\\n                actualGas\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperations.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(\\n        UserOperation[] calldata ops,\\n        address payable beneficiary\\n    ) public {\\n        uint256 opslen = ops.length;\\n        UserOpInfo[] memory opInfos = new UserOpInfo[](opslen);\\n\\n        unchecked {\\n            for (uint256 i = 0; i < opslen; i++) {\\n                UserOpInfo memory opInfo = opInfos[i];\\n                (\\n                    uint256 validationData,\\n                    uint256 pmValidationData\\n                ) = _validatePrepayment(i, ops[i], opInfo);\\n                _validateAccountAndPaymasterValidationData(\\n                    i,\\n                    validationData,\\n                    pmValidationData,\\n                    address(0)\\n                );\\n            }\\n\\n            uint256 collected = 0;\\n\\n            for (uint256 i = 0; i < opslen; i++) {\\n                collected += _executeUserOp(i, ops[i], opInfos[i]);\\n            }\\n\\n            _compensate(beneficiary, collected);\\n        } //unchecked\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) public {\\n        uint256 opasLen = opsPerAggregator.length;\\n        uint256 totalOps = 0;\\n        for (uint256 i = 0; i < opasLen; i++) {\\n            UserOpsPerAggregator calldata opa = opsPerAggregator[i];\\n            UserOperation[] calldata ops = opa.userOps;\\n            IAggregator aggregator = opa.aggregator;\\n\\n            //address(1) is special marker of \\\"signature error\\\"\\n            require(\\n                address(aggregator) != address(1),\\n                \\\"AA96 invalid aggregator\\\"\\n            );\\n\\n            if (address(aggregator) != address(0)) {\\n                // solhint-disable-next-line no-empty-blocks\\n                try aggregator.validateSignatures(ops, opa.signature) {} catch {\\n                    revert SignatureValidationFailed(address(aggregator));\\n                }\\n            }\\n\\n            totalOps += ops.length;\\n        }\\n\\n        UserOpInfo[] memory opInfos = new UserOpInfo[](totalOps);\\n\\n        uint256 opIndex = 0;\\n        for (uint256 a = 0; a < opasLen; a++) {\\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\\n            UserOperation[] calldata ops = opa.userOps;\\n            IAggregator aggregator = opa.aggregator;\\n\\n            uint256 opslen = ops.length;\\n            for (uint256 i = 0; i < opslen; i++) {\\n                UserOpInfo memory opInfo = opInfos[opIndex];\\n                (\\n                    uint256 validationData,\\n                    uint256 paymasterValidationData\\n                ) = _validatePrepayment(opIndex, ops[i], opInfo);\\n                _validateAccountAndPaymasterValidationData(\\n                    i,\\n                    validationData,\\n                    paymasterValidationData,\\n                    address(aggregator)\\n                );\\n                opIndex++;\\n            }\\n        }\\n\\n        uint256 collected = 0;\\n        opIndex = 0;\\n        for (uint256 a = 0; a < opasLen; a++) {\\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\\n            emit SignatureAggregatorChanged(address(opa.aggregator));\\n            UserOperation[] calldata ops = opa.userOps;\\n            uint256 opslen = ops.length;\\n\\n            for (uint256 i = 0; i < opslen; i++) {\\n                collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex]);\\n                opIndex++;\\n            }\\n        }\\n        emit SignatureAggregatorChanged(address(0));\\n\\n        _compensate(beneficiary, collected);\\n    }\\n\\n    /// @inheritdoc IEntryPoint\\n    function simulateHandleOp(\\n        UserOperation calldata op,\\n        address target,\\n        bytes calldata targetCallData\\n    ) external override {\\n        UserOpInfo memory opInfo;\\n        _simulationOnlyValidations(op);\\n        (\\n            uint256 validationData,\\n            uint256 paymasterValidationData\\n        ) = _validatePrepayment(0, op, opInfo);\\n        ValidationData memory data = _intersectTimeRange(\\n            validationData,\\n            paymasterValidationData\\n        );\\n\\n        numberMarker();\\n        uint256 paid = _executeUserOp(0, op, opInfo);\\n        numberMarker();\\n        bool targetSuccess;\\n        bytes memory targetResult;\\n        if (target != address(0)) {\\n            (targetSuccess, targetResult) = target.call(targetCallData);\\n        }\\n        revert ExecutionResult(\\n            opInfo.preOpGas,\\n            paid,\\n            data.validAfter,\\n            data.validUntil,\\n            targetSuccess,\\n            targetResult\\n        );\\n    }\\n\\n    // A memory copy of UserOp static fields only.\\n    // Excluding: callData, initCode and signature. Replacing paymasterAndData with paymaster.\\n    struct MemoryUserOp {\\n        address sender;\\n        uint256 nonce;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        address paymaster;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n    }\\n\\n    struct UserOpInfo {\\n        MemoryUserOp mUserOp;\\n        bytes32 userOpHash;\\n        uint256 prefund;\\n        uint256 contextOffset;\\n        uint256 preOpGas;\\n    }\\n\\n    /**\\n     * inner function to handle a UserOperation.\\n     * Must be declared \\\"external\\\" to open a call context, but it can only be called by handleOps.\\n     */\\n    function innerHandleOp(\\n        bytes memory callData,\\n        UserOpInfo memory opInfo,\\n        bytes calldata context\\n    ) external returns (uint256 actualGasCost) {\\n        uint256 preGas = gasleft();\\n        require(msg.sender == address(this), \\\"AA92 internal call only\\\");\\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n\\n        uint callGasLimit = mUserOp.callGasLimit;\\n        unchecked {\\n            // handleOps was called with gas limit too low. abort entire bundle.\\n            if (\\n                gasleft() < callGasLimit + mUserOp.verificationGasLimit + 5000\\n            ) {\\n                assembly {\\n                    mstore(0, INNER_OUT_OF_GAS)\\n                    revert(0, 32)\\n                }\\n            }\\n        }\\n\\n        IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded;\\n        if (callData.length > 0) {\\n            bool success = Exec.call(mUserOp.sender, 0, callData, callGasLimit);\\n            if (!success) {\\n                bytes memory result = Exec.getReturnData(REVERT_REASON_MAX_LEN);\\n                if (result.length > 0) {\\n                    emit UserOperationRevertReason(\\n                        opInfo.userOpHash,\\n                        mUserOp.sender,\\n                        mUserOp.nonce,\\n                        result\\n                    );\\n                }\\n                mode = IPaymaster.PostOpMode.opReverted;\\n            }\\n        }\\n\\n        unchecked {\\n            uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\\n            //note: opIndex is ignored (relevant only if mode==postOpReverted, which is only possible outside of innerHandleOp)\\n            return _handlePostOp(0, mode, opInfo, context, actualGas);\\n        }\\n    }\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(\\n        UserOperation calldata userOp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(userOp.hash(), address(this), block.chainid));\\n    }\\n\\n    /**\\n     * copy general fields from userOp into the memory opInfo structure.\\n     */\\n    function _copyUserOpToMemory(\\n        UserOperation calldata userOp,\\n        MemoryUserOp memory mUserOp\\n    ) internal pure {\\n        mUserOp.sender = userOp.sender;\\n        mUserOp.nonce = userOp.nonce;\\n        mUserOp.callGasLimit = userOp.callGasLimit;\\n        mUserOp.verificationGasLimit = userOp.verificationGasLimit;\\n        mUserOp.preVerificationGas = userOp.preVerificationGas;\\n        mUserOp.maxFeePerGas = userOp.maxFeePerGas;\\n        mUserOp.maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes calldata paymasterAndData = userOp.paymasterAndData;\\n        if (paymasterAndData.length > 0) {\\n            require(\\n                paymasterAndData.length >= 20,\\n                \\\"AA93 invalid paymasterAndData\\\"\\n            );\\n            mUserOp.paymaster = address(bytes20(paymasterAndData[:20]));\\n        } else {\\n            mUserOp.paymaster = address(0);\\n        }\\n    }\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external {\\n        UserOpInfo memory outOpInfo;\\n\\n        _simulationOnlyValidations(userOp);\\n        (\\n            uint256 validationData,\\n            uint256 paymasterValidationData\\n        ) = _validatePrepayment(0, userOp, outOpInfo);\\n        StakeInfo memory paymasterInfo = _getStakeInfo(\\n            outOpInfo.mUserOp.paymaster\\n        );\\n        StakeInfo memory senderInfo = _getStakeInfo(outOpInfo.mUserOp.sender);\\n        StakeInfo memory factoryInfo;\\n        {\\n            bytes calldata initCode = userOp.initCode;\\n            address factory = initCode.length >= 20\\n                ? address(bytes20(initCode[0:20]))\\n                : address(0);\\n            factoryInfo = _getStakeInfo(factory);\\n        }\\n\\n        ValidationData memory data = _intersectTimeRange(\\n            validationData,\\n            paymasterValidationData\\n        );\\n        address aggregator = data.aggregator;\\n        bool sigFailed = aggregator == address(1);\\n        ReturnInfo memory returnInfo = ReturnInfo(\\n            outOpInfo.preOpGas,\\n            outOpInfo.prefund,\\n            sigFailed,\\n            data.validAfter,\\n            data.validUntil,\\n            getMemoryBytesFromOffset(outOpInfo.contextOffset)\\n        );\\n\\n        if (aggregator != address(0) && aggregator != address(1)) {\\n            AggregatorStakeInfo memory aggregatorInfo = AggregatorStakeInfo(\\n                aggregator,\\n                _getStakeInfo(aggregator)\\n            );\\n            revert ValidationResultWithAggregation(\\n                returnInfo,\\n                senderInfo,\\n                factoryInfo,\\n                paymasterInfo,\\n                aggregatorInfo\\n            );\\n        }\\n        revert ValidationResult(\\n            returnInfo,\\n            senderInfo,\\n            factoryInfo,\\n            paymasterInfo\\n        );\\n    }\\n\\n    function _getRequiredPrefund(\\n        MemoryUserOp memory mUserOp\\n    ) internal pure returns (uint256 requiredPrefund) {\\n        unchecked {\\n            //when using a Paymaster, the verificationGasLimit is used also to as a limit for the postOp call.\\n            // our security model might call postOp eventually twice\\n            uint256 mul = mUserOp.paymaster != address(0) ? 3 : 1;\\n            uint256 requiredGas = mUserOp.callGasLimit +\\n                mUserOp.verificationGasLimit *\\n                mul +\\n                mUserOp.preVerificationGas;\\n\\n            requiredPrefund = requiredGas * mUserOp.maxFeePerGas;\\n        }\\n    }\\n\\n    // create the sender's contract if needed.\\n    function _createSenderIfNeeded(\\n        uint256 opIndex,\\n        UserOpInfo memory opInfo,\\n        bytes calldata initCode\\n    ) internal {\\n        if (initCode.length != 0) {\\n            address sender = opInfo.mUserOp.sender;\\n            if (sender.code.length != 0)\\n                revert FailedOp(opIndex, \\\"AA10 sender already constructed\\\");\\n            address sender1 = senderCreator.createSender{\\n                gas: opInfo.mUserOp.verificationGasLimit\\n            }(initCode);\\n            if (sender1 == address(0))\\n                revert FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\");\\n            if (sender1 != sender)\\n                revert FailedOp(opIndex, \\\"AA14 initCode must return sender\\\");\\n            if (sender1.code.length == 0)\\n                revert FailedOp(opIndex, \\\"AA15 initCode must create sender\\\");\\n            address factory = address(bytes20(initCode[0:20]));\\n            emit AccountDeployed(\\n                opInfo.userOpHash,\\n                sender,\\n                factory,\\n                opInfo.mUserOp.paymaster\\n            );\\n        }\\n    }\\n\\n    function _simulationOnlyValidations(\\n        UserOperation calldata userOp\\n    ) internal view {\\n        // solhint-disable-next-line no-empty-blocks\\n        try\\n            this._validateSenderAndPaymaster(\\n                userOp.initCode,\\n                userOp.sender,\\n                userOp.paymasterAndData\\n            )\\n        {} catch Error(string memory revertReason) {\\n            if (bytes(revertReason).length != 0) {\\n                revert FailedOp(0, revertReason);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Called only during simulation.\\n     * This function always reverts to prevent warm/cold storage differentiation in simulation vs execution.\\n     */\\n    function _validateSenderAndPaymaster(\\n        bytes calldata initCode,\\n        address sender,\\n        bytes calldata paymasterAndData\\n    ) external view {\\n        if (initCode.length == 0 && sender.code.length == 0) {\\n            // it would revert anyway. but give a meaningful message\\n            revert(\\\"AA20 account not deployed\\\");\\n        }\\n        if (paymasterAndData.length >= 20) {\\n            address paymaster = address(bytes20(paymasterAndData[0:20]));\\n            if (paymaster.code.length == 0) {\\n                // it would revert anyway. but give a meaningful message\\n                revert(\\\"AA30 paymaster not deployed\\\");\\n            }\\n        }\\n        // always revert\\n        revert(\\\"\\\");\\n    }\\n\\n    /**\\n     * call account.validateUserOp.\\n     * revert (with FailedOp) in case validateUserOp reverts, or account didn't send required prefund.\\n     * decrement account's deposit if needed\\n     */\\n    function _validateAccountPrepayment(\\n        uint256 opIndex,\\n        UserOperation calldata op,\\n        UserOpInfo memory opInfo,\\n        uint256 requiredPrefund\\n    )\\n        internal\\n        returns (\\n            uint256 gasUsedByValidateAccountPrepayment,\\n            uint256 validationData\\n        )\\n    {\\n        unchecked {\\n            uint256 preGas = gasleft();\\n            MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n            address sender = mUserOp.sender;\\n            _createSenderIfNeeded(opIndex, opInfo, op.initCode);\\n            address paymaster = mUserOp.paymaster;\\n            numberMarker();\\n            uint256 missingAccountFunds = 0;\\n            if (paymaster == address(0)) {\\n                uint256 bal = balanceOf(sender);\\n                missingAccountFunds = bal > requiredPrefund\\n                    ? 0\\n                    : requiredPrefund - bal;\\n            }\\n            try\\n                IAccount(sender).validateUserOp{\\n                    gas: mUserOp.verificationGasLimit\\n                }(op, opInfo.userOpHash, missingAccountFunds)\\n            returns (uint256 _validationData) {\\n                validationData = _validationData;\\n            } catch Error(string memory revertReason) {\\n                revert FailedOp(\\n                    opIndex,\\n                    string.concat(\\\"AA23 reverted: \\\", revertReason)\\n                );\\n            } catch {\\n                revert FailedOp(opIndex, \\\"AA23 reverted (or OOG)\\\");\\n            }\\n            if (paymaster == address(0)) {\\n                DepositInfo storage senderInfo = deposits[sender];\\n                uint256 deposit = senderInfo.deposit;\\n                if (requiredPrefund > deposit) {\\n                    revert FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\");\\n                }\\n                senderInfo.deposit = uint112(deposit - requiredPrefund);\\n            }\\n            gasUsedByValidateAccountPrepayment = preGas - gasleft();\\n        }\\n    }\\n\\n    /**\\n     * In case the request has a paymaster:\\n     * Validate paymaster has enough deposit.\\n     * Call paymaster.validatePaymasterUserOp.\\n     * Revert with proper FailedOp in case paymaster reverts.\\n     * Decrement paymaster's deposit\\n     */\\n    function _validatePaymasterPrepayment(\\n        uint256 opIndex,\\n        UserOperation calldata op,\\n        UserOpInfo memory opInfo,\\n        uint256 requiredPreFund,\\n        uint256 gasUsedByValidateAccountPrepayment\\n    ) internal returns (bytes memory context, uint256 validationData) {\\n        unchecked {\\n            MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n            uint256 verificationGasLimit = mUserOp.verificationGasLimit;\\n            require(\\n                verificationGasLimit > gasUsedByValidateAccountPrepayment,\\n                \\\"AA41 too little verificationGas\\\"\\n            );\\n            uint256 gas = verificationGasLimit -\\n                gasUsedByValidateAccountPrepayment;\\n            address paymaster = mUserOp.paymaster;\\n            DepositInfo storage paymasterInfo = deposits[paymaster];\\n            uint256 deposit = paymasterInfo.deposit;\\n            if (deposit < requiredPreFund) {\\n                revert FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\");\\n            }\\n            paymasterInfo.deposit = uint112(deposit - requiredPreFund);\\n            try\\n                IPaymaster(paymaster).validatePaymasterUserOp{gas: gas}(\\n                    op,\\n                    opInfo.userOpHash,\\n                    requiredPreFund\\n                )\\n            returns (bytes memory _context, uint256 _validationData) {\\n                context = _context;\\n                validationData = _validationData;\\n            } catch Error(string memory revertReason) {\\n                revert FailedOp(\\n                    opIndex,\\n                    string.concat(\\\"AA33 reverted: \\\", revertReason)\\n                );\\n            } catch {\\n                revert FailedOp(opIndex, \\\"AA33 reverted (or OOG)\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * revert if either account validationData or paymaster validationData is expired\\n     */\\n    function _validateAccountAndPaymasterValidationData(\\n        uint256 opIndex,\\n        uint256 validationData,\\n        uint256 paymasterValidationData,\\n        address expectedAggregator\\n    ) internal view {\\n        (address aggregator, bool outOfTimeRange) = _getValidationData(\\n            validationData\\n        );\\n        if (expectedAggregator != aggregator) {\\n            revert FailedOp(opIndex, \\\"AA24 signature error\\\");\\n        }\\n        if (outOfTimeRange) {\\n            revert FailedOp(opIndex, \\\"AA22 expired or not due\\\");\\n        }\\n        //pmAggregator is not a real signature aggregator: we don't have logic to handle it as address.\\n        // non-zero address means that the paymaster fails due to some signature check (which is ok only during estimation)\\n        address pmAggregator;\\n        (pmAggregator, outOfTimeRange) = _getValidationData(\\n            paymasterValidationData\\n        );\\n        if (pmAggregator != address(0)) {\\n            revert FailedOp(opIndex, \\\"AA34 signature error\\\");\\n        }\\n        if (outOfTimeRange) {\\n            revert FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\");\\n        }\\n    }\\n\\n    function _getValidationData(\\n        uint256 validationData\\n    ) internal view returns (address aggregator, bool outOfTimeRange) {\\n        if (validationData == 0) {\\n            return (address(0), false);\\n        }\\n        ValidationData memory data = _parseValidationData(validationData);\\n        // solhint-disable-next-line not-rely-on-time\\n        outOfTimeRange =\\n            block.timestamp > data.validUntil ||\\n            block.timestamp < data.validAfter;\\n        aggregator = data.aggregator;\\n    }\\n\\n    /**\\n     * validate account and paymaster (if defined).\\n     * also make sure total validation doesn't exceed verificationGasLimit\\n     * this method is called off-chain (simulateValidation()) and on-chain (from handleOps)\\n     * @param opIndex the index of this userOp into the \\\"opInfos\\\" array\\n     * @param userOp the userOp to validate\\n     */\\n    function _validatePrepayment(\\n        uint256 opIndex,\\n        UserOperation calldata userOp,\\n        UserOpInfo memory outOpInfo\\n    )\\n        private\\n        returns (uint256 validationData, uint256 paymasterValidationData)\\n    {\\n        uint256 preGas = gasleft();\\n        MemoryUserOp memory mUserOp = outOpInfo.mUserOp;\\n        _copyUserOpToMemory(userOp, mUserOp);\\n        outOpInfo.userOpHash = getUserOpHash(userOp);\\n\\n        // validate all numeric values in userOp are well below 128 bit, so they can safely be added\\n        // and multiplied without causing overflow\\n        uint256 maxGasValues = mUserOp.preVerificationGas |\\n            mUserOp.verificationGasLimit |\\n            mUserOp.callGasLimit |\\n            userOp.maxFeePerGas |\\n            userOp.maxPriorityFeePerGas;\\n        require(maxGasValues <= type(uint120).max, \\\"AA94 gas values overflow\\\");\\n\\n        uint256 gasUsedByValidateAccountPrepayment;\\n        uint256 requiredPreFund = _getRequiredPrefund(mUserOp);\\n        (\\n            gasUsedByValidateAccountPrepayment,\\n            validationData\\n        ) = _validateAccountPrepayment(\\n            opIndex,\\n            userOp,\\n            outOpInfo,\\n            requiredPreFund\\n        );\\n        //a \\\"marker\\\" where account opcode validation is done and paymaster opcode validation is about to start\\n        // (used only by off-chain simulateValidation)\\n        numberMarker();\\n\\n        bytes memory context;\\n        if (mUserOp.paymaster != address(0)) {\\n            (context, paymasterValidationData) = _validatePaymasterPrepayment(\\n                opIndex,\\n                userOp,\\n                outOpInfo,\\n                requiredPreFund,\\n                gasUsedByValidateAccountPrepayment\\n            );\\n        }\\n        unchecked {\\n            uint256 gasUsed = preGas - gasleft();\\n\\n            if (userOp.verificationGasLimit < gasUsed) {\\n                revert FailedOp(opIndex, \\\"AA40 over verificationGasLimit\\\");\\n            }\\n            outOpInfo.prefund = requiredPreFund;\\n            outOpInfo.contextOffset = getOffsetOfMemoryBytes(context);\\n            outOpInfo.preOpGas = preGas - gasleft() + userOp.preVerificationGas;\\n        }\\n    }\\n\\n    /**\\n     * process post-operation.\\n     * called just after the callData is executed.\\n     * if a paymaster is defined and its validation returned a non-empty context, its postOp is called.\\n     * the excess amount is refunded to the account (or paymaster - if it was used in the request)\\n     * @param opIndex index in the batch\\n     * @param mode - whether is called from innerHandleOp, or outside (postOpReverted)\\n     * @param opInfo userOp fields and info collected during validation\\n     * @param context the context returned in validatePaymasterUserOp\\n     * @param actualGas the gas used so far by this user operation\\n     */\\n    function _handlePostOp(\\n        uint256 opIndex,\\n        IPaymaster.PostOpMode mode,\\n        UserOpInfo memory opInfo,\\n        bytes memory context,\\n        uint256 actualGas\\n    ) private returns (uint256 actualGasCost) {\\n        uint256 preGas = gasleft();\\n        unchecked {\\n            address refundAddress;\\n            MemoryUserOp memory mUserOp = opInfo.mUserOp;\\n            uint256 gasPrice = getUserOpGasPrice(mUserOp);\\n\\n            address paymaster = mUserOp.paymaster;\\n            if (paymaster == address(0)) {\\n                refundAddress = mUserOp.sender;\\n            } else {\\n                refundAddress = paymaster;\\n                if (context.length > 0) {\\n                    actualGasCost = actualGas * gasPrice;\\n                    if (mode != IPaymaster.PostOpMode.postOpReverted) {\\n                        IPaymaster(paymaster).postOp{\\n                            gas: mUserOp.verificationGasLimit\\n                        }(mode, context, actualGasCost);\\n                    } else {\\n                        // solhint-disable-next-line no-empty-blocks\\n                        try\\n                            IPaymaster(paymaster).postOp{\\n                                gas: mUserOp.verificationGasLimit\\n                            }(mode, context, actualGasCost)\\n                        {} catch Error(string memory reason) {\\n                            revert FailedOp(\\n                                opIndex,\\n                                string.concat(\\\"AA50 postOp reverted: \\\", reason)\\n                            );\\n                        } catch {\\n                            revert FailedOp(opIndex, \\\"AA50 postOp revert\\\");\\n                        }\\n                    }\\n                }\\n            }\\n            actualGas += preGas - gasleft();\\n            actualGasCost = actualGas * gasPrice;\\n            if (opInfo.prefund < actualGasCost) {\\n                revert FailedOp(opIndex, \\\"AA51 prefund below actualGasCost\\\");\\n            }\\n            uint256 refund = opInfo.prefund - actualGasCost;\\n            _incrementDeposit(refundAddress, refund);\\n            bool success = mode == IPaymaster.PostOpMode.opSucceeded;\\n            emit UserOperationEvent(\\n                opInfo.userOpHash,\\n                mUserOp.sender,\\n                mUserOp.paymaster,\\n                mUserOp.nonce,\\n                success,\\n                actualGasCost,\\n                actualGas\\n            );\\n        } // unchecked\\n    }\\n\\n    /**\\n     * the gas price this UserOp agrees to pay.\\n     * relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n     */\\n    function getUserOpGasPrice(\\n        MemoryUserOp memory mUserOp\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            uint256 maxFeePerGas = mUserOp.maxFeePerGas;\\n            uint256 maxPriorityFeePerGas = mUserOp.maxPriorityFeePerGas;\\n            if (maxFeePerGas == maxPriorityFeePerGas) {\\n                //legacy mode (for networks that don't support basefee opcode)\\n                return maxFeePerGas;\\n            }\\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n        }\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function getOffsetOfMemoryBytes(\\n        bytes memory data\\n    ) internal pure returns (uint256 offset) {\\n        assembly {\\n            offset := data\\n        }\\n    }\\n\\n    function getMemoryBytesFromOffset(\\n        uint256 offset\\n    ) internal pure returns (bytes memory data) {\\n        assembly {\\n            data := offset\\n        }\\n    }\\n\\n    //place the NUMBER opcode in the code.\\n    // this is used as a marker during simulation, as this OP is completely banned from the simulated code of the\\n    // account and paymaster.\\n    function numberMarker() internal view {\\n        assembly {\\n            mstore(0, number())\\n        }\\n    }\\n}\",\"keccak256\":\"0x305c807eab3a94911640135e2f332233a97be63d29786e4c441e436b9a76892d\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/core/Exec.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.5 <0.9.0;\\n\\n// solhint-disable no-inline-assembly\\n\\n/**\\n * Utility functions helpful when making different kinds of contract calls in Solidity.\\n */\\nlibrary Exec {\\n\\n    function call(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        assembly {\\n            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    function staticcall(\\n        address to,\\n        bytes memory data,\\n        uint256 txGas\\n    ) internal view returns (bool success) {\\n        assembly {\\n            success := staticcall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    function delegateCall(\\n        address to,\\n        bytes memory data,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        assembly {\\n            success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    // get returned data from last call or calldelegate\\n    function getReturnData(uint256 maxLen) internal pure returns (bytes memory returnData) {\\n        assembly {\\n            let len := returndatasize()\\n            if gt(len, maxLen) {\\n                len := maxLen\\n            }\\n            let ptr := mload(0x40)\\n            mstore(0x40, add(ptr, add(len, 0x20)))\\n            mstore(ptr, len)\\n            returndatacopy(add(ptr, 0x20), 0, len)\\n            returnData := ptr\\n        }\\n    }\\n\\n    // revert with explicit byte array (probably reverted info from call)\\n    function revertWithData(bytes memory returnData) internal pure {\\n        assembly {\\n            revert(add(returnData, 32), mload(returnData))\\n        }\\n    }\\n\\n    function callAndRevert(address to, bytes memory data, uint256 maxLen) internal {\\n        bool success = call(to,0,data,gasleft());\\n        if (!success) {\\n            revertWithData(getReturnData(maxLen));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b232117afbc2939f3ffc92745614867e9e1d475a3e1e5443adae13c200174f1\",\"license\":\"LGPL-3.0-only\"},\"contracts/eip4337/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\nstruct ValidationData {\\n    address aggregator;\\n    uint48 validAfter;\\n    uint48 validUntil;\\n}\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\nfunction _parseValidationData(\\n    uint validationData\\n) pure returns (ValidationData memory data) {\\n    address aggregator = address(uint160(validationData));\\n    uint48 validUntil = uint48(validationData >> 160);\\n    if (validUntil == 0) {\\n        validUntil = type(uint48).max;\\n    }\\n    uint48 validAfter = uint48(validationData >> (48 + 160));\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n// intersect account and paymaster ranges.\\nfunction _intersectTimeRange(\\n    uint256 validationData,\\n    uint256 paymasterValidationData\\n) pure returns (ValidationData memory) {\\n    ValidationData memory accountValidationData = _parseValidationData(\\n        validationData\\n    );\\n    ValidationData memory pmValidationData = _parseValidationData(\\n        paymasterValidationData\\n    );\\n    address aggregator = accountValidationData.aggregator;\\n    if (aggregator == address(0)) {\\n        aggregator = pmValidationData.aggregator;\\n    }\\n    uint48 validAfter = accountValidationData.validAfter;\\n    uint48 validUntil = accountValidationData.validUntil;\\n    uint48 pmValidAfter = pmValidationData.validAfter;\\n    uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n    if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n    if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\nfunction _packValidationData(\\n    ValidationData memory data\\n) pure returns (uint256) {\\n    return\\n        uint160(data.aggregator) |\\n        (uint256(data.validUntil) << 160) |\\n        (uint256(data.validAfter) << (160 + 48));\\n}\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\nfunction _packValidationData(\\n    bool sigFailed,\\n    uint48 validUntil,\\n    uint48 validAfter\\n) pure returns (uint256) {\\n    return\\n        (sigFailed ? 1 : 0) |\\n        (uint256(validUntil) << 160) |\\n        (uint256(validAfter) << (160 + 48));\\n}\\n\",\"keccak256\":\"0x10e419b300e0ea69db85a648605e874fd73df2dc5f36a56bea8f6601455487fc\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/core/SenderCreator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../Wallet.sol\\\";\\n\\n/**\\n * helper contract for EntryPoint, to call userOp.initCode from a \\\"neutral\\\" address,\\n * which is explicitly not the entryPoint itself.\\n */\\ncontract SenderCreator {\\n    function deployProxy(\\n        address _singleton,\\n        bytes memory initCode,\\n        bytes32 salt\\n    ) internal returns (address proxy) {\\n        bytes memory creationCode = abi.encodePacked(\\n            Wallet.creationCode,\\n            uint256(uint160(_singleton))\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create2(\\n                0x0,\\n                add(0x20, creationCode),\\n                mload(creationCode),\\n                salt\\n            )\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n        (bool success, ) = proxy.call(initCode);\\n        require(success, \\\"init wallet failed\\\");\\n    }\\n\\n    function getAddress(\\n        bytes calldata initCode\\n    ) external view returns (address) {\\n        bytes32 salt = bytes32(initCode[20:52]);\\n        address singleton = address(bytes20(initCode[0:20]));\\n        bytes memory creationCode = abi.encodePacked(\\n            Wallet.creationCode,\\n            uint256(uint160(singleton))\\n        );\\n        bytes32 has = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                salt,\\n                keccak256(creationCode)\\n            )\\n        );\\n        // NOTE: cast last 20 bytes of hash to address\\n        return address(uint160(uint(has)));\\n    }\\n\\n    function createSender(\\n        bytes calldata initCode\\n    ) external returns (address sender) {\\n        address singleton = address(bytes20(initCode[0:20]));\\n        bytes32 salt = bytes32(initCode[20:52]);\\n        bytes memory initCallData = initCode[52:];\\n        sender = address(deployProxy(singleton, initCallData, salt));\\n    }\\n}\\n\",\"keccak256\":\"0x1a438d080e132fd859c9cbaa6e576313317a3bf6ab9b483a37cd35c1101ebcee\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/core/StakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/IStakeManager.sol\\\";\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable not-rely-on-time */\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\\n */\\nabstract contract StakeManager is IStakeManager {\\n    /// maps paymaster to their deposits and stakes\\n    mapping(address => DepositInfo) public deposits;\\n\\n    /// @inheritdoc IStakeManager\\n    function getDepositInfo(\\n        address account\\n    ) public view returns (DepositInfo memory info) {\\n        return deposits[account];\\n    }\\n\\n    // internal method to return just the stake info\\n    function _getStakeInfo(\\n        address addr\\n    ) internal view returns (StakeInfo memory info) {\\n        DepositInfo storage depositInfo = deposits[addr];\\n        info.stake = depositInfo.stake;\\n        info.unstakeDelaySec = depositInfo.unstakeDelaySec;\\n    }\\n\\n    /// return the deposit (for gas payment) of the account\\n    function balanceOf(address account) public view returns (uint256) {\\n        return deposits[account].deposit;\\n    }\\n\\n    receive() external payable {\\n        depositTo(msg.sender);\\n    }\\n\\n    function _incrementDeposit(address account, uint256 amount) internal {\\n        DepositInfo storage info = deposits[account];\\n        uint256 newAmount = info.deposit + amount;\\n        require(newAmount <= type(uint112).max, \\\"deposit overflow\\\");\\n        info.deposit = uint112(newAmount);\\n    }\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) public payable {\\n        _incrementDeposit(account, msg.value);\\n        DepositInfo storage info = deposits[account];\\n        emit Deposited(account, info.deposit);\\n    }\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 unstakeDelaySec) public payable {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(unstakeDelaySec > 0, \\\"must specify unstake delay\\\");\\n        require(\\n            unstakeDelaySec >= info.unstakeDelaySec,\\n            \\\"cannot decrease unstake time\\\"\\n        );\\n        uint256 stake = info.stake + msg.value;\\n        require(stake > 0, \\\"no stake specified\\\");\\n        require(stake <= type(uint112).max, \\\"stake overflow\\\");\\n        deposits[msg.sender] = DepositInfo(\\n            info.deposit,\\n            true,\\n            uint112(stake),\\n            unstakeDelaySec,\\n            0\\n        );\\n        emit StakeLocked(msg.sender, stake, unstakeDelaySec);\\n    }\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(info.unstakeDelaySec != 0, \\\"not staked\\\");\\n        require(info.staked, \\\"already unstaking\\\");\\n        uint48 withdrawTime = uint48(block.timestamp) + info.unstakeDelaySec;\\n        info.withdrawTime = withdrawTime;\\n        info.staked = false;\\n        emit StakeUnlocked(msg.sender, withdrawTime);\\n    }\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        uint256 stake = info.stake;\\n        require(stake > 0, \\\"No stake to withdraw\\\");\\n        require(info.withdrawTime > 0, \\\"must call unlockStake() first\\\");\\n        require(\\n            info.withdrawTime <= block.timestamp,\\n            \\\"Stake withdrawal is not due\\\"\\n        );\\n        info.unstakeDelaySec = 0;\\n        info.withdrawTime = 0;\\n        info.stake = 0;\\n        emit StakeWithdrawn(msg.sender, withdrawAddress, stake);\\n        (bool success, ) = withdrawAddress.call{value: stake}(\\\"\\\");\\n        require(success, \\\"failed to withdraw stake\\\");\\n    }\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(\\n        address payable withdrawAddress,\\n        uint256 withdrawAmount\\n    ) external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(withdrawAmount <= info.deposit, \\\"Withdraw amount too large\\\");\\n        info.deposit = uint112(info.deposit - withdrawAmount);\\n        emit Withdrawn(msg.sender, withdrawAddress, withdrawAmount);\\n        (bool success, ) = withdrawAddress.call{value: withdrawAmount}(\\\"\\\");\\n        require(success, \\\"failed to withdraw\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x154766ae5fc0b8424b03bf1bbb940af81800d7a7aba3ef2c8a46c231a143178c\",\"license\":\"GPL-3.0-only\"},\"contracts/eip4337/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager {\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address indexed paymaster,\\n        uint256 nonce,\\n        bool success,\\n        uint256 actualGasCost,\\n        uint256 actualGasUsed\\n    );\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address factory,\\n        address paymaster\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce,\\n        bytes revertReason\\n    );\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(\\n        ReturnInfo returnInfo,\\n        StakeInfo senderInfo,\\n        StakeInfo factoryInfo,\\n        StakeInfo paymasterInfo\\n    );\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(\\n        ReturnInfo returnInfo,\\n        StakeInfo senderInfo,\\n        StakeInfo factoryInfo,\\n        StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo\\n    );\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(\\n        uint256 preOpGas,\\n        uint256 paid,\\n        uint48 validAfter,\\n        uint48 validUntil,\\n        bool targetSuccess,\\n        bytes targetResult\\n    );\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(\\n        UserOperation[] calldata ops,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(\\n        UserOperation calldata userOp\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(\\n        UserOperation calldata op,\\n        address target,\\n        bytes calldata targetCallData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x64516675039e845ff5f86e22522ba67bc474058910f537df4a59cdb40712805a\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n\\n    enum PostOpMode {\\n        opSucceeded, // user op succeeded\\n        opReverted, // user op reverted. still has to pay for gas.\\n        postOpReverted //user op succeeded, but caused postOp to revert. Now it's a 2nd call, after user's op was deliberately reverted.\\n    }\\n\\n    /**\\n     * payment validation: check if paymaster agrees to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp the user operation\\n     * @param userOpHash hash of the user's request data.\\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\\n     * @return context value to send to a postOp\\n     *      zero length to signify postOp is not required.\\n     * @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    external returns (bytes memory context, uint256 validationData);\\n\\n    /**\\n     * post-operation handler.\\n     * Must verify sender is the entryPoint\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\\n}\\n\",\"keccak256\":\"0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456\",\"license\":\"GPL-3.0\"},\"contracts/eip4337/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"contracts/eip4337/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        // copy directly the userOp from calldata up to (but not including) the signature.\\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\\n        // than referencing each field separately.\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xf67381bb53c148ce587a74acdf576cc05d641a952180d801ac982898de30810e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003b9638038062003b9683398101604081905262000034916200005a565b600180546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b613afa806200009c6000396000f3fe6080604052600436106101025760003560e01c80638f41ec5a11610095578063bb9fe6bf11610064578063bb9fe6bf146103b9578063c23a5cea146103ce578063d6383f94146103ee578063ee2194231461040e578063fc7e286d1461042e57600080fd5b80638f41ec5a14610351578063957122ab14610366578063a619353114610386578063b760faf9146103a657600080fd5b8063205c2878116100d1578063205c2878146101b55780634b1d7cf5146101d55780635287ce12146101f557806370a082311461031257600080fd5b80630396cb601461011757806309ccb8801461012a5780631d732756146101675780631fad948c1461019557600080fd5b3661011257610110336104e3565b005b600080fd5b610110610125366004612ccc565b61054a565b34801561013657600080fd5b5060015461014a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017357600080fd5b50610187610182366004612edc565b6107d9565b60405190815260200161015e565b3480156101a157600080fd5b506101106101b0366004612fe5565b61094c565b3480156101c157600080fd5b506101106101d036600461303b565b610a8c565b3480156101e157600080fd5b506101106101f0366004612fe5565b610c08565b34801561020157600080fd5b506102ba610210366004613067565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b031660009081526020818152604091829020825160a08101845281546001600160701b038082168352600160701b820460ff16151594830194909452600160781b90049092169282019290925260019091015463ffffffff81166060830152640100000000900465ffffffffffff16608082015290565b6040805182516001600160701b03908116825260208085015115159083015283830151169181019190915260608083015163ffffffff169082015260809182015165ffffffffffff169181019190915260a00161015e565b34801561031e57600080fd5b5061018761032d366004613067565b6001600160a01b03166000908152602081905260409020546001600160701b031690565b34801561035d57600080fd5b50610187600181565b34801561037257600080fd5b50610110610381366004613084565b611014565b34801561039257600080fd5b506101876103a1366004613121565b611111565b6101106103b4366004613067565b6104e3565b3480156103c557600080fd5b50610110611153565b3480156103da57600080fd5b506101106103e9366004613067565b61127c565b3480156103fa57600080fd5b50610110610409366004613155565b6114b4565b34801561041a57600080fd5b50610110610429366004613121565b6115af565b34801561043a57600080fd5b5061049d610449366004613067565b600060208190529081526040902080546001909101546001600160701b0380831692600160701b810460ff1692600160781b9091049091169063ffffffff811690640100000000900465ffffffffffff1685565b604080516001600160701b0396871681529415156020860152929094169183019190915263ffffffff16606082015265ffffffffffff909116608082015260a00161015e565b6104ed813461178b565b6001600160a01b03811660008181526020818152604091829020805492516001600160701b03909316835292917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c491015b60405180910390a25050565b33600090815260208190526040902063ffffffff82166105b15760405162461bcd60e51b815260206004820152601a60248201527f6d757374207370656369667920756e7374616b652064656c617900000000000060448201526064015b60405180910390fd5b600181015463ffffffff908116908316101561060f5760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016105a8565b805460009061062f903490600160781b90046001600160701b03166131cc565b9050600081116106765760405162461bcd60e51b81526020600482015260126024820152711b9bc81cdd185ad9481cdc1958da599a595960721b60448201526064016105a8565b6001600160701b038111156106be5760405162461bcd60e51b815260206004820152600e60248201526d7374616b65206f766572666c6f7760901b60448201526064016105a8565b6040805160a08101825283546001600160701b0390811682526001602080840182815286841685870190815263ffffffff808b16606088019081526000608089018181523380835296829052908a902098518954955194518916600160781b02600160781b600160e81b0319951515600160701b026effffffffffffffffffffffffffffff199097169190991617949094179290921695909517865551949092018054925165ffffffffffff166401000000000269ffffffffffffffffffff19909316949093169390931717905590517fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01906107cc908490879091825263ffffffff16602082015260400190565b60405180910390a2505050565b6000805a905033301461082e5760405162461bcd60e51b815260206004820152601760248201527f4141393220696e7465726e616c2063616c6c206f6e6c7900000000000000000060448201526064016105a8565b8451604081015160608201518101611388015a10156108585763deaddead60e01b60005260206000fd5b8751600090156108ec576000610875846000015160008c86611827565b9050806108ea57600061088961080061183f565b8051909150156108e45784600001516001600160a01b03168a602001517f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018760200151846040516108db92919061322f565b60405180910390a35b60019250505b505b600088608001515a860301905061093e6000838b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925061186b915050565b9a9950505050505050505050565b816000816001600160401b0381111561096757610967612cf2565b6040519080825280602002602001820160405280156109a057816020015b61098d612c42565b8152602001906001900390816109855790505b50905060005b82811015610a195760008282815181106109c2576109c2613248565b602002602001015190506000806109fd848a8a878181106109e5576109e5613248565b90506020028101906109f7919061325e565b85611b62565b91509150610a0e8483836000611ce4565b5050506001016109a6565b506000805b83811015610a7957610a6d81888884818110610a3c57610a3c613248565b9050602002810190610a4e919061325e565b858481518110610a6057610a60613248565b6020026020010151611e80565b90910190600101610a1e565b50610a848482611fa7565b505050505050565b33600090815260208190526040902080546001600160701b0316821115610af55760405162461bcd60e51b815260206004820152601960248201527f576974686472617720616d6f756e7420746f6f206c617267650000000000000060448201526064016105a8565b8054610b0b9083906001600160701b031661327f565b81546001600160701b0319166001600160701b0391909116178155604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a26000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610bb7576040519150601f19603f3d011682016040523d82523d6000602084013e610bbc565b606091505b5050905080610c025760405162461bcd60e51b81526020600482015260126024820152716661696c656420746f20776974686472617760701b60448201526064016105a8565b50505050565b816000805b82811015610d7c5736868683818110610c2857610c28613248565b9050602002810190610c3a9190613292565b9050366000610c4983806132a8565b90925090506000610c606040850160208601613067565b90506000196001600160a01b03821601610cbc5760405162461bcd60e51b815260206004820152601760248201527f4141393620696e76616c69642061676772656761746f7200000000000000000060448201526064016105a8565b6001600160a01b03811615610d59576001600160a01b03811663e3563a4f8484610ce960408901896132f1565b6040518563ffffffff1660e01b8152600401610d08949392919061349c565b60006040518083038186803b158015610d2057600080fd5b505afa925050508015610d31575060015b610d595760405163086a9f7560e41b81526001600160a01b03821660048201526024016105a8565b610d6382876131cc565b9550505050508080610d7490613519565b915050610c0d565b506000816001600160401b03811115610d9757610d97612cf2565b604051908082528060200260200182016040528015610dd057816020015b610dbd612c42565b815260200190600190039081610db55790505b5090506000805b84811015610ebb5736888883818110610df257610df2613248565b9050602002810190610e049190613292565b9050366000610e1383806132a8565b90925090506000610e2a6040850160208601613067565b90508160005b81811015610ea2576000898981518110610e4c57610e4c613248565b60200260200101519050600080610e6f8b8989878181106109e5576109e5613248565b91509150610e7f84838389611ce4565b8a610e8981613519565b9b50505050508080610e9a90613519565b915050610e30565b5050505050508080610eb390613519565b915050610dd7565b50600080915060005b85811015610fd45736898983818110610edf57610edf613248565b9050602002810190610ef19190613292565b9050610f036040820160208301613067565b6001600160a01b03167f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d60405160405180910390a2366000610f4583806132a8565b90925090508060005b81811015610fbc57610f9088858584818110610f6c57610f6c613248565b9050602002810190610f7e919061325e565b8b8b81518110610a6057610a60613248565b610f9a90886131cc565b965087610fa681613519565b9850508080610fb490613519565b915050610f4e565b50505050508080610fcc90613519565b915050610ec4565b506040516000907f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d908290a261100a8682611fa7565b5050505050505050565b8315801561102a57506001600160a01b0383163b155b156110775760405162461bcd60e51b815260206004820152601960248201527f41413230206163636f756e74206e6f74206465706c6f7965640000000000000060448201526064016105a8565b601481106110ef57600061108e6014828486613532565b6110979161355c565b60601c9050803b6000036110ed5760405162461bcd60e51b815260206004820152601b60248201527f41413330207061796d6173746572206e6f74206465706c6f796564000000000060448201526064016105a8565b505b60405162461bcd60e51b815260206004820152600060248201526044016105a8565b600061111c826120a5565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b3360009081526020819052604081206001810154909163ffffffff90911690036111ac5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081cdd185ad95960b21b60448201526064016105a8565b8054600160701b900460ff166111f85760405162461bcd60e51b8152602060048201526011602482015270616c726561647920756e7374616b696e6760781b60448201526064016105a8565b60018101546000906112109063ffffffff1642613591565b60018301805469ffffffffffff00000000191664010000000065ffffffffffff841690810291909117909155835460ff60701b1916845560405190815290915033907ffa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a9060200161053e565b3360009081526020819052604090208054600160781b90046001600160701b0316806112e15760405162461bcd60e51b81526020600482015260146024820152734e6f207374616b6520746f20776974686472617760601b60448201526064016105a8565b6001820154640100000000900465ffffffffffff166113425760405162461bcd60e51b815260206004820152601d60248201527f6d7573742063616c6c20756e6c6f636b5374616b65282920666972737400000060448201526064016105a8565b60018201544264010000000090910465ffffffffffff1611156113a75760405162461bcd60e51b815260206004820152601b60248201527f5374616b65207769746864726177616c206973206e6f7420647565000000000060448201526064016105a8565b60018201805469ffffffffffffffffffff191690558154600160781b600160e81b0319168255604080516001600160a01b03851681526020810183905233917fb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3910160405180910390a26000836001600160a01b03168260405160006040518083038185875af1925050503d806000811461145e576040519150601f19603f3d011682016040523d82523d6000602084013e611463565b606091505b5050905080610c025760405162461bcd60e51b815260206004820152601860248201527f6661696c656420746f207769746864726177207374616b65000000000000000060448201526064016105a8565b6114bc612c42565b6114c5856120be565b6000806114d460008885611b62565b9150915060006114e48383612198565b90506114ef43600052565b60006114fd60008a87611e80565b905061150843600052565b600060606001600160a01b038a161561157e57896001600160a01b031689896040516115359291906135b7565b6000604051808303816000865af19150503d8060008114611572576040519150601f19603f3d011682016040523d82523d6000602084013e611577565b606091505b5090925090505b866080015183856020015186604001518585604051630116f59360e71b81526004016105a8969594939291906135c7565b6115b7612c42565b6115c0826120be565b6000806115cf60008585611b62565b9150915060006115e6846000015160a00151612265565b8451519091506000906115f890612265565b9050611617604051806040016040528060008152602001600081525090565b36600061162760408a018a6132f1565b90925090506000601482101561163e576000611659565b61164c601460008486613532565b6116559161355c565b60601c5b905061166481612265565b935050505060006116758686612198565b9050600081600001519050600060016001600160a01b0316826001600160a01b031614905060006040518060c001604052808b6080015181526020018b6040015181526020018315158152602001856020015165ffffffffffff168152602001856040015165ffffffffffff1681526020016116f28c6060015190565b905290506001600160a01b0383161580159061171857506001600160a01b038316600114155b1561176a5760006040518060400160405280856001600160a01b0316815260200161174286612265565b81525090508187878a84604051633ebb2d3960e21b81526004016105a8959493929190613669565b8086868960405163e0cff05f60e01b81526004016105a894939291906136e9565b6001600160a01b038216600090815260208190526040812080549091906117bc9084906001600160701b03166131cc565b90506001600160701b038111156118085760405162461bcd60e51b815260206004820152601060248201526f6465706f736974206f766572666c6f7760801b60448201526064016105a8565b81546001600160701b0319166001600160701b03919091161790555050565b6000806000845160208601878987f195945050505050565b60603d8281111561184d5750815b604051602082018101604052818152816000602083013e9392505050565b6000805a855190915060009081611881826122b4565b60a08301519091506001600160a01b0381166118a05782519350611a47565b809350600088511115611a4757868202955060028a60028111156118c6576118c6613740565b1461193857606083015160405163a9a2340960e01b81526001600160a01b0383169163a9a2340991611900908e908d908c90600401613756565b600060405180830381600088803b15801561191a57600080fd5b5087f115801561192e573d6000803e3d6000fd5b5050505050611a47565b606083015160405163a9a2340960e01b81526001600160a01b0383169163a9a234099161196d908e908d908c90600401613756565b600060405180830381600088803b15801561198757600080fd5b5087f193505050508015611999575060015b611a47576119a561379d565b806308c379a0036119fe57506119b96137b9565b806119c45750611a00565b8b816040516020016119d69190613842565b60408051601f1981840301815290829052631101335b60e11b82526105a8929160040161322f565b505b8a604051631101335b60e11b81526004016105a89181526040602082018190526012908201527110504d4c081c1bdcdd13dc081c995d995c9d60721b606082015260800190565b5a85038701965081870295508589604001511015611ab0578a604051631101335b60e11b81526004016105a891815260406020808301829052908201527f414135312070726566756e642062656c6f772061637475616c476173436f7374606082015260800190565b6040890151869003611ac2858261178b565b6000808c6002811115611ad757611ad7613740565b1490508460a001516001600160a01b031685600001516001600160a01b03168c602001517f49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f8860200151858d8f604051611b4a949392919093845291151560208401526040830152606082015260800190565b60405180910390a45050505050505095945050505050565b60008060005a8451909150611b7786826122e4565b611b8086611111565b6020860152604081015160608201516080830151171760e087013517610100870135176effffffffffffffffffffffffffffff811115611c025760405162461bcd60e51b815260206004820152601860248201527f41413934206761732076616c756573206f766572666c6f77000000000000000060448201526064016105a8565b600080611c0e846123dd565b9050611c1c8a8a8a8461242a565b97509150611c2943600052565b60a08401516060906001600160a01b031615611c5157611c4c8b8b8b8587612662565b975090505b60005a87039050808b60a001351015611cb6578b604051631101335b60e11b81526004016105a8918152604060208201819052601e908201527f41413430206f76657220766572696669636174696f6e4761734c696d69740000606082015260800190565b60408a018390528160608b015260c08b01355a8803018a608001818152505050505050505050935093915050565b600080611cf085612885565b91509150816001600160a01b0316836001600160a01b031614611d565785604051631101335b60e11b81526004016105a89181526040602082018190526014908201527320a0991a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8015611dae5785604051631101335b60e11b81526004016105a89181526040602082018190526017908201527f414132322065787069726564206f72206e6f7420647565000000000000000000606082015260800190565b6000611db985612885565b925090506001600160a01b03811615611e155786604051631101335b60e11b81526004016105a89181526040602082018190526014908201527320a0999a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8115611e775786604051631101335b60e11b81526004016105a89181526040602082018190526021908201527f41413332207061796d61737465722065787069726564206f72206e6f742064756060820152606560f81b608082015260a00190565b50505050505050565b6000805a90506000611e93846060015190565b905030631d732756611ea860608801886132f1565b87856040518563ffffffff1660e01b8152600401611ec99493929190613880565b6020604051808303816000875af1925050508015611f04575060408051601f3d908101601f19168201909252611f0191810190613933565b60015b611f9b57600060206000803e50600051632152215360e01b8101611f665786604051631101335b60e11b81526004016105a8918152604060208201819052600f908201526e41413935206f7574206f662067617360881b606082015260800190565b600085608001515a611f78908661327f565b611f8291906131cc565b9050611f9288600288868561186b565b94505050611f9e565b92505b50509392505050565b6001600160a01b038216611ffd5760405162461bcd60e51b815260206004820152601860248201527f4141393020696e76616c69642062656e6566696369617279000000000000000060448201526064016105a8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461204a576040519150601f19603f3d011682016040523d82523d6000602084013e61204f565b606091505b50509050806120a05760405162461bcd60e51b815260206004820152601f60248201527f41413931206661696c65642073656e6420746f2062656e65666963696172790060448201526064016105a8565b505050565b60006120b0826128d8565b805190602001209050919050565b3063957122ab6120d160408401846132f1565b6120de6020860186613067565b6120ec6101208701876132f1565b6040518663ffffffff1660e01b815260040161210c95949392919061394c565b60006040518083038186803b15801561212457600080fd5b505afa925050508015612135575060015b6121955761214161379d565b806308c379a00361218957506121556137b9565b80612160575061218b565b80511561218557600081604051631101335b60e11b81526004016105a892919061322f565b5050565b505b3d6000803e3d6000fd5b50565b60408051606081018252600080825260208201819052918101829052906121be84612917565b905060006121cb84612917565b82519091506001600160a01b0381166121e2575080515b602080840151604080860151928501519085015191929165ffffffffffff8083169085161015612210578193505b8065ffffffffffff168365ffffffffffff16111561222c578092505b5050604080516060810182526001600160a01b03909416845265ffffffffffff9283166020850152911690820152925050505b92915050565b604080518082018252600080825260208083018281526001600160a01b03959095168252819052919091208054600160781b90046001600160701b031682526001015463ffffffff1690915290565b60c081015160e0820151600091908082036122d0575092915050565b6122dc82488301612988565b949350505050565b6122f16020830183613067565b6001600160a01b0316815260208083013590820152608080830135604083015260a0830135606083015260c0808401359183019190915260e08084013591830191909152610100830135908201523660006123506101208501856132f1565b909250905080156123d05760148110156123ac5760405162461bcd60e51b815260206004820152601d60248201527f4141393320696e76616c6964207061796d6173746572416e644461746100000060448201526064016105a8565b6123ba601460008385613532565b6123c39161355c565b60601c60a0840152610c02565b600060a084015250505050565b60a081015160009081906001600160a01b03166123fb5760016123fe565b60035b60ff16905060008360800151828560600151028560400151010190508360c00151810292505050919050565b60008060005a855180519192509061244f898861244a60408c018c6132f1565b6129a0565b60a082015161245d43600052565b60006001600160a01b0382166124a5576001600160a01b0383166000908152602081905260409020546001600160701b031688811161249e578089036124a1565b60005b9150505b606084015160208a0151604051633a871cdd60e01b81526001600160a01b03861692633a871cdd9290916124df918f918790600401613982565b60206040518083038160008887f19350505050801561251b575060408051601f3d908101601f1916820190925261251891810190613933565b60015b6125a55761252761379d565b806308c379a003612558575061253b6137b9565b80612546575061255a565b8b816040516020016119d691906139a7565b505b8a604051631101335b60e11b81526004016105a8918152604060208201819052601690820152754141323320726576657274656420286f72204f4f472960501b606082015260800190565b95506001600160a01b03821661264f576001600160a01b038316600090815260208190526040902080546001600160701b0316808a1115612632578c604051631101335b60e11b81526004016105a89181526040602082018190526017908201527f41413231206469646e2774207061792070726566756e64000000000000000000606082015260800190565b81546001600160701b031916908a90036001600160701b03161790555b5a85039650505050505094509492505050565b825160608181015190916000918481116126be5760405162461bcd60e51b815260206004820152601f60248201527f4141343120746f6f206c6974746c6520766572696669636174696f6e4761730060448201526064016105a8565b60a08201516001600160a01b038116600090815260208190526040902080548784039291906001600160701b031689811015612746578c604051631101335b60e11b81526004016105a8918152604060208201819052601e908201527f41413331207061796d6173746572206465706f73697420746f6f206c6f770000606082015260800190565b8981038260000160006101000a8154816001600160701b0302191690836001600160701b03160217905550826001600160a01b031663f465c77e858e8e602001518e6040518563ffffffff1660e01b81526004016127a693929190613982565b60006040518083038160008887f1935050505080156127e757506040513d6000823e601f3d908101601f191682016040526127e491908101906139de565b60015b612871576127f361379d565b806308c379a00361282457506128076137b9565b806128125750612826565b8d816040516020016119d69190613a69565b505b8c604051631101335b60e11b81526004016105a8918152604060208201819052601690820152754141333320726576657274656420286f72204f4f472960501b606082015260800190565b909e909d509b505050505050505050505050565b6000808260000361289b57506000928392509050565b60006128a684612917565b9050806040015165ffffffffffff164211806128cd5750806020015165ffffffffffff1642105b905194909350915050565b60603660006128eb6101408501856132f1565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b60408051606081018252600080825260208201819052918101919091528160a081901c65ffffffffffff8116600003612953575065ffffffffffff5b604080516060810182526001600160a01b03909316835260d09490941c602083015265ffffffffffff16928101929092525090565b60008183106129975781612999565b825b9392505050565b8015610c02578251516001600160a01b0381163b15612a0b5784604051631101335b60e11b81526004016105a8918152604060208201819052601f908201527f414131302073656e64657220616c726561647920636f6e737472756374656400606082015260800190565b600154845160600151604051632b870d1b60e11b81526000926001600160a01b03169163570e1a3691612a449088908890600401613a93565b60206040518083038160008887f1158015612a63573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612a889190613aa7565b90506001600160a01b038116612aea5785604051631101335b60e11b81526004016105a8918152604060208201819052601b908201527f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000606082015260800190565b816001600160a01b0316816001600160a01b031614612b545785604051631101335b60e11b81526004016105a891815260406020808301829052908201527f4141313420696e6974436f6465206d7573742072657475726e2073656e646572606082015260800190565b806001600160a01b03163b600003612bb75785604051631101335b60e11b81526004016105a891815260406020808301829052908201527f4141313520696e6974436f6465206d757374206372656174652073656e646572606082015260800190565b6000612bc66014828688613532565b612bcf9161355c565b60601c9050826001600160a01b031686602001517fd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d83896000015160a00151604051612c319291906001600160a01b0392831681529116602082015260400190565b60405180910390a350505050505050565b6040518060a00160405280612ca760405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001600080191681526020016000815260200160008152602001600081525090565b600060208284031215612cde57600080fd5b813563ffffffff8116811461299957600080fd5b634e487b7160e01b600052604160045260246000fd5b60a081018181106001600160401b0382111715612d2757612d27612cf2565b60405250565b61010081018181106001600160401b0382111715612d2757612d27612cf2565b601f8201601f191681016001600160401b0381118282101715612d7257612d72612cf2565b6040525050565b60006001600160401b03821115612d9257612d92612cf2565b50601f01601f191660200190565b6001600160a01b038116811461219557600080fd5b8035612dc081612da0565b919050565b6000818303610180811215612dd957600080fd5b604051612de581612d08565b80925061010080831215612df857600080fd5b6040519250612e0683612d2d565b612e0f85612db5565b835260208501356020840152604085013560408401526060850135606084015260808501356080840152612e4560a08601612db5565b60a084015260c085013560c084015260e085013560e084015282825280850135602083015250610120840135604082015261014084013560608201526101608401356080820152505092915050565b60008083601f840112612ea657600080fd5b5081356001600160401b03811115612ebd57600080fd5b602083019150836020828501011115612ed557600080fd5b9250929050565b6000806000806101c08587031215612ef357600080fd5b84356001600160401b0380821115612f0a57600080fd5b818701915087601f830112612f1e57600080fd5b8135612f2981612d79565b604051612f368282612d4d565b8281528a6020848701011115612f4b57600080fd5b82602086016020830137600060208483010152809850505050612f718860208901612dc5565b94506101a0870135915080821115612f8857600080fd5b50612f9587828801612e94565b95989497509550505050565b60008083601f840112612fb357600080fd5b5081356001600160401b03811115612fca57600080fd5b6020830191508360208260051b8501011115612ed557600080fd5b600080600060408486031215612ffa57600080fd5b83356001600160401b0381111561301057600080fd5b61301c86828701612fa1565b909450925050602084013561303081612da0565b809150509250925092565b6000806040838503121561304e57600080fd5b823561305981612da0565b946020939093013593505050565b60006020828403121561307957600080fd5b813561299981612da0565b60008060008060006060868803121561309c57600080fd5b85356001600160401b03808211156130b357600080fd5b6130bf89838a01612e94565b9097509550602088013591506130d482612da0565b909350604087013590808211156130ea57600080fd5b506130f788828901612e94565b969995985093965092949392505050565b6000610160828403121561311b57600080fd5b50919050565b60006020828403121561313357600080fd5b81356001600160401b0381111561314957600080fd5b6122dc84828501613108565b6000806000806060858703121561316b57600080fd5b84356001600160401b038082111561318257600080fd5b61318e88838901613108565b9550602087013591506131a082612da0565b90935060408601359080821115612f8857600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561225f5761225f6131b6565b60005b838110156131fa5781810151838201526020016131e2565b50506000910152565b6000815180845261321b8160208601602086016131df565b601f01601f19169290920160200192915050565b8281526040602082015260006122dc6040830184613203565b634e487b7160e01b600052603260045260246000fd5b6000823561015e1983360301811261327557600080fd5b9190910192915050565b8181038181111561225f5761225f6131b6565b60008235605e1983360301811261327557600080fd5b6000808335601e198436030181126132bf57600080fd5b8301803591506001600160401b038211156132d957600080fd5b6020019150600581901b3603821315612ed557600080fd5b6000808335601e1984360301811261330857600080fd5b8301803591506001600160401b0382111561332257600080fd5b602001915036819003821315612ed557600080fd5b6000808335601e1984360301811261334e57600080fd5b83016020810192503590506001600160401b0381111561336d57600080fd5b803603821315612ed557600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101606133c4846133b785612db5565b6001600160a01b03169052565b602083013560208501526133db6040840184613337565b8260408701526133ee838701828461337c565b925050506133ff6060840184613337565b858303606087015261341283828461337c565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e085015261010080840135818601525061012061345981850185613337565b8684038388015261346b84828461337c565b935050505061014061347f81850185613337565b8684038388015261349184828461337c565b979650505050505050565b6040808252810184905260006060600586901b830181019083018783805b8981101561350257868503605f190184528235368c900361015e190181126134e0578283fd5b6134ec868d83016133a5565b95505060209384019392909201916001016134ba565b50505050828103602084015261349181858761337c565b60006001820161352b5761352b6131b6565b5060010190565b6000808585111561354257600080fd5b8386111561354f57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156135895780818660140360031b1b83161692505b505092915050565b65ffffffffffff8181168382160190808211156135b0576135b06131b6565b5092915050565b8183823760009101908152919050565b868152856020820152600065ffffffffffff8087166040840152808616606084015250831515608083015260c060a083015261360660c0830184613203565b98975050505050505050565b80518252602081015160208301526040810151151560408301526000606082015165ffffffffffff8082166060860152806080850151166080860152505060a082015160c060a08501526122dc60c0850182613203565b600061014080835261367d81840189613612565b915050613697602083018780518252602090810151910152565b845160608301526020948501516080830152835160a08301529284015160c082015281516001600160a01b031660e0820152908301518051610100830152909201516101209092019190915292915050565b60e0815260006136fc60e0830187613612565b9050613715602083018680518252602090810151910152565b8351606083015260208401516080830152825160a0830152602083015160c083015295945050505050565b634e487b7160e01b600052602160045260246000fd5b60006003851061377657634e487b7160e01b600052602160045260246000fd5b8482526060602083015261378d6060830185613203565b9050826040830152949350505050565b600060033d11156137b65760046000803e5060005160e01c5b90565b600060443d10156137c75790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156137f657505050505090565b828501915081518181111561380e5750505050505090565b843d87010160208285010111156138285750505050505090565b61383760208286010187612d4d565b509095945050505050565b75020a09a98103837b9ba27b8103932bb32b93a32b21d160551b8152600082516138738160168501602087016131df565b9190910160160192915050565b60006101c0808352613895818401878961337c565b9050845160018060a01b03808251166020860152602082015160408601526040820151606086015260608201516080860152608082015160a08601528060a08301511660c08601525060c081015160e085015260e08101516101008501525060208501516101208401526040850151610140840152606085015161016084015260808501516101808401528281036101a08401526134918185613203565b60006020828403121561394557600080fd5b5051919050565b60608152600061396060608301878961337c565b6001600160a01b0386166020840152828103604084015261360681858761337c565b60608152600061399560608301866133a5565b60208301949094525060400152919050565b6e020a09919903932bb32b93a32b21d1608d1b8152600082516139d181600f8501602087016131df565b91909101600f0192915050565b600080604083850312156139f157600080fd5b82516001600160401b03811115613a0757600080fd5b8301601f81018513613a1857600080fd5b8051613a2381612d79565b604051613a308282612d4d565b828152876020848601011115613a4557600080fd5b613a568360208301602087016131df565b6020969096015195979596505050505050565b6e020a09999903932bb32b93a32b21d1608d1b8152600082516139d181600f8501602087016131df565b6020815260006122dc60208301848661337c565b600060208284031215613ab957600080fd5b815161299981612da056fea2646970667358221220037db08541ecf10652278ff7a8ff47de4fb157649346752237d042836e4efd3064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80638f41ec5a11610095578063bb9fe6bf11610064578063bb9fe6bf146103b9578063c23a5cea146103ce578063d6383f94146103ee578063ee2194231461040e578063fc7e286d1461042e57600080fd5b80638f41ec5a14610351578063957122ab14610366578063a619353114610386578063b760faf9146103a657600080fd5b8063205c2878116100d1578063205c2878146101b55780634b1d7cf5146101d55780635287ce12146101f557806370a082311461031257600080fd5b80630396cb601461011757806309ccb8801461012a5780631d732756146101675780631fad948c1461019557600080fd5b3661011257610110336104e3565b005b600080fd5b610110610125366004612ccc565b61054a565b34801561013657600080fd5b5060015461014a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017357600080fd5b50610187610182366004612edc565b6107d9565b60405190815260200161015e565b3480156101a157600080fd5b506101106101b0366004612fe5565b61094c565b3480156101c157600080fd5b506101106101d036600461303b565b610a8c565b3480156101e157600080fd5b506101106101f0366004612fe5565b610c08565b34801561020157600080fd5b506102ba610210366004613067565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b031660009081526020818152604091829020825160a08101845281546001600160701b038082168352600160701b820460ff16151594830194909452600160781b90049092169282019290925260019091015463ffffffff81166060830152640100000000900465ffffffffffff16608082015290565b6040805182516001600160701b03908116825260208085015115159083015283830151169181019190915260608083015163ffffffff169082015260809182015165ffffffffffff169181019190915260a00161015e565b34801561031e57600080fd5b5061018761032d366004613067565b6001600160a01b03166000908152602081905260409020546001600160701b031690565b34801561035d57600080fd5b50610187600181565b34801561037257600080fd5b50610110610381366004613084565b611014565b34801561039257600080fd5b506101876103a1366004613121565b611111565b6101106103b4366004613067565b6104e3565b3480156103c557600080fd5b50610110611153565b3480156103da57600080fd5b506101106103e9366004613067565b61127c565b3480156103fa57600080fd5b50610110610409366004613155565b6114b4565b34801561041a57600080fd5b50610110610429366004613121565b6115af565b34801561043a57600080fd5b5061049d610449366004613067565b600060208190529081526040902080546001909101546001600160701b0380831692600160701b810460ff1692600160781b9091049091169063ffffffff811690640100000000900465ffffffffffff1685565b604080516001600160701b0396871681529415156020860152929094169183019190915263ffffffff16606082015265ffffffffffff909116608082015260a00161015e565b6104ed813461178b565b6001600160a01b03811660008181526020818152604091829020805492516001600160701b03909316835292917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c491015b60405180910390a25050565b33600090815260208190526040902063ffffffff82166105b15760405162461bcd60e51b815260206004820152601a60248201527f6d757374207370656369667920756e7374616b652064656c617900000000000060448201526064015b60405180910390fd5b600181015463ffffffff908116908316101561060f5760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016105a8565b805460009061062f903490600160781b90046001600160701b03166131cc565b9050600081116106765760405162461bcd60e51b81526020600482015260126024820152711b9bc81cdd185ad9481cdc1958da599a595960721b60448201526064016105a8565b6001600160701b038111156106be5760405162461bcd60e51b815260206004820152600e60248201526d7374616b65206f766572666c6f7760901b60448201526064016105a8565b6040805160a08101825283546001600160701b0390811682526001602080840182815286841685870190815263ffffffff808b16606088019081526000608089018181523380835296829052908a902098518954955194518916600160781b02600160781b600160e81b0319951515600160701b026effffffffffffffffffffffffffffff199097169190991617949094179290921695909517865551949092018054925165ffffffffffff166401000000000269ffffffffffffffffffff19909316949093169390931717905590517fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01906107cc908490879091825263ffffffff16602082015260400190565b60405180910390a2505050565b6000805a905033301461082e5760405162461bcd60e51b815260206004820152601760248201527f4141393220696e7465726e616c2063616c6c206f6e6c7900000000000000000060448201526064016105a8565b8451604081015160608201518101611388015a10156108585763deaddead60e01b60005260206000fd5b8751600090156108ec576000610875846000015160008c86611827565b9050806108ea57600061088961080061183f565b8051909150156108e45784600001516001600160a01b03168a602001517f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018760200151846040516108db92919061322f565b60405180910390a35b60019250505b505b600088608001515a860301905061093e6000838b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925061186b915050565b9a9950505050505050505050565b816000816001600160401b0381111561096757610967612cf2565b6040519080825280602002602001820160405280156109a057816020015b61098d612c42565b8152602001906001900390816109855790505b50905060005b82811015610a195760008282815181106109c2576109c2613248565b602002602001015190506000806109fd848a8a878181106109e5576109e5613248565b90506020028101906109f7919061325e565b85611b62565b91509150610a0e8483836000611ce4565b5050506001016109a6565b506000805b83811015610a7957610a6d81888884818110610a3c57610a3c613248565b9050602002810190610a4e919061325e565b858481518110610a6057610a60613248565b6020026020010151611e80565b90910190600101610a1e565b50610a848482611fa7565b505050505050565b33600090815260208190526040902080546001600160701b0316821115610af55760405162461bcd60e51b815260206004820152601960248201527f576974686472617720616d6f756e7420746f6f206c617267650000000000000060448201526064016105a8565b8054610b0b9083906001600160701b031661327f565b81546001600160701b0319166001600160701b0391909116178155604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a26000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610bb7576040519150601f19603f3d011682016040523d82523d6000602084013e610bbc565b606091505b5050905080610c025760405162461bcd60e51b81526020600482015260126024820152716661696c656420746f20776974686472617760701b60448201526064016105a8565b50505050565b816000805b82811015610d7c5736868683818110610c2857610c28613248565b9050602002810190610c3a9190613292565b9050366000610c4983806132a8565b90925090506000610c606040850160208601613067565b90506000196001600160a01b03821601610cbc5760405162461bcd60e51b815260206004820152601760248201527f4141393620696e76616c69642061676772656761746f7200000000000000000060448201526064016105a8565b6001600160a01b03811615610d59576001600160a01b03811663e3563a4f8484610ce960408901896132f1565b6040518563ffffffff1660e01b8152600401610d08949392919061349c565b60006040518083038186803b158015610d2057600080fd5b505afa925050508015610d31575060015b610d595760405163086a9f7560e41b81526001600160a01b03821660048201526024016105a8565b610d6382876131cc565b9550505050508080610d7490613519565b915050610c0d565b506000816001600160401b03811115610d9757610d97612cf2565b604051908082528060200260200182016040528015610dd057816020015b610dbd612c42565b815260200190600190039081610db55790505b5090506000805b84811015610ebb5736888883818110610df257610df2613248565b9050602002810190610e049190613292565b9050366000610e1383806132a8565b90925090506000610e2a6040850160208601613067565b90508160005b81811015610ea2576000898981518110610e4c57610e4c613248565b60200260200101519050600080610e6f8b8989878181106109e5576109e5613248565b91509150610e7f84838389611ce4565b8a610e8981613519565b9b50505050508080610e9a90613519565b915050610e30565b5050505050508080610eb390613519565b915050610dd7565b50600080915060005b85811015610fd45736898983818110610edf57610edf613248565b9050602002810190610ef19190613292565b9050610f036040820160208301613067565b6001600160a01b03167f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d60405160405180910390a2366000610f4583806132a8565b90925090508060005b81811015610fbc57610f9088858584818110610f6c57610f6c613248565b9050602002810190610f7e919061325e565b8b8b81518110610a6057610a60613248565b610f9a90886131cc565b965087610fa681613519565b9850508080610fb490613519565b915050610f4e565b50505050508080610fcc90613519565b915050610ec4565b506040516000907f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d908290a261100a8682611fa7565b5050505050505050565b8315801561102a57506001600160a01b0383163b155b156110775760405162461bcd60e51b815260206004820152601960248201527f41413230206163636f756e74206e6f74206465706c6f7965640000000000000060448201526064016105a8565b601481106110ef57600061108e6014828486613532565b6110979161355c565b60601c9050803b6000036110ed5760405162461bcd60e51b815260206004820152601b60248201527f41413330207061796d6173746572206e6f74206465706c6f796564000000000060448201526064016105a8565b505b60405162461bcd60e51b815260206004820152600060248201526044016105a8565b600061111c826120a5565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b3360009081526020819052604081206001810154909163ffffffff90911690036111ac5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081cdd185ad95960b21b60448201526064016105a8565b8054600160701b900460ff166111f85760405162461bcd60e51b8152602060048201526011602482015270616c726561647920756e7374616b696e6760781b60448201526064016105a8565b60018101546000906112109063ffffffff1642613591565b60018301805469ffffffffffff00000000191664010000000065ffffffffffff841690810291909117909155835460ff60701b1916845560405190815290915033907ffa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a9060200161053e565b3360009081526020819052604090208054600160781b90046001600160701b0316806112e15760405162461bcd60e51b81526020600482015260146024820152734e6f207374616b6520746f20776974686472617760601b60448201526064016105a8565b6001820154640100000000900465ffffffffffff166113425760405162461bcd60e51b815260206004820152601d60248201527f6d7573742063616c6c20756e6c6f636b5374616b65282920666972737400000060448201526064016105a8565b60018201544264010000000090910465ffffffffffff1611156113a75760405162461bcd60e51b815260206004820152601b60248201527f5374616b65207769746864726177616c206973206e6f7420647565000000000060448201526064016105a8565b60018201805469ffffffffffffffffffff191690558154600160781b600160e81b0319168255604080516001600160a01b03851681526020810183905233917fb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3910160405180910390a26000836001600160a01b03168260405160006040518083038185875af1925050503d806000811461145e576040519150601f19603f3d011682016040523d82523d6000602084013e611463565b606091505b5050905080610c025760405162461bcd60e51b815260206004820152601860248201527f6661696c656420746f207769746864726177207374616b65000000000000000060448201526064016105a8565b6114bc612c42565b6114c5856120be565b6000806114d460008885611b62565b9150915060006114e48383612198565b90506114ef43600052565b60006114fd60008a87611e80565b905061150843600052565b600060606001600160a01b038a161561157e57896001600160a01b031689896040516115359291906135b7565b6000604051808303816000865af19150503d8060008114611572576040519150601f19603f3d011682016040523d82523d6000602084013e611577565b606091505b5090925090505b866080015183856020015186604001518585604051630116f59360e71b81526004016105a8969594939291906135c7565b6115b7612c42565b6115c0826120be565b6000806115cf60008585611b62565b9150915060006115e6846000015160a00151612265565b8451519091506000906115f890612265565b9050611617604051806040016040528060008152602001600081525090565b36600061162760408a018a6132f1565b90925090506000601482101561163e576000611659565b61164c601460008486613532565b6116559161355c565b60601c5b905061166481612265565b935050505060006116758686612198565b9050600081600001519050600060016001600160a01b0316826001600160a01b031614905060006040518060c001604052808b6080015181526020018b6040015181526020018315158152602001856020015165ffffffffffff168152602001856040015165ffffffffffff1681526020016116f28c6060015190565b905290506001600160a01b0383161580159061171857506001600160a01b038316600114155b1561176a5760006040518060400160405280856001600160a01b0316815260200161174286612265565b81525090508187878a84604051633ebb2d3960e21b81526004016105a8959493929190613669565b8086868960405163e0cff05f60e01b81526004016105a894939291906136e9565b6001600160a01b038216600090815260208190526040812080549091906117bc9084906001600160701b03166131cc565b90506001600160701b038111156118085760405162461bcd60e51b815260206004820152601060248201526f6465706f736974206f766572666c6f7760801b60448201526064016105a8565b81546001600160701b0319166001600160701b03919091161790555050565b6000806000845160208601878987f195945050505050565b60603d8281111561184d5750815b604051602082018101604052818152816000602083013e9392505050565b6000805a855190915060009081611881826122b4565b60a08301519091506001600160a01b0381166118a05782519350611a47565b809350600088511115611a4757868202955060028a60028111156118c6576118c6613740565b1461193857606083015160405163a9a2340960e01b81526001600160a01b0383169163a9a2340991611900908e908d908c90600401613756565b600060405180830381600088803b15801561191a57600080fd5b5087f115801561192e573d6000803e3d6000fd5b5050505050611a47565b606083015160405163a9a2340960e01b81526001600160a01b0383169163a9a234099161196d908e908d908c90600401613756565b600060405180830381600088803b15801561198757600080fd5b5087f193505050508015611999575060015b611a47576119a561379d565b806308c379a0036119fe57506119b96137b9565b806119c45750611a00565b8b816040516020016119d69190613842565b60408051601f1981840301815290829052631101335b60e11b82526105a8929160040161322f565b505b8a604051631101335b60e11b81526004016105a89181526040602082018190526012908201527110504d4c081c1bdcdd13dc081c995d995c9d60721b606082015260800190565b5a85038701965081870295508589604001511015611ab0578a604051631101335b60e11b81526004016105a891815260406020808301829052908201527f414135312070726566756e642062656c6f772061637475616c476173436f7374606082015260800190565b6040890151869003611ac2858261178b565b6000808c6002811115611ad757611ad7613740565b1490508460a001516001600160a01b031685600001516001600160a01b03168c602001517f49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f8860200151858d8f604051611b4a949392919093845291151560208401526040830152606082015260800190565b60405180910390a45050505050505095945050505050565b60008060005a8451909150611b7786826122e4565b611b8086611111565b6020860152604081015160608201516080830151171760e087013517610100870135176effffffffffffffffffffffffffffff811115611c025760405162461bcd60e51b815260206004820152601860248201527f41413934206761732076616c756573206f766572666c6f77000000000000000060448201526064016105a8565b600080611c0e846123dd565b9050611c1c8a8a8a8461242a565b97509150611c2943600052565b60a08401516060906001600160a01b031615611c5157611c4c8b8b8b8587612662565b975090505b60005a87039050808b60a001351015611cb6578b604051631101335b60e11b81526004016105a8918152604060208201819052601e908201527f41413430206f76657220766572696669636174696f6e4761734c696d69740000606082015260800190565b60408a018390528160608b015260c08b01355a8803018a608001818152505050505050505050935093915050565b600080611cf085612885565b91509150816001600160a01b0316836001600160a01b031614611d565785604051631101335b60e11b81526004016105a89181526040602082018190526014908201527320a0991a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8015611dae5785604051631101335b60e11b81526004016105a89181526040602082018190526017908201527f414132322065787069726564206f72206e6f7420647565000000000000000000606082015260800190565b6000611db985612885565b925090506001600160a01b03811615611e155786604051631101335b60e11b81526004016105a89181526040602082018190526014908201527320a0999a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8115611e775786604051631101335b60e11b81526004016105a89181526040602082018190526021908201527f41413332207061796d61737465722065787069726564206f72206e6f742064756060820152606560f81b608082015260a00190565b50505050505050565b6000805a90506000611e93846060015190565b905030631d732756611ea860608801886132f1565b87856040518563ffffffff1660e01b8152600401611ec99493929190613880565b6020604051808303816000875af1925050508015611f04575060408051601f3d908101601f19168201909252611f0191810190613933565b60015b611f9b57600060206000803e50600051632152215360e01b8101611f665786604051631101335b60e11b81526004016105a8918152604060208201819052600f908201526e41413935206f7574206f662067617360881b606082015260800190565b600085608001515a611f78908661327f565b611f8291906131cc565b9050611f9288600288868561186b565b94505050611f9e565b92505b50509392505050565b6001600160a01b038216611ffd5760405162461bcd60e51b815260206004820152601860248201527f4141393020696e76616c69642062656e6566696369617279000000000000000060448201526064016105a8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461204a576040519150601f19603f3d011682016040523d82523d6000602084013e61204f565b606091505b50509050806120a05760405162461bcd60e51b815260206004820152601f60248201527f41413931206661696c65642073656e6420746f2062656e65666963696172790060448201526064016105a8565b505050565b60006120b0826128d8565b805190602001209050919050565b3063957122ab6120d160408401846132f1565b6120de6020860186613067565b6120ec6101208701876132f1565b6040518663ffffffff1660e01b815260040161210c95949392919061394c565b60006040518083038186803b15801561212457600080fd5b505afa925050508015612135575060015b6121955761214161379d565b806308c379a00361218957506121556137b9565b80612160575061218b565b80511561218557600081604051631101335b60e11b81526004016105a892919061322f565b5050565b505b3d6000803e3d6000fd5b50565b60408051606081018252600080825260208201819052918101829052906121be84612917565b905060006121cb84612917565b82519091506001600160a01b0381166121e2575080515b602080840151604080860151928501519085015191929165ffffffffffff8083169085161015612210578193505b8065ffffffffffff168365ffffffffffff16111561222c578092505b5050604080516060810182526001600160a01b03909416845265ffffffffffff9283166020850152911690820152925050505b92915050565b604080518082018252600080825260208083018281526001600160a01b03959095168252819052919091208054600160781b90046001600160701b031682526001015463ffffffff1690915290565b60c081015160e0820151600091908082036122d0575092915050565b6122dc82488301612988565b949350505050565b6122f16020830183613067565b6001600160a01b0316815260208083013590820152608080830135604083015260a0830135606083015260c0808401359183019190915260e08084013591830191909152610100830135908201523660006123506101208501856132f1565b909250905080156123d05760148110156123ac5760405162461bcd60e51b815260206004820152601d60248201527f4141393320696e76616c6964207061796d6173746572416e644461746100000060448201526064016105a8565b6123ba601460008385613532565b6123c39161355c565b60601c60a0840152610c02565b600060a084015250505050565b60a081015160009081906001600160a01b03166123fb5760016123fe565b60035b60ff16905060008360800151828560600151028560400151010190508360c00151810292505050919050565b60008060005a855180519192509061244f898861244a60408c018c6132f1565b6129a0565b60a082015161245d43600052565b60006001600160a01b0382166124a5576001600160a01b0383166000908152602081905260409020546001600160701b031688811161249e578089036124a1565b60005b9150505b606084015160208a0151604051633a871cdd60e01b81526001600160a01b03861692633a871cdd9290916124df918f918790600401613982565b60206040518083038160008887f19350505050801561251b575060408051601f3d908101601f1916820190925261251891810190613933565b60015b6125a55761252761379d565b806308c379a003612558575061253b6137b9565b80612546575061255a565b8b816040516020016119d691906139a7565b505b8a604051631101335b60e11b81526004016105a8918152604060208201819052601690820152754141323320726576657274656420286f72204f4f472960501b606082015260800190565b95506001600160a01b03821661264f576001600160a01b038316600090815260208190526040902080546001600160701b0316808a1115612632578c604051631101335b60e11b81526004016105a89181526040602082018190526017908201527f41413231206469646e2774207061792070726566756e64000000000000000000606082015260800190565b81546001600160701b031916908a90036001600160701b03161790555b5a85039650505050505094509492505050565b825160608181015190916000918481116126be5760405162461bcd60e51b815260206004820152601f60248201527f4141343120746f6f206c6974746c6520766572696669636174696f6e4761730060448201526064016105a8565b60a08201516001600160a01b038116600090815260208190526040902080548784039291906001600160701b031689811015612746578c604051631101335b60e11b81526004016105a8918152604060208201819052601e908201527f41413331207061796d6173746572206465706f73697420746f6f206c6f770000606082015260800190565b8981038260000160006101000a8154816001600160701b0302191690836001600160701b03160217905550826001600160a01b031663f465c77e858e8e602001518e6040518563ffffffff1660e01b81526004016127a693929190613982565b60006040518083038160008887f1935050505080156127e757506040513d6000823e601f3d908101601f191682016040526127e491908101906139de565b60015b612871576127f361379d565b806308c379a00361282457506128076137b9565b806128125750612826565b8d816040516020016119d69190613a69565b505b8c604051631101335b60e11b81526004016105a8918152604060208201819052601690820152754141333320726576657274656420286f72204f4f472960501b606082015260800190565b909e909d509b505050505050505050505050565b6000808260000361289b57506000928392509050565b60006128a684612917565b9050806040015165ffffffffffff164211806128cd5750806020015165ffffffffffff1642105b905194909350915050565b60603660006128eb6101408501856132f1565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b60408051606081018252600080825260208201819052918101919091528160a081901c65ffffffffffff8116600003612953575065ffffffffffff5b604080516060810182526001600160a01b03909316835260d09490941c602083015265ffffffffffff16928101929092525090565b60008183106129975781612999565b825b9392505050565b8015610c02578251516001600160a01b0381163b15612a0b5784604051631101335b60e11b81526004016105a8918152604060208201819052601f908201527f414131302073656e64657220616c726561647920636f6e737472756374656400606082015260800190565b600154845160600151604051632b870d1b60e11b81526000926001600160a01b03169163570e1a3691612a449088908890600401613a93565b60206040518083038160008887f1158015612a63573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612a889190613aa7565b90506001600160a01b038116612aea5785604051631101335b60e11b81526004016105a8918152604060208201819052601b908201527f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000606082015260800190565b816001600160a01b0316816001600160a01b031614612b545785604051631101335b60e11b81526004016105a891815260406020808301829052908201527f4141313420696e6974436f6465206d7573742072657475726e2073656e646572606082015260800190565b806001600160a01b03163b600003612bb75785604051631101335b60e11b81526004016105a891815260406020808301829052908201527f4141313520696e6974436f6465206d757374206372656174652073656e646572606082015260800190565b6000612bc66014828688613532565b612bcf9161355c565b60601c9050826001600160a01b031686602001517fd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d83896000015160a00151604051612c319291906001600160a01b0392831681529116602082015260400190565b60405180910390a350505050505050565b6040518060a00160405280612ca760405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001600080191681526020016000815260200160008152602001600081525090565b600060208284031215612cde57600080fd5b813563ffffffff8116811461299957600080fd5b634e487b7160e01b600052604160045260246000fd5b60a081018181106001600160401b0382111715612d2757612d27612cf2565b60405250565b61010081018181106001600160401b0382111715612d2757612d27612cf2565b601f8201601f191681016001600160401b0381118282101715612d7257612d72612cf2565b6040525050565b60006001600160401b03821115612d9257612d92612cf2565b50601f01601f191660200190565b6001600160a01b038116811461219557600080fd5b8035612dc081612da0565b919050565b6000818303610180811215612dd957600080fd5b604051612de581612d08565b80925061010080831215612df857600080fd5b6040519250612e0683612d2d565b612e0f85612db5565b835260208501356020840152604085013560408401526060850135606084015260808501356080840152612e4560a08601612db5565b60a084015260c085013560c084015260e085013560e084015282825280850135602083015250610120840135604082015261014084013560608201526101608401356080820152505092915050565b60008083601f840112612ea657600080fd5b5081356001600160401b03811115612ebd57600080fd5b602083019150836020828501011115612ed557600080fd5b9250929050565b6000806000806101c08587031215612ef357600080fd5b84356001600160401b0380821115612f0a57600080fd5b818701915087601f830112612f1e57600080fd5b8135612f2981612d79565b604051612f368282612d4d565b8281528a6020848701011115612f4b57600080fd5b82602086016020830137600060208483010152809850505050612f718860208901612dc5565b94506101a0870135915080821115612f8857600080fd5b50612f9587828801612e94565b95989497509550505050565b60008083601f840112612fb357600080fd5b5081356001600160401b03811115612fca57600080fd5b6020830191508360208260051b8501011115612ed557600080fd5b600080600060408486031215612ffa57600080fd5b83356001600160401b0381111561301057600080fd5b61301c86828701612fa1565b909450925050602084013561303081612da0565b809150509250925092565b6000806040838503121561304e57600080fd5b823561305981612da0565b946020939093013593505050565b60006020828403121561307957600080fd5b813561299981612da0565b60008060008060006060868803121561309c57600080fd5b85356001600160401b03808211156130b357600080fd5b6130bf89838a01612e94565b9097509550602088013591506130d482612da0565b909350604087013590808211156130ea57600080fd5b506130f788828901612e94565b969995985093965092949392505050565b6000610160828403121561311b57600080fd5b50919050565b60006020828403121561313357600080fd5b81356001600160401b0381111561314957600080fd5b6122dc84828501613108565b6000806000806060858703121561316b57600080fd5b84356001600160401b038082111561318257600080fd5b61318e88838901613108565b9550602087013591506131a082612da0565b90935060408601359080821115612f8857600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561225f5761225f6131b6565b60005b838110156131fa5781810151838201526020016131e2565b50506000910152565b6000815180845261321b8160208601602086016131df565b601f01601f19169290920160200192915050565b8281526040602082015260006122dc6040830184613203565b634e487b7160e01b600052603260045260246000fd5b6000823561015e1983360301811261327557600080fd5b9190910192915050565b8181038181111561225f5761225f6131b6565b60008235605e1983360301811261327557600080fd5b6000808335601e198436030181126132bf57600080fd5b8301803591506001600160401b038211156132d957600080fd5b6020019150600581901b3603821315612ed557600080fd5b6000808335601e1984360301811261330857600080fd5b8301803591506001600160401b0382111561332257600080fd5b602001915036819003821315612ed557600080fd5b6000808335601e1984360301811261334e57600080fd5b83016020810192503590506001600160401b0381111561336d57600080fd5b803603821315612ed557600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101606133c4846133b785612db5565b6001600160a01b03169052565b602083013560208501526133db6040840184613337565b8260408701526133ee838701828461337c565b925050506133ff6060840184613337565b858303606087015261341283828461337c565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e085015261010080840135818601525061012061345981850185613337565b8684038388015261346b84828461337c565b935050505061014061347f81850185613337565b8684038388015261349184828461337c565b979650505050505050565b6040808252810184905260006060600586901b830181019083018783805b8981101561350257868503605f190184528235368c900361015e190181126134e0578283fd5b6134ec868d83016133a5565b95505060209384019392909201916001016134ba565b50505050828103602084015261349181858761337c565b60006001820161352b5761352b6131b6565b5060010190565b6000808585111561354257600080fd5b8386111561354f57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156135895780818660140360031b1b83161692505b505092915050565b65ffffffffffff8181168382160190808211156135b0576135b06131b6565b5092915050565b8183823760009101908152919050565b868152856020820152600065ffffffffffff8087166040840152808616606084015250831515608083015260c060a083015261360660c0830184613203565b98975050505050505050565b80518252602081015160208301526040810151151560408301526000606082015165ffffffffffff8082166060860152806080850151166080860152505060a082015160c060a08501526122dc60c0850182613203565b600061014080835261367d81840189613612565b915050613697602083018780518252602090810151910152565b845160608301526020948501516080830152835160a08301529284015160c082015281516001600160a01b031660e0820152908301518051610100830152909201516101209092019190915292915050565b60e0815260006136fc60e0830187613612565b9050613715602083018680518252602090810151910152565b8351606083015260208401516080830152825160a0830152602083015160c083015295945050505050565b634e487b7160e01b600052602160045260246000fd5b60006003851061377657634e487b7160e01b600052602160045260246000fd5b8482526060602083015261378d6060830185613203565b9050826040830152949350505050565b600060033d11156137b65760046000803e5060005160e01c5b90565b600060443d10156137c75790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156137f657505050505090565b828501915081518181111561380e5750505050505090565b843d87010160208285010111156138285750505050505090565b61383760208286010187612d4d565b509095945050505050565b75020a09a98103837b9ba27b8103932bb32b93a32b21d160551b8152600082516138738160168501602087016131df565b9190910160160192915050565b60006101c0808352613895818401878961337c565b9050845160018060a01b03808251166020860152602082015160408601526040820151606086015260608201516080860152608082015160a08601528060a08301511660c08601525060c081015160e085015260e08101516101008501525060208501516101208401526040850151610140840152606085015161016084015260808501516101808401528281036101a08401526134918185613203565b60006020828403121561394557600080fd5b5051919050565b60608152600061396060608301878961337c565b6001600160a01b0386166020840152828103604084015261360681858761337c565b60608152600061399560608301866133a5565b60208301949094525060400152919050565b6e020a09919903932bb32b93a32b21d1608d1b8152600082516139d181600f8501602087016131df565b91909101600f0192915050565b600080604083850312156139f157600080fd5b82516001600160401b03811115613a0757600080fd5b8301601f81018513613a1857600080fd5b8051613a2381612d79565b604051613a308282612d4d565b828152876020848601011115613a4557600080fd5b613a568360208301602087016131df565b6020969096015195979596505050505050565b6e020a09999903932bb32b93a32b21d1608d1b8152600082516139d181600f8501602087016131df565b6020815260006122dc60208301848661337c565b600060208284031215613ab957600080fd5b815161299981612da056fea2646970667358221220037db08541ecf10652278ff7a8ff47de4fb157649346752237d042836e4efd3064736f6c63430008110033",
  "devdoc": {
    "errors": {
      "FailedOp(uint256,string)": [
        {
          "params": {
            "opIndex": "- index into the array of ops to the failed one (in simulateValidation, this is always zero)",
            "reason": "- revert reason      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."
          }
        }
      ],
      "ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
        {
          "params": {
            "factoryInfo": "stake information about the factory (if any)",
            "paymasterInfo": "stake information about the paymaster (if any)",
            "returnInfo": "gas and time-range returned values",
            "senderInfo": "stake information about the sender"
          }
        }
      ],
      "ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
        {
          "params": {
            "aggregatorInfo": "signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation",
            "factoryInfo": "stake information about the factory (if any)",
            "paymasterInfo": "stake information about the paymaster (if any)",
            "returnInfo": "gas and time-range returned values",
            "senderInfo": "stake information about the sender"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addStake(uint32)": {
        "params": {
          "unstakeDelaySec": "the new lock duration before the deposit can be withdrawn."
        }
      },
      "getDepositInfo(address)": {
        "returns": {
          "info": "- full deposit information of given account"
        }
      },
      "handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
        "params": {
          "beneficiary": "the address to receive the fees",
          "opsPerAggregator": "the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)"
        }
      },
      "handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
        "params": {
          "beneficiary": "the address to receive the fees",
          "ops": "the operations to execute"
        }
      },
      "simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)": {
        "params": {
          "op": "the UserOperation to simulate",
          "target": "if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.",
          "targetCallData": "callData to pass to target address"
        }
      },
      "simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
        "details": "this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.",
        "params": {
          "userOp": "the user operation to validate."
        }
      },
      "withdrawStake(address)": {
        "params": {
          "withdrawAddress": "the address to send withdrawn value."
        }
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "withdrawAddress": "the address to send withdrawn value.",
          "withdrawAmount": "the amount to withdraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)": [
        {
          "notice": "return value of simulateHandleOp"
        }
      ],
      "FailedOp(uint256,string)": [
        {
          "notice": "a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."
        }
      ],
      "SenderAddressResult(address)": [
        {
          "notice": "return value of getSenderAddress"
        }
      ],
      "SignatureValidationFailed(address)": [
        {
          "notice": "error case when a signature aggregator fails to verify the aggregated signature it had created."
        }
      ],
      "ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
        {
          "notice": "Successful result from simulateValidation."
        }
      ],
      "ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
        {
          "notice": "Successful result from simulateValidation, if the account returns a signature aggregator"
        }
      ]
    },
    "events": {
      "AccountDeployed(bytes32,address,address,address)": {
        "notice": "account \"sender\" was deployed."
      },
      "SignatureAggregatorChanged(address)": {
        "notice": "signature aggregator used by the following UserOperationEvents within this bundle."
      },
      "StakeLocked(address,uint256,uint256)": {
        "notice": "Emitted when stake or unstake delay are modified"
      },
      "StakeUnlocked(address,uint256)": {
        "notice": "Emitted once a stake is scheduled for withdrawal"
      },
      "UserOperationRevertReason(bytes32,address,uint256,bytes)": {
        "notice": "An event emitted if the UserOperation \"callData\" reverted with non-zero length"
      }
    },
    "kind": "user",
    "methods": {
      "SIG_VALIDATION_FAILED()": {
        "notice": "for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value in case of signature failure, instead of revert."
      },
      "_validateSenderAndPaymaster(bytes,address,bytes)": {
        "notice": "Called only during simulation. This function always reverts to prevent warm/cold storage differentiation in simulation vs execution."
      },
      "addStake(uint32)": {
        "notice": "add to the account's stake - amount and delay any pending unstake is first cancelled."
      },
      "balanceOf(address)": {
        "notice": "return the deposit (for gas payment) of the account"
      },
      "depositTo(address)": {
        "notice": "add to the deposit of the given account"
      },
      "deposits(address)": {
        "notice": "maps paymaster to their deposits and stakes"
      },
      "getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
        "notice": "generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."
      },
      "handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
        "notice": "Execute a batch of UserOperation with Aggregators"
      },
      "handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
        "notice": "Execute a batch of UserOperations. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."
      },
      "innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)": {
        "notice": "inner function to handle a UserOperation. Must be declared \"external\" to open a call context, but it can only be called by handleOps."
      },
      "simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)": {
        "notice": "simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \"ExecutionResult\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events."
      },
      "simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
        "notice": "Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp."
      },
      "unlockStake()": {
        "notice": "attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."
      },
      "withdrawStake(address)": {
        "notice": "withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"
      },
      "withdrawTo(address,uint256)": {
        "notice": "withdraw from the deposit."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17929,
        "contract": "contracts/eip4337/core/EntryPoint.sol:EntryPoint",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(DepositInfo)18687_storage)"
      },
      {
        "astId": 15251,
        "contract": "contracts/eip4337/core/EntryPoint.sol:EntryPoint",
        "label": "senderCreator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(SenderCreator)17917"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(SenderCreator)17917": {
        "encoding": "inplace",
        "label": "contract SenderCreator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(DepositInfo)18687_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakeManager.DepositInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositInfo)18687_storage"
      },
      "t_struct(DepositInfo)18687_storage": {
        "encoding": "inplace",
        "label": "struct IStakeManager.DepositInfo",
        "members": [
          {
            "astId": 18678,
            "contract": "contracts/eip4337/core/EntryPoint.sol:EntryPoint",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 18680,
            "contract": "contracts/eip4337/core/EntryPoint.sol:EntryPoint",
            "label": "staked",
            "offset": 14,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 18682,
            "contract": "contracts/eip4337/core/EntryPoint.sol:EntryPoint",
            "label": "stake",
            "offset": 15,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 18684,
            "contract": "contracts/eip4337/core/EntryPoint.sol:EntryPoint",
            "label": "unstakeDelaySec",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 18686,
            "contract": "contracts/eip4337/core/EntryPoint.sol:EntryPoint",
            "label": "withdrawTime",
            "offset": 4,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}