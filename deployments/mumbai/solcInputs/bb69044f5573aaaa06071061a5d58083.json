{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./Wallet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Factory - factory responsible for deploying Smart Accounts using CREATE2 and CREATE\n * @dev It deploys Smart Accounts as proxies pointing to `basicImplementation` that is immutable.\n *      This allows keeping the same address for the same Smart Account owner on various chains via CREATE2\n * @author Albert Huang - <albert@sodiums.com>\n */\ncontract Factory is Ownable {\n    event AccountCreation(address indexed account, bytes32 slat);\n\n    // Prevent ddos attacks\n    mapping (address => bool) public allowSingleton;\n\n    constructor(address _owner, address initSingleton) {\n        _transferOwnership(_owner);\n        internalAddAllowSingleton(initSingleton);\n    }\n\n    function isContract(address _addr) private view returns (bool) {\n        uint32 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n\n    function internalAddAllowSingleton(address _singleton) private {\n        require(isContract(_singleton), \"F01\");\n        allowSingleton[_singleton] = true;\n    }\n\n    function addAllowSingleton(address _singleton) public onlyOwner {\n        internalAddAllowSingleton(_singleton);\n    }\n\n    function deployProxy(\n        address _singleton,\n        bytes memory stupCode,\n        bytes32 salt\n    ) external returns (address proxy) {\n        bytes memory creationCode = Wallet.creationCode;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            proxy := create2(\n                0x0,\n                add(0x20, creationCode),\n                mload(creationCode),\n                salt\n            )\n        }\n        require(address(proxy) != address(0), \"Create2 call failed\");\n        (bool successSetup, ) = proxy.call(abi.encodeWithSignature(\"setImpl(address)\", _singleton));\n        require(successSetup, \"set proxy failed\");\n        (bool success, ) = proxy.call(stupCode);\n        require(success, \"init wallet failed\");\n    }\n    // off-chain calculation\n    // return ethers.utils.getCreate2Address(<factory address>, <create2 salt>, ethers.utils.keccak256(creationCode));\n}\n"
    },
    "contracts/Wallet.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n// @Proxy.sol\nlibrary Wallet {\n  bytes internal constant creationCode = hex\"608060405234801561001057600080fd5b50610180806100206000396000f3fe60806040526004361061001e5760003560e01c8063691bd2ae14610046575b30543660008037600080366000845af43d6000803e80801561003f573d6000f35b3d6000fd5b005b34801561005257600080fd5b5061004461006136600461011a565b6001600160a01b0381166100bc5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420696d706c656d656e746174696f6e2061646472657373000060448201526064015b60405180910390fd5b30546001600160a01b038116156101155760405162461bcd60e51b815260206004820152601a60248201527f496d706c656d656e746174696f6e20616c72656164792073657400000000000060448201526064016100b3565b503055565b60006020828403121561012c57600080fd5b81356001600160a01b038116811461014357600080fd5b939250505056fea26469706673582212207efdfc2f5463e8adb0681461b14417ea7c7651a6359421a66c154326fef5e45d64736f6c63430008110033\";\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}