{
  "address": "0xCA25952469BBae82c63A7A75D8aBc7dBf9442e18",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initCode",
          "type": "bytes"
        }
      ],
      "name": "createSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initCode",
          "type": "bytes"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8802d864ca4fb8c45e04015a5830d4e9f522bb4d818ae9bb9c83a058282eefa3",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x17a243f7Dd13BadE0a7001Ad71a7ef4628A75fCB",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "326466",
    "logsBloom": "0x
    "blockHash": "0xe391ba615885ebd7713838871d2faf6d80bb5535e4452ebcb0ded6a6d785d593",
    "transactionHash": "0x8802d864ca4fb8c45e04015a5830d4e9f522bb4d818ae9bb9c83a058282eefa3",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 32103064,
        "transactionHash": "0x8802d864ca4fb8c45e04015a5830d4e9f522bb4d818ae9bb9c83a058282eefa3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000017a243f7dd13bade0a7001ad71a7ef4628a75fcb",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000001bd60eef11e00000000000000000000000000000000000000000000000000028a94b074df5ea7000000000000000000000000000000000000000000002d1b2ad5dfb1bf76c0fa0000000000000000000000000000000000000000000000000288d74f85ee40a7000000000000000000000000000000000000000000002d1b2ad79d12ae67defa",
        "logIndex": 29,
        "blockHash": "0xe391ba615885ebd7713838871d2faf6d80bb5535e4452ebcb0ded6a6d785d593"
      }
    ],
    "blockNumber": 32103064,
    "cumulativeGasUsed": "3061201",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c597daaabc672b8423039a30fbf09f03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"createSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"helper contract for EntryPoint, to call userOp.initCode from a \\\"neutral\\\" address, which is explicitly not the entryPoint itself.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/eip4337/core/SenderCreator.sol\":\"SenderCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n    Minimal upgradeable proxy implementation, delegates all calls to the address\\n    defined by the storage slot matching the wallet address.\\n    Inspired by EIP-1167 Implementation (https://eips.ethereum.org/EIPS/eip-1167)\\n    deployed code:\\n        0x00    0x36         0x36      CALLDATASIZE      cds\\n        0x01    0x3d         0x3d      RETURNDATASIZE    0 cds\\n        0x02    0x3d         0x3d      RETURNDATASIZE    0 0 cds\\n        0x03    0x37         0x37      CALLDATACOPY\\n        0x04    0x3d         0x3d      RETURNDATASIZE    0\\n        0x05    0x3d         0x3d      RETURNDATASIZE    0 0\\n        0x06    0x3d         0x3d      RETURNDATASIZE    0 0 0\\n        0x07    0x36         0x36      CALLDATASIZE      cds 0 0 0\\n        0x08    0x3d         0x3d      RETURNDATASIZE    0 cds 0 0 0\\n        0x09    0x30         0x30      ADDRESS           addr 0 cds 0 0 0\\n        0x0A    0x54         0x54      SLOAD             imp 0 cds 0 0 0\\n        0x0B    0x5a         0x5a      GAS               gas imp 0 cds 0 0 0\\n        0x0C    0xf4         0xf4      DELEGATECALL      suc 0\\n        0x0D    0x3d         0x3d      RETURNDATASIZE    rds suc 0\\n        0x0E    0x82         0x82      DUP3              0 rds suc 0\\n        0x0F    0x80         0x80      DUP1              0 0 rds suc 0\\n        0x10    0x3e         0x3e      RETURNDATACOPY    suc 0\\n        0x11    0x90         0x90      SWAP1             0 suc\\n        0x12    0x3d         0x3d      RETURNDATASIZE    rds 0 suc\\n        0x13    0x91         0x91      SWAP2             suc 0 rds\\n        0x14    0x60 0x18    0x6018    PUSH1             0x18 suc 0 rds\\n    /-- 0x16    0x57         0x57      JUMPI             0 rds\\n    |   0x17    0xfd         0xfd      REVERT\\n    \\\\-> 0x18    0x5b         0x5b      JUMPDEST          0 rds\\n        0x19    0xf3         0xf3      RETURN\\n    flat deployed code: 0x363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\\n    deploy function:\\n        0x00    0x60 0x3a    0x603a    PUSH1             0x3a\\n        0x02    0x60 0x0e    0x600e    PUSH1             0x0e 0x3a\\n        0x04    0x3d         0x3d      RETURNDATASIZE    0 0x0e 0x3a\\n        0x05    0x39         0x39      CODECOPY\\n        0x06    0x60 0x1a    0x601a    PUSH1             0x1a\\n        0x08    0x80         0x80      DUP1              0x1a 0x1a\\n        0x09    0x51         0x51      MLOAD             imp 0x1a\\n        0x0A    0x30         0x30      ADDRESS           addr imp 0x1a\\n        0x0B    0x55         0x55      SSTORE            0x1a\\n        0x0C    0x3d         0x3d      RETURNDATASIZE    0 0x1a\\n        0x0D    0xf3         0xf3      RETURN\\n        [...deployed code]\\n    flat deploy function: 0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\\n*/\\nlibrary Wallet {\\n  bytes internal constant creationCode = hex\\\"603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\\\";\\n}\",\"keccak256\":\"0x2149dfc23a198f5a513f74d415e381739c00a2558356b26f5f7aae35dcc58b49\",\"license\":\"LGPL-3.0-only\"},\"contracts/eip4337/core/SenderCreator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../Wallet.sol\\\";\\n\\n/**\\n * helper contract for EntryPoint, to call userOp.initCode from a \\\"neutral\\\" address,\\n * which is explicitly not the entryPoint itself.\\n */\\ncontract SenderCreator {\\n    function deployProxy(\\n        address _singleton,\\n        bytes memory initCode,\\n        bytes32 salt\\n    ) internal returns (address proxy) {\\n        bytes memory creationCode = abi.encodePacked(\\n            Wallet.creationCode,\\n            uint256(uint160(_singleton))\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create2(\\n                0x0,\\n                add(0x20, creationCode),\\n                mload(creationCode),\\n                salt\\n            )\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n        (bool success, ) = proxy.call(initCode);\\n        require(success, \\\"init wallet failed\\\");\\n    }\\n\\n    function getAddress(\\n        bytes calldata initCode\\n    ) external view returns (address) {\\n        bytes32 salt = bytes32(initCode[20:52]);\\n        address singleton = address(bytes20(initCode[0:20]));\\n        bytes memory creationCode = abi.encodePacked(\\n            Wallet.creationCode,\\n            uint256(uint160(singleton))\\n        );\\n        bytes32 has = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                salt,\\n                keccak256(creationCode)\\n            )\\n        );\\n        // NOTE: cast last 20 bytes of hash to address\\n        return address(uint160(uint(has)));\\n    }\\n\\n    function createSender(\\n        bytes calldata initCode\\n    ) external returns (address sender) {\\n        address singleton = address(bytes20(initCode[0:20]));\\n        bytes32 salt = bytes32(initCode[20:52]);\\n        bytes memory initCallData = initCode[52:];\\n        sender = address(deployProxy(singleton, initCallData, salt));\\n    }\\n}\\n\",\"keccak256\":\"0x1a438d080e132fd859c9cbaa6e576313317a3bf6ab9b483a37cd35c1101ebcee\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506104ee806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063570e1a361461003b578063c47cf5de1461006a575b600080fd5b61004e610049366004610345565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610345565b610114565b60008061008d60148285876103b7565b610096916103e1565b60601c905060006100ab6034601486886103b7565b6100b491610416565b905060006100c585603481896103b7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935061010a9250859150839050846101f5565b9695505050505050565b6000806101256034601485876103b7565b61012e91610416565b9050600061013f60148286886103b7565b610148916103e1565b60601c9050600060405180606001604052806028815260200161049160289139826001600160a01b0316604051602001610183929190610464565b60408051808303601f1901815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019690965260558084019690965281518084039096018652607590920190528351930192909220925050505b92915050565b60008060405180606001604052806028815260200161049160289139856001600160a01b031660405160200161022c929190610464565b6040516020818303038152906040529050828151826020016000f591506001600160a01b03821661029a5760405162461bcd60e51b815260206004820152601360248201527210dc99585d194c8818d85b1b0819985a5b1959606a1b60448201526064015b60405180910390fd5b6000826001600160a01b0316856040516102b4919061047d565b6000604051808303816000865af19150503d80600081146102f1576040519150601f19603f3d011682016040523d82523d6000602084013e6102f6565b606091505b505090508061033c5760405162461bcd60e51b81526020600482015260126024820152711a5b9a5d081dd85b1b195d0819985a5b195960721b6044820152606401610291565b50509392505050565b6000806020838503121561035857600080fd5b823567ffffffffffffffff8082111561037057600080fd5b818501915085601f83011261038457600080fd5b81358181111561039357600080fd5b8660208285010111156103a557600080fd5b60209290920196919550909350505050565b600080858511156103c757600080fd5b838611156103d457600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff19813581811691601485101561040e5780818660140360031b1b83161692505b505092915050565b803560208310156101ef57600019602084900360031b1b1692915050565b6000815160005b81811015610455576020818501810151868301520161043b565b50600093019283525090919050565b60006104708285610434565b9283525050602001919050565b60006104898284610434565b939250505056fe603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3a26469706673582212203585792477fbd4435140a3e196b7cb0bc5f3b755621348f1d894b7a7b2c1913064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063570e1a361461003b578063c47cf5de1461006a575b600080fd5b61004e610049366004610345565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610345565b610114565b60008061008d60148285876103b7565b610096916103e1565b60601c905060006100ab6034601486886103b7565b6100b491610416565b905060006100c585603481896103b7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935061010a9250859150839050846101f5565b9695505050505050565b6000806101256034601485876103b7565b61012e91610416565b9050600061013f60148286886103b7565b610148916103e1565b60601c9050600060405180606001604052806028815260200161049160289139826001600160a01b0316604051602001610183929190610464565b60408051808303601f1901815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019690965260558084019690965281518084039096018652607590920190528351930192909220925050505b92915050565b60008060405180606001604052806028815260200161049160289139856001600160a01b031660405160200161022c929190610464565b6040516020818303038152906040529050828151826020016000f591506001600160a01b03821661029a5760405162461bcd60e51b815260206004820152601360248201527210dc99585d194c8818d85b1b0819985a5b1959606a1b60448201526064015b60405180910390fd5b6000826001600160a01b0316856040516102b4919061047d565b6000604051808303816000865af19150503d80600081146102f1576040519150601f19603f3d011682016040523d82523d6000602084013e6102f6565b606091505b505090508061033c5760405162461bcd60e51b81526020600482015260126024820152711a5b9a5d081dd85b1b195d0819985a5b195960721b6044820152606401610291565b50509392505050565b6000806020838503121561035857600080fd5b823567ffffffffffffffff8082111561037057600080fd5b818501915085601f83011261038457600080fd5b81358181111561039357600080fd5b8660208285010111156103a557600080fd5b60209290920196919550909350505050565b600080858511156103c757600080fd5b838611156103d457600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff19813581811691601485101561040e5780818660140360031b1b83161692505b505092915050565b803560208310156101ef57600019602084900360031b1b1692915050565b6000815160005b81811015610455576020818501810151868301520161043b565b50600093019283525090919050565b60006104708285610434565b9283525050602001919050565b60006104898284610434565b939250505056fe603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3a26469706673582212203585792477fbd4435140a3e196b7cb0bc5f3b755621348f1d894b7a7b2c1913064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "helper contract for EntryPoint, to call userOp.initCode from a \"neutral\" address, which is explicitly not the entryPoint itself.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}